<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dangxy99的Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-01T09:40:30.458Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>dangxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020plan</title>
    <link href="http://yoursite.com/2020/01/01/2020plan/"/>
    <id>http://yoursite.com/2020/01/01/2020plan/</id>
    <published>2020-01-01T08:42:53.000Z</published>
    <updated>2020-01-01T09:40:30.458Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="personal" scheme="http://yoursite.com/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>读书-书摘</title>
    <link href="http://yoursite.com/2019/12/22/%E8%AF%BB%E4%B9%A6-%E4%B9%A6%E6%91%98/"/>
    <id>http://yoursite.com/2019/12/22/读书-书摘/</id>
    <published>2019-12-22T10:17:35.000Z</published>
    <updated>2020-01-01T10:20:51.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h1><ul><li><p>高效的学习能力。这意味着——基础知识扎实、触类旁通、读英文文档不费劲、有寻找前沿知识的能力、能够看到问题和技术的本质、善于思辩、能独立思考。</p><a id="more"></a></li><li><p>解决问题的能力。这意味着——你要高效的学习能力、见过很多的场景、犯过或是处理很多错误、能够防火而不是救火。<br>如果你拥有这两个能力的现象是—— 在团队或身边的人群中的显现出Leadership。<br>Leadership并不是当领导和经理，而是一种特征，这种特征有如下两个简单的表象：</p></li><li>帮人解问题。团队或身边中大多数人都在问：“这问题怎么办？”，而总是你能站出来告诉大家这事该怎么办？</li><li>被人所依赖。团队或身边中大多数人在做比较关键的决定时，都会来找你咨询你的意见和想法。<br>一但你在在30岁之间出现了Leadership这样的特征，那么，你会进入一个正循环的阶段：</li><li>因为你学习能力强，所以，你会有更多的机会解决难题。</li><li>你有更多的机会解决难题，你就会学更多的东西，于是你就会更强。</li><li>上面这个循环，只要循环上几年，就会让你人生的各种可能性大大的增加。<h2 id="【-注意-】"><a href="#【-注意-】" class="headerlink" title="【 注意 】"></a>【 注意 】</h2></li><li>要达到这样的特质，需要找到自己的长处、以及适合自己的环境。就像鱼的特长是呆在水里，让鱼儿去追求陆上动物的刺激生活并不靠谱。</li><li>一般说来，有这样的潜质的人，在学校中就应该要出现。如果你在大学中还没有出现这样的潜质，那么，你在工作当中要加倍努力了（注：所谓的加倍努力，不是让你使蛮力加班，而是让你多学习成长，使蛮力拼命是弥补不了能力、思维、眼界上的缺陷的）。</li><li>Leadership也有范围的，比如，身边的朋友，工作中的团队/部分，圈内，整个行业。Leadership的范围越大，你的个人发展的选择性就越高。反之则越小。</li><li>如果已到了30岁左右，还是没有出现这样的特征。那么，可能未来你也很难有这样的Leadership了。而你的个人发展的可能性可能也就不多了（sigh…）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;书摘&quot;&gt;&lt;a href=&quot;#书摘&quot; class=&quot;headerlink&quot; title=&quot;书摘&quot;&gt;&lt;/a&gt;书摘&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;高效的学习能力。这意味着——基础知识扎实、触类旁通、读英文文档不费劲、有寻找前沿知识的能力、能够看到问题和技术的本质、善于思辩、能独立思考。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-CustomView  Paint</title>
    <link href="http://yoursite.com/2019/12/21/Android-CustomView-Paint/"/>
    <id>http://yoursite.com/2019/12/21/Android-CustomView-Paint/</id>
    <published>2019-12-21T10:09:51.000Z</published>
    <updated>2020-01-01T10:15:48.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>绘制出来的颜色,具体效果则由Paint确定。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setStyle(Paint.Style.FILL);  <span class="comment">//设置画笔模式为填充</span></div></pre></td></tr></table></figure><p>前使用的模式一直为填充模式，实际上画笔有三种模式，如下：</p><ol><li>STROKE                //描边</li><li>FILL                  //填充</li><li>FILL_AND_STROKE       //描边加填充<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">paint.setColor(Color.BLUE);</div><div class="line">paint.setStrokeWidth(<span class="number">40</span>);     <span class="comment">//为了实验效果明显，特地设置描边宽度非常大</span></div><div class="line"></div><div class="line"><span class="comment">// 描边</span></div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">canvas.drawCircle(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,paint);</div><div class="line"></div><div class="line"><span class="comment">// 填充</span></div><div class="line">paint.setStyle(Paint.Style.FILL);</div><div class="line">canvas.drawCircle(<span class="number">200</span>,<span class="number">500</span>,<span class="number">100</span>,paint);</div><div class="line"></div><div class="line"><span class="comment">// 描边加填充</span></div><div class="line">paint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">canvas.drawCircle(<span class="number">200</span>, <span class="number">800</span>, <span class="number">100</span>, paint);</div></pre></td></tr></table></figure></li></ol><h3 id="绘制的paint的相关方法"><a href="#绘制的paint的相关方法" class="headerlink" title="绘制的paint的相关方法"></a>绘制的paint的相关方法</h3><p>色彩    setColor setARGB setAlpha    设置颜色，透明度<br>大小    setTextSize    设置文本字体大小<br>字体    setTypeface    设置或清除字体样式<br>样式    setStyle    填充(FILL),描边(STROKE),填充加描边(FILL_AND_STROKE)<br>对齐    setTextAlign    左对齐(LEFT),居中对齐(CENTER),右对齐(RIGHT)<br>测量    measureText    测量文本大小(注意，请在设置完文本各项参数后调用)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Paint.setStyle(Style style) 设置绘制模式</div><div class="line">Paint.setColor(<span class="keyword">int</span> color) 设置颜色</div><div class="line">Paint.setStrokeWidth(<span class="keyword">float</span> width) 设置线条宽度</div><div class="line">Paint.setTextSize(<span class="keyword">float</span> textSize) 设置文字大小</div><div class="line">Paint.setAntiAlias(<span class="keyword">boolean</span> aa) 设置抗锯齿开关</div></pre></td></tr></table></figure></p><h3 id="设置Shader"><a href="#设置Shader" class="headerlink" title="设置Shader"></a>设置Shader</h3><p>Android 的绘制里使用 Shader ，并不直接用 Shader 这个类，而是用它的几个子类。具体来讲有  LinearGradient RadialGradient SweepGradient BitmapShader ComposeShader 这么几个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//渐变模式</span></div><div class="line">Shader shader = <span class="keyword">new</span> LinearGradient(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">500</span>, Color.parseColor(<span class="string">"#E91E63"</span>),  </div><div class="line">        Color.parseColor(<span class="string">"#2196F3"</span>), Shader.TileMode.CLAMP);</div><div class="line">paint.setShader(shader);</div><div class="line"><span class="comment">//辐射模式</span></div><div class="line">Shader shader = <span class="keyword">new</span> RadialGradient(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, Color.parseColor(<span class="string">"#E91E63"</span>),  </div><div class="line">        Color.parseColor(<span class="string">"#2196F3"</span>), Shader.TileMode.CLAMP);</div><div class="line">paint.setShader(shader);</div><div class="line">...</div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);  </div><div class="line">centerX centerY：辐射中心的坐标 </div><div class="line">radius：辐射半径 </div><div class="line">centerColor：辐射中心的颜色 </div><div class="line">edgeColor：辐射边缘的颜色 </div><div class="line">tileMode：辐射范围之外的着色模式。</div><div class="line"><span class="comment">//SweepGradient 扫描模式</span></div><div class="line">Shader shader = <span class="keyword">new</span> SweepGradient(<span class="number">300</span>, <span class="number">300</span>, Color.parseColor(<span class="string">"#E91E63"</span>),  </div><div class="line">        Color.parseColor(<span class="string">"#2196F3"</span>));</div><div class="line">paint.setShader(shader);</div><div class="line">...</div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);  </div><div class="line">cx cy ：扫描的中心 </div><div class="line">color0：扫描的起始颜色 </div><div class="line">color1：扫描的终止颜色</div></pre></td></tr></table></figure></p><h3 id="ColorFilter"><a href="#ColorFilter" class="headerlink" title="ColorFilter"></a>ColorFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ColorFilter lightingColorFilter = <span class="keyword">new</span> LightingColorFilter(<span class="number">0xffffff</span>, <span class="number">0x003000</span>);  </div><div class="line">paint.setColorFilter(lightingColorFilter);</div></pre></td></tr></table></figure><h3 id="setStrokeWidth-float-width"><a href="#setStrokeWidth-float-width" class="headerlink" title="setStrokeWidth(float width)"></a>setStrokeWidth(float width)</h3><p>设置线条的宽度 单位像素 默认是0</p><h3 id="setStrokeCap-Paint-Cap-cap"><a href="#setStrokeCap-Paint-Cap-cap" class="headerlink" title="setStrokeCap(Paint.Cap cap)"></a>setStrokeCap(Paint.Cap cap)</h3><p>设置线头的形状。线头形状有三种：BUTT 平头、ROUND 圆头、SQUARE 方头。默认为 BUTT。</p><h3 id="setStrokeJoin-Paint-Join-join"><a href="#setStrokeJoin-Paint-Join-join" class="headerlink" title="setStrokeJoin(Paint.Join join)"></a>setStrokeJoin(Paint.Join join)</h3><p>设置拐角的形状。有三个值可以选择：MITER 尖角、 BEVEL 平角和 ROUND 圆角。默认为 MITER。</p><h3 id="setPathEffect-PathEffect-effect"><a href="#setPathEffect-PathEffect-effect" class="headerlink" title="setPathEffect(PathEffect effect)"></a>setPathEffect(PathEffect effect)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PathEffect pathEffect = <span class="keyword">new</span> DashPathEffect(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">10</span>, <span class="number">5</span>&#125;, <span class="number">10</span>);  </div><div class="line">paint.setPathEffect(pathEffect);</div><div class="line">...</div><div class="line">canvas.drawCircle(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, paint);</div></pre></td></tr></table></figure><ol><li><p>CornerPathEffect<br>把所有拐角变成圆角。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PathEffect pathEffect = <span class="keyword">new</span> CornerPathEffect(<span class="number">20</span>);  </div><div class="line">paint.setPathEffect(pathEffect);</div><div class="line">...</div><div class="line">canvas.drawPath(path, paint);</div></pre></td></tr></table></figure></li><li><p>DiscretePathEffect<br>把线条进行随机的偏离，让轮廓变得乱七八糟。乱七八糟的方式和程度由参数决定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PathEffect pathEffect = <span class="keyword">new</span> DiscretePathEffect(<span class="number">20</span>, <span class="number">5</span>);  </div><div class="line">paint.setPathEffect(pathEffect);</div><div class="line">...</div><div class="line">canvas.drawPath(path, paint);</div></pre></td></tr></table></figure></li><li><p>DashPathEffect<br>使用虚线来绘制线条。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PathEffect pathEffect = <span class="keyword">new</span> DashPathEffect(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">10</span>&#125;, <span class="number">0</span>);  </div><div class="line">paint.setPathEffect(pathEffect);</div><div class="line">...</div><div class="line">canvas.drawPath(path, paint);</div></pre></td></tr></table></figure></li></ol><h3 id="setShadowLayer"><a href="#setShadowLayer" class="headerlink" title="setShadowLayer"></a>setShadowLayer</h3><p>setShadowLayer(float radius, float dx, float dy, int shadowColor)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setShadowLayer(<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, Color.RED);</div><div class="line">canvas.drawText(text, <span class="number">80</span>, <span class="number">300</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h3><p>重置 Paint 的所有属性为默认值。相当于重新 new 一个，不过性能当然高一些啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;绘制出来的颜色,具体效果则由Paint确定。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android -多线程</title>
    <link href="http://yoursite.com/2019/10/01/Android-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/10/01/Android-多线程/</id>
    <published>2019-09-30T18:06:12.000Z</published>
    <updated>2020-01-01T09:26:57.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>线程池</strong><br>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）,则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</p><a id="more"></a><p>在执行一个异步任务或并发任务时，往往是通过直接new Thread()方法来创建新的线程，这样做弊端较多，更好的解决方案是合理地利用线程池，线程池的优势很明显</p><ol><li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</li><li>提高系统响应速度，当有任务到达时，无需等待新线程的创建便能立即执行；</li><li>方便线程并发数的管控，线程若是无限制的创建，不仅会额外消耗大量系统资源，更是占用过多资源而阻塞系统或oom等状况，从而降低系统的稳定性。线程池能有效管控线程，统一分配、调优，提供资源使用率；</li><li>更强大的功能，线程池提供了定时、定期以及可控线程数等功能的线程池，使用方便简单<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3>Executors类提供了4种不同的线程池：newCachedThreadPool, newFixedThreadPool, newScheduledThreadPool, newSingleThreadExecutor</li><li><p>newCachedThreadPool</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cachedThreadPoolDemo</span><span class="params">()</span></span>&#123;</div><div class="line">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line">        cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">", index="</span>+index);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//运行结果</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">0</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">1</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">2</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">3</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">4</span></div></pre></td></tr></table></figure></li><li><p>newFixedThreadPool<br>创建一个固定大小的线程池，该方法可指定线程池的固定大小，对于超出的线程会在LinkedBlockingQueue队列中等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixedThreadPoolDemo</span><span class="params">()</span></span>&#123;</div><div class="line">    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line">        fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">", index="</span>+index);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 运行结果</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">0</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>, index=<span class="number">1</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>, index=<span class="number">2</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">3</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>, index=<span class="number">4</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>, index=<span class="number">5</span></div></pre></td></tr></table></figure></li><li><p>newSingleThreadExecutor<br>创建一个只有线程的线程池，该方法无参数，所有任务都保存队列LinkedBlockingQueue中，等待唯一的单线程来执行任务，并保证所有任务按照指定顺序(FIFO或优先级)执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singleThreadExecutorDemo</span><span class="params">()</span></span>&#123;</div><div class="line">    ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</div><div class="line">        singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">", index="</span>+index);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 运行结果</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">0</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">1</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, index=<span class="number">2</span></div></pre></td></tr></table></figure></li><li><p>newScheduledThreadPool<br>创建一个可定时执行或周期执行任务的线程池，该方法可指定线程池的核心线程个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledThreadPoolDemo</span><span class="params">()</span></span>&#123;</div><div class="line">    ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">3</span>);</div><div class="line">    <span class="comment">//定时执行一次的任务，延迟1s后执行</span></div><div class="line">    scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">", delay 1s"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">    <span class="comment">//周期性地执行任务，延迟2s后，每3s一次地周期性执行任务</span></div><div class="line">    scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">", every 3s"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="number">2</span>, <span class="number">3</span>, TimeUnit.SECONDS);</div><div class="line">&#125;</div><div class="line"><span class="comment">//运行结果</span></div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, delay <span class="number">1</span>s</div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>, every <span class="number">3</span>s</div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>, every <span class="number">3</span>s</div><div class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>, every <span class="number">3</span>s</div></pre></td></tr></table></figure></li></ol><ul><li>schedule(Runnable command, long delay, TimeUnit unit)，延迟一定时间后执行Runnable任务；</li><li>schedule(Callable callable, long delay, TimeUnit unit)，延迟一定时间后执行Callable任务；</li><li>scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)，延迟一定时间后，以间隔period时间的频率周期性地执行任务；</li><li>scheduleWithFixedDelay(Runnable command, long initialDelay, long delay,TimeUnit unit)，与scheduleAtFixedRate()方法很类似，但是不同的是scheduleWithFixedDelay()方法的周期时间间隔是以上一个任务执行结束到下一个任务开始执行的间隔，而scheduleAtFixedRate()方法的周期时间间隔是以上一个任务开始执行到下一个任务开始执行的间隔，也就是这一些任务系列的触发时间都是可预知的。<h3 id="四种方法的参数对比"><a href="#四种方法的参数对比" class="headerlink" title="四种方法的参数对比"></a>四种方法的参数对比</h3><img src="Android%20-%E5%A4%9A%E7%BA%BF%E7%A8%8B/A2ADA4B6-F495-4E8A-8850-65B1FE3749B1.png" alt=""><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3></li><li>ThreadPoolExecutor<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">         Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>创建线程池，在构造一个新的线程池时，必须满足下面的条件：</p><ol><li>corePoolSize（线程池基本大小）必须大于或等于0；</li><li>maximumPoolSize（线程池最大大小）必须大于或等于1；</li><li>maximumPoolSize必须大于或等于corePoolSize；</li><li>keepAliveTime（线程存活保持时间）必须大于或等于0；</li><li>workQueue（任务队列）不能为空；</li><li>threadFactory（线程工厂）不能为空，默认为DefaultThreadFactory类</li><li>handler（线程饱和策略）不能为空，默认策略为ThreadPoolExecutor.AbortPolicy。</li></ol><ul><li>参数详解<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</div><div class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</div><div class="line">        maximumPoolSize &lt; corePoolSize ||</div><div class="line">        keepAliveTime &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</div><div class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</div><div class="line">    <span class="keyword">this</span>.workQueue = workQueue;</div><div class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</div><div class="line">    <span class="keyword">this</span>.handler = handler;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>参数说明</p><ol><li><p>corePoolSize（线程池基本大小）：当向线程池提交一个任务时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize时，才会根据是否存在空闲线程，来决定是否需要创建新的线程。除了利用提交新任务来创建和启动线程（按需构造），也可以通过 prestartCoreThread() 或 prestartAllCoreThreads() 方法来提前启动线程池中的基本线程。</p></li><li><p>maximumPoolSize（线程池最大大小）：线程池所允许的最大线程个数。当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽略该参数。</p></li><li><p>keepAliveTime（线程存活保持时间）：默认情况下，当线程池的线程个数多于corePoolSize时，线程的空闲时间超过keepAliveTime则会终止。但只要keepAliveTime大于0，allowCoreThreadTimeOut(boolean) 方法也可将此超时策略应用于核心线程。另外，也可以使用setKeepAliveTime()动态地更改参数。</p></li><li><p>unit（存活时间的单位）：时间单位，分为7类，从细到粗顺序：NANOSECONDS（纳秒），MICROSECONDS（微妙），MILLISECONDS（毫秒），SECONDS（秒），MINUTES（分），HOURS（小时），DAYS（天）；</p></li><li><p>workQueue（任务队列）：用于传输和保存等待执行任务的阻塞队列。可以使用此队列与线程池进行交互：<br>如果运行的线程数少于 corePoolSize，则 Executor 始终首选添加新的线程，而不进行排队。<br>如果运行的线程数等于或多于 corePoolSize，则 Executor 始终首选将请求加入队列，而不添加新的线程。<br>如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。</p></li><li><p>threadFactory（线程工厂）：用于创建新线程。由同一个threadFactory创建的线程，属于同一个ThreadGroup，创建的线程优先级都为Thread.NORM_PRIORITY，以及是非守护进程状态。threadFactory创建的线程也是采用new Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池内的线程编号）;</p></li><li><p>handler（线程饱和策略）：当线程池和队列都满了，则表明该线程池已达饱和状态。<br>ThreadPoolExecutor.AbortPolicy：处理程序遭到拒绝，则直接抛出运行时异常 RejectedExecutionException。(默认策略)<br>ThreadPoolExecutor.CallerRunsPolicy：调用者所在线程来运行该任务，此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。<br>ThreadPoolExecutor.DiscardPolicy：无法执行的任务将被删除。<br>ThreadPoolExecutor.DiscardOldestPolicy：如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重新尝试执行任务（如果再次失败，则重复此过程）。</p></li></ol><ul><li>排队有三种通用策略</li></ul><ol><li><p>直接提交。工作队列的默认选项是 SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p></li><li><p>无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p></li><li><p>有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如 ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;线程池&lt;/strong&gt;&lt;br&gt;线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）,则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-图片加载库Glide</title>
    <link href="http://yoursite.com/2019/09/11/Android-%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%BA%93Glide/"/>
    <id>http://yoursite.com/2019/09/11/Android-图片加载库Glide/</id>
    <published>2019-09-11T15:11:43.000Z</published>
    <updated>2020-01-01T10:03:30.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Glide-基本用法"><a href="#Glide-基本用法" class="headerlink" title="Glide 基本用法"></a>Glide 基本用法</h3><ol><li>添加依赖<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.github.bumptech.glide:glide:3.7.0'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//implementation 'com.github.bumptech.glide:glide:4.4.0'</span></div><div class="line"><span class="comment">//这个版本的需要SDK version 27.0.2</span></div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</div></pre></td></tr></table></figure></li></ol><a id="more"></a><ol><li><p>在代码中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>).load(url).into(imageView);</div></pre></td></tr></table></figure></li><li><p>加载其他的图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载本地图片</span></div><div class="line">File file = <span class="keyword">new</span> File(getExternalCacheDir() + <span class="string">"/image.jpg"</span>);</div><div class="line">Glide.with(<span class="keyword">this</span>).load(file).into(imageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载应用资源</span></div><div class="line"><span class="keyword">int</span> resource = R.drawable.image;</div><div class="line">Glide.with(<span class="keyword">this</span>).load(resource).into(imageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载二进制流</span></div><div class="line"><span class="keyword">byte</span>[] image = getImageBytes();</div><div class="line">Glide.with(<span class="keyword">this</span>).load(image).into(imageView);</div><div class="line"></div><div class="line"><span class="comment">// 加载Uri对象</span></div><div class="line">Uri imageUri = getImageUri();</div><div class="line">Glide.with(<span class="keyword">this</span>).load(imageUri).into(imageView);</div></pre></td></tr></table></figure></li><li><p>占位图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>)</div><div class="line">     .load(url)</div><div class="line">     .placeholder(R.drawable.loading)</div><div class="line">     .into(imageView);</div></pre></td></tr></table></figure></li><li><p>缓存策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>)</div><div class="line">     .load(url)</div><div class="line">     .placeholder(R.drawable.loading)</div><div class="line">     .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">     .into(imageView);</div></pre></td></tr></table></figure></li><li><p>错误图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>)</div><div class="line">     .load(url)</div><div class="line">     .placeholder(R.drawable.loading)</div><div class="line">     .error(R.drawable.error)</div><div class="line">     .diskCacheStrategy(DiskCacheStrategy.NONE)</div><div class="line">     .into(imageView);</div></pre></td></tr></table></figure></li><li><p>加载圆 Transformer</p><blockquote><p>要在 ImageView 中去设置 scaleType 为 centerCrop。但是，当你同时给图片设置圆角类 Transformer 时，即在 Glide 加载图片时给 .transform() 配置了一个圆角矩形，如果同时 ImageView 的 scaleType 设置了 centerCrop，那圆角就没有了。  </p></blockquote></li></ol><ul><li>解决办法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   ...</div><div class="line"> .transform(<span class="keyword">new</span> CenterCrop(getContext())</div><div class="line">          ,<span class="keyword">new</span> GlideRoundTransform(getContext(), <span class="number">25</span>))</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideRoundTransform</span> <span class="keyword">extends</span> <span class="title">BitmapTransformation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> radius = <span class="number">0f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlideRoundTransform</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlideRoundTransform</span><span class="params">(Context context, <span class="keyword">int</span> dp)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        <span class="keyword">this</span>.radius = Resources.getSystem().getDisplayMetrics().density * dp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">transform</span><span class="params">(BitmapPool pool, Bitmap toTransform, <span class="keyword">int</span> outWidth, <span class="keyword">int</span> outHeight)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> roundCrop(pool, toTransform);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">roundCrop</span><span class="params">(BitmapPool pool, Bitmap source)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">            result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(result);</div><div class="line">        Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">        paint.setShader(<span class="keyword">new</span> BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</div><div class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        RectF rectF = <span class="keyword">new</span> RectF(<span class="number">0f</span>, <span class="number">0f</span>, source.getWidth(), source.getHeight());</div><div class="line">        canvas.drawRoundRect(rectF, radius, radius, paint);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getClass().getName() + Math.round(radius);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ol><li>缓存<blockquote><p>缓存参数说明  </p></blockquote></li></ol><ul><li>DiskCacheStrategy.NONE：不缓存任何图片，即禁用磁盘缓存</li><li>DiskCacheStrategy.ALL ：缓存原始图片 &amp; 转换后的图片（默认)</li><li>DiskCacheStrategy.SOURCE：只缓存原始图片（原来的全分辨率的图像，即不缓存转换后的图片）</li><li>DiskCacheStrategy.RESULT：只缓存转换后的图片（即最终的图像：降低分辨率后 / 或者转换后 ，不缓存原始图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(<span class="keyword">this</span>).load(imageUrl).diskCacheStrategy(DiskCacheStrategy.ALL).into(imageView);</div></pre></td></tr></table></figure><ol><li><p>加载圆角</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Glide.with(context).load(url).apply(RequestOptions.circleCropTransform()).into(imageView);</div><div class="line"></div><div class="line"> Glide.with(<span class="keyword">this</span>).load(url).bitmapTransform(<span class="keyword">new</span> RoundedCornersTransformation(<span class="keyword">this</span>, <span class="number">30</span>, <span class="number">0</span>, RoundedCornersTransformation.CornerType.BOTTOM)).crossFade(<span class="number">1000</span>).into(image5);</div></pre></td></tr></table></figure></li><li><p>高斯模糊</p><blockquote><p>需要引入  <a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="external">高斯模糊库</a>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Glide.with(MusicPlayerActivity.<span class="keyword">this</span>)</div><div class="line">                    .load(service.getImageUri())</div><div class="line">                    .dontAnimate()</div><div class="line">                    .error(R.drawable.no_music_rotate_img)</div><div class="line">                    <span class="comment">// 设置高斯模糊</span></div><div class="line"><span class="comment">// “14”：设置模糊度(在0.0到25.0之间)，默认”25";"3":图片缩放比例,默认“1”。</span></div><div class="line">                    .bitmapTransform(<span class="keyword">new</span> BlurTransformation(<span class="keyword">this</span>, <span class="number">14</span>, <span class="number">3</span>))</div><div class="line">                    .into(allBg);</div></pre></td></tr></table></figure></blockquote></li></ol><h3 id="使用Glide的Tips"><a href="#使用Glide的Tips" class="headerlink" title="使用Glide的Tips"></a>使用Glide的Tips</h3><ol><li>列表预加载<br>如果你想让列表预加载的话，不妨试一下ListPreloader这个类。</li><li><p>列表滑动时取消请求<br>当列表在滑动的时候，调用 pauseRequests() 取消请求，滑动停止时，调用 resumeRequests() 恢复请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Glide.with(context).resumeRequests() </div><div class="line">Glide.with(context).pauseRequests()</div></pre></td></tr></table></figure></li><li><p>清除所有加载请求<br>当你想清除掉所有的图片加载请求时，可以使用 Glide.clear() 这个方法。</p></li><li>Glide特效转换库<br>glide-transformations 一个基于Glide的transformation库，拥有裁剪，着色，模糊，滤镜等多种转换效果。</li><li>Palette 库<br>GlidePalette 一个在Glide加载时很方便使用Palette的库。<a href="https://github.com/florent37/GlidePalette" target="_blank" rel="external">GitHub - florent37/GlidePalette: Android Lollipop Palette is now easy to use with Glide</a></li><li>不要再非主线程里面使用 Glide 加载图片，如果真的使用了，请把 context 参数换成 getApplicationContext。</li><li>Glide图片和默认图交替过程中,默认图闪烁一下<br>解决方法：<br>去掉动画：dontAnimate()</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Glide-基本用法&quot;&gt;&lt;a href=&quot;#Glide-基本用法&quot; class=&quot;headerlink&quot; title=&quot;Glide 基本用法&quot;&gt;&lt;/a&gt;Glide 基本用法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;添加依赖&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    compile &lt;span class=&quot;string&quot;&gt;&#39;com.github.bumptech.glide:glide:3.7.0&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//implementation &#39;com.github.bumptech.glide:glide:4.4.0&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//这个版本的需要SDK version 27.0.2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;uses-permission android:name=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-CustomView onMeasure</title>
    <link href="http://yoursite.com/2019/07/23/Android-CustomView-onMeasure/"/>
    <id>http://yoursite.com/2019/07/23/Android-CustomView-onMeasure/</id>
    <published>2019-07-23T15:08:45.000Z</published>
    <updated>2020-01-01T10:13:59.027Z</updated>
    
    <content type="html"><![CDATA[<h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span></span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="MeasureSpec"><a href="#MeasureSpec" class="headerlink" title="MeasureSpec"></a>MeasureSpec</h3><p>虽然表面上看起来他们是int类型的数字，其实他们是由mode+size两部分组成的。<br>widthMeasureSpec和heightMeasureSpec转化成二进制数字表示，他们都是32位的。前两位代表mode(测量模式)，后面30位才是他们的实际数值（size）。<br>MeasureSpec的值由specSize和specMode共同组成的，其中specSize记录的是大小，specMode记录的是规格。</p><ul><li>模式分类<br>它有三种模式： </li></ul><ol><li>UNSPECIFIED(未指定)，父元素部队自元素施加任何束缚，子元素可以得到任意想要的大小；<br>表示父视图希望子视图的大小应该是由specSize的值来决定的，系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。</li><li>EXACTLY(完全)，父元素决定自元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小； </li><li>AT_MOST(至多)，子元素至多达到指定大小的值。<br>他们对应的二进制值分别是：<br>UNSPECIFIED=00000000000000000000000000000000<br>EXACTLY = 01000000000000000000000000000000<br>AT_MOST =10000000000000000000000000000000<br>由于最前面两位代表模式，所以他们分别对应十进制的0，1，2； </li></ol><ul><li>模式提取<br>现在我们知道了widthMeasureSpec和heightMeasureSpec是由模式和数值组成的，而且二进制的前两位代表模式，后28位代表数字。<br>我们先想想，如果我们自己来提取widthMeasureSpec和heightMeasureSpec中的模式和数值是怎么提取呢？<br>首先想到的肯定是通过MASK和与运算去掉不需要的部分而得到对应的模式或数值。<br>说到这大家可能会迷茫，我们写段代码来提取模式部分吧：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对应11000000000000000000000000000000;总共32位，前两位是1  </span></div><div class="line"><span class="keyword">int</span> MODE_MASK  = <span class="number">0xc0000000</span>;   </div><div class="line"><span class="comment">//提取模式  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> (measureSpec &amp; MODE_MASK);  </div><div class="line">&#125;  </div><div class="line"><span class="comment">//提取数值  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK);</div></pre></td></tr></table></figure></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>测量View大小使用的是onMeasure函数，我们可以从onMeasure的两个参数中取出宽高的相关数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> widthsize  MeasureSpec.getSize(widthMeasureSpec);      <span class="comment">//取出宽度的确切数值</span></div><div class="line">    <span class="keyword">int</span> widthmode  MeasureSpec.getMode(widthMeasureSpec);      <span class="comment">//取出宽度的测量模式</span></div><div class="line">    </div><div class="line">    <span class="keyword">int</span> heightsize  MeasureSpec.getSize(heightMeasureSpec);    <span class="comment">//取出高度的确切数值</span></div><div class="line">    <span class="keyword">int</span> heightmode  MeasureSpec.getMode(heightMeasureSpec);    <span class="comment">//取出高度的测量模式</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="测量模式"><a href="#测量模式" class="headerlink" title="测量模式"></a>测量模式</h3><p>一共有三种， 被定义在 Android 中的 View 类的一个内部类View.MeasureSpec中：<br>模式          二进制数值        描述<br>UNSPECIFIED    00    默认值，父控件没有给子view任何限制，子View可以设置为任意大小。<br>EXACTLY    01    表示父控件已经确切的指定了子View的大小。<br>AT_MOST    10    表示子View具体大小没有尺寸限制，但是存在上限，上限一般为父View大小。<br>wrap_content-&gt; MeasureSpec.AT_MOST<br>match_parent -&gt; MeasureSpec.EXACTLY<br>具体值 -&gt; MeasureSpec.EXACTLY</p><h3 id="确定View的大小"><a href="#确定View的大小" class="headerlink" title="确定View的大小"></a>确定View的大小</h3><p>确定View大小(onSizeChanged)<br>这个函数在视图大小发生改变时调用。<br>Q: 在测量完View并使用setMeasuredDimension函数之后View的大小基本上已经确定了，那么为什么还要再次确定View的大小呢？<br>A: 这是因为View的大小不仅由View本身控制，而且受父控件的影响，所以我们在确定View大小的时候最好使用系统提供的onSizeChanged回调函数。<br>onSizeChanged如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出，它又四个参数，分别为 宽度，高度，上一次宽度，上一次高度。<br>这个函数比较简单，我们只需关注 宽度(w), 高度(h) 即可，这两个参数就是View最终的大小。</p><h3 id="调用父类的onMeasure"><a href="#调用父类的onMeasure" class="headerlink" title="调用父类的onMeasure()"></a>调用父类的onMeasure()</h3><p>首先定义一个类继承View，重写onMeasure()，并调用父类onMeasure()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureExampleView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeasureExampleView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeasureExampleView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>重写onMeasure()，并调用父类onMeasure()时</p><ul><li>MeasureExampleView的layout_width以及layout_height属性值 match_parent 或者 wrap_content显示大小由其父容器控件决定。</li><li>MeasureExampleView设置为固定的值，就显示该设定的值<h3 id="怎么样重写onMesure"><a href="#怎么样重写onMesure" class="headerlink" title="怎么样重写onMesure"></a>怎么样重写onMesure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//widthMeasureSpec 和 heightMeasureSpec的值 由父容器决定</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> width  = measureDimension(DEFAULT_WIDTH, widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> height = measureDimension(DEFAULT_HEIGHT, heightMeasureSpec);</div><div class="line">    setMeasuredDimension(width, height);</div><div class="line">&#125;</div><div class="line">MeasureSpec.getSize()会解析MeasureSpec值得到父容器width或者height。</div><div class="line"></div><div class="line">MeasureSpec.getMode()会得到三个<span class="keyword">int</span>类型的值分别为:MeasureSpec.EXACTLY MeasureSpec.AT_MOST,MeasureSpec.UNSPECIFIED。</div><div class="line"></div><div class="line">MeasureSpec.UNSPECIFIED 未指定，所以可以设置任意大小。</div></pre></td></tr></table></figure></li></ul><ol><li>MeasureSpec.getSize()会解析MeasureSpec值得到父容器width或者height。</li><li>MeasureSpec.getMode()会得到三个int类型的值分别为:MeasureSpec.EXACTLY MeasureSpec.AT_MOST,MeasureSpec.UNSPECIFIED。<br>MeasureSpec.UNSPECIFIED 未指定，所以可以设置任意大小。<br>MeasureSpec.AT_MOST  MeasureExampleView可以为任意大小，但是有一个上限。比如这种情况<h3 id="重写onMeasure-函数"><a href="#重写onMeasure-函数" class="headerlink" title="重写onMeasure()函数"></a>重写onMeasure()函数</h3>我们前面讲过，onMeasure()的作用就是根据container内部的子控件计算自己的宽和高，最后通过setMeasuredDimension（int width,int height设置进去）；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;onMeasure&quot;&gt;&lt;a href=&quot;#onMeasure&quot; class=&quot;headerlink&quot; title=&quot;onMeasure&quot;&gt;&lt;/a&gt;onMeasure&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onMeasure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; widthMeasureSpec, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; heightMeasureSpec)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-CustomView  Canvas</title>
    <link href="http://yoursite.com/2019/06/12/Android-CustomView-Canvas/"/>
    <id>http://yoursite.com/2019/06/12/Android-CustomView-Canvas/</id>
    <published>2019-06-12T05:28:59.000Z</published>
    <updated>2020-01-01T09:59:05.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>Canvas我们可以称之为画布，能够在上面绘制各种东西，是安卓平台2D图形绘制的基础，非常强大。</p><a id="more"></a><ol><li><p>绘制颜色    drawColor, drawRGB, drawARGB    使用单一颜色填充整个画布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.BLUE); <span class="comment">//绘制蓝色</span></div></pre></td></tr></table></figure></li><li><p>绘制基本形状    drawPoint, drawPoints, drawLine, drawLines, drawRect, drawRoundRect, drawOval, drawCircle, drawArc    依次为 点、线、矩形、圆角矩形、椭圆、圆、圆弧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">canvas.drawPoint(<span class="number">200</span>, <span class="number">200</span>, mPaint);     <span class="comment">//在坐标(200,200)位置绘制一个点</span></div><div class="line">canvas.drawPoints(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;          <span class="comment">//绘制一组点，坐标位置由float数组指定</span></div><div class="line">      <span class="number">500</span>,<span class="number">500</span>,</div><div class="line">      <span class="number">500</span>,<span class="number">600</span>,</div><div class="line">      <span class="number">500</span>,<span class="number">700</span></div><div class="line">&#125;,mPaint);</div><div class="line"></div><div class="line">canvas.drawLine(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">600</span>,mPaint);    <span class="comment">// 在坐标(300,300)(500,600)之间绘制一条直线</span></div><div class="line">canvas.drawLines(<span class="keyword">new</span> <span class="keyword">float</span>[]&#123;               <span class="comment">// 绘制一组线 每四数字(两个点的坐标)确定一条线</span></div><div class="line">    <span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">200</span>,</div><div class="line">    <span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">300</span></div><div class="line">&#125;,mPaint);</div><div class="line"><span class="comment">// 第一种</span></div><div class="line">canvas.drawRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>,mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line">Rect rect = <span class="keyword">new</span> Rect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>);</div><div class="line">canvas.drawRect(rect,mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 第三种</span></div><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>);</div><div class="line">canvas.drawRect(rectF,mPaint);</div><div class="line"><span class="comment">// 第一种</span></div><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>);</div><div class="line">canvas.drawRoundRect(rectF,<span class="number">30</span>,<span class="number">30</span>,mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line">canvas.drawRoundRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>,<span class="number">30</span>,<span class="number">30</span>,mPaint);</div><div class="line"><span class="comment">// 矩形</span></div><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>);  </div><div class="line"></div><div class="line"><span class="comment">// 绘制背景矩形</span></div><div class="line">mPaint.setColor(Color.GRAY);</div><div class="line">canvas.drawRect(rectF,mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 绘制圆角矩形</span></div><div class="line">mPaint.setColor(Color.BLUE);</div><div class="line">canvas.drawRoundRect(rectF,<span class="number">700</span>,<span class="number">400</span>,mPaint);</div><div class="line"><span class="comment">// 第一种</span></div><div class="line">RectF rectF = <span class="keyword">new</span> RectF(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>);</div><div class="line">canvas.drawOval(rectF,mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line">canvas.drawOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">800</span>,<span class="number">400</span>,mPaint);</div><div class="line">canvas.drawCircle(<span class="number">500</span>,<span class="number">500</span>,<span class="number">400</span>,mPaint);  <span class="comment">// 绘制一个圆心坐标在(500,500)，半径为400 的圆。</span></div><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="comment">//userCenter 是否使用中心</span></div><div class="line"><span class="comment">//false  画过的是弧区</span></div><div class="line"><span class="comment">//true  画过的是带圆心的半圆弧</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawArc</span><span class="params">(@NonNull RectF oval, <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle, <span class="keyword">boolean</span> useCenter, @NonNull Paint paint)</span></span>&#123;&#125;</div><div class="line">    </div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawArc</span><span class="params">(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom, <span class="keyword">float</span> startAngle,</span></span></div><div class="line">            <span class="keyword">float</span> sweepAngle, <span class="keyword">boolean</span> useCenter, @NonNull Paint paint) &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>绘制图片    drawBitmap, drawPicture    绘制位图和图片</p></li><li>绘制文本    drawText, drawPosText, drawTextOnPath    依次为 绘制文字、绘制文字时指定每个文字位置、根据路径绘制文字</li><li>绘制路径    drawPath    绘制路径，绘制贝塞尔曲线时也需要用到该函数<br>顶点操作    drawVertices, drawBitmapMesh    通过对顶点操作可以使图像形变，drawVertices直接对画布作用、 drawBitmapMesh只对绘制的Bitmap作用</li><li>画布剪裁    clipPath, clipRect    设置画布的显示区域</li><li>画布快照    save, restore, saveLayerXxx, restoreToCount, getSaveCount    依次为 保存当前状态、 回滚到上一次保存的状态、 保存图层状态、 回滚到指定状态、 获取保存次数</li><li>画布变换    translate, scale, rotate, skew    依次为 位移、缩放、 旋转、错切<br>Matrix(矩阵)    getMatrix, setMatrix, concat    实际上画布的位移，缩放等操作的都是图像矩阵Matrix， 只不过Matrix比较难以理解和使用，故封装了一些常用的方法。<h3 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h3>要想绘制内容，首先需要先创建一个画笔，如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.创建一个画笔</span></div><div class="line"><span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint();</div><div class="line"></div><div class="line"><span class="comment">// 2.初始化画笔</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPaint</span><span class="params">()</span> </span>&#123;</div><div class="line">mPaint.setColor(Color.BLACK);       <span class="comment">//设置画笔颜色</span></div><div class="line">mPaint.setStyle(Paint.Style.FILL);  <span class="comment">//设置画笔模式为填充</span></div><div class="line">mPaint.setStrokeWidth(<span class="number">10f</span>);         <span class="comment">//设置画笔宽度为10px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3.在构造函数中初始化</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SloopView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>(context, attrs);</div><div class="line">   initPaint();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><ol><li><p>位移(translate)<br>translate是坐标系的移动，可以为图形绘制选择一个合适的坐标系。 请注意，位移是基于当前位置移动，而不是每次基于屏幕左上角的(0,0)点移动，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mPaint.setColor(Color.BLACK);</div><div class="line">canvas.translate(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">canvas.drawCircle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,mPaint);</div><div class="line"></div><div class="line"><span class="comment">// 在坐标原点绘制一个蓝色圆形</span></div><div class="line">mPaint.setColor(Color.BLUE);</div><div class="line">canvas.translate(<span class="number">200</span>,<span class="number">200</span>); </div><div class="line">canvas.drawCircle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,mPaint);</div></pre></td></tr></table></figure></li><li><p>缩放(scale)<br>缩放提供了两个方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scale</span> <span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy)</span></span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scale</span> <span class="params">(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy, <span class="keyword">float</span> px, <span class="keyword">float</span> py)</span></div><div class="line"><span class="comment">// 将坐标系原点移动到画布正中心</span></div><div class="line">canvas.<span class="title">translate</span><span class="params">(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>)</span>;</div><div class="line"></div><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">0</span>,-<span class="number">400</span>,<span class="number">400</span>,<span class="number">0</span>);   <span class="comment">// 矩形区域</span></div><div class="line"></div><div class="line">mPaint.setColor(Color.BLACK);           <span class="comment">// 绘制黑色矩形</span></div><div class="line">canvas.drawRect(rect,mPaint);</div><div class="line"></div><div class="line">canvas.scale(<span class="number">0.5f</span>,<span class="number">0.5f</span>);                <span class="comment">// 画布缩放</span></div><div class="line"></div><div class="line">mPaint.setColor(Color.BLUE);            <span class="comment">// 绘制蓝色矩形</span></div><div class="line">canvas.drawRect(rect,mPaint);</div></pre></td></tr></table></figure></li><li><p>旋转(rotate)<br>旋转提供了两种方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span> <span class="params">(<span class="keyword">float</span> degrees)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">rotate</span> <span class="params">(<span class="keyword">float</span> degrees, <span class="keyword">float</span> px, <span class="keyword">float</span> py)</span></div><div class="line">和缩放一样，第二种方法多出来的两个参数依旧是控制旋转中心点的。</div></pre></td></tr></table></figure></li></ol><p>默认的旋转中心依旧是坐标原点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将坐标系原点移动到画布正中心</span></div><div class="line">canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</div><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">0</span>,-<span class="number">400</span>,<span class="number">400</span>,<span class="number">0</span>);   <span class="comment">// 矩形区域</span></div><div class="line">mPaint.setColor(Color.BLACK);           <span class="comment">// 绘制黑色矩形</span></div><div class="line">canvas.drawRect(rect,mPaint);</div><div class="line">canvas.rotate(<span class="number">180</span>);                     <span class="comment">// 旋转180度 &lt;-- 默认旋转中心为原点</span></div><div class="line">mPaint.setColor(Color.BLUE);            <span class="comment">// 绘制蓝色矩形</span></div><div class="line">canvas.drawRect(rect,mPaint);</div></pre></td></tr></table></figure></p><h3 id="drawBitmap"><a href="#drawBitmap" class="headerlink" title="drawBitmap"></a>drawBitmap</h3><p>通过BitmapFactory从不同位置获取Bitmap:<br>资源文件(drawable/mipmap/raw):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(mContext.getResources(),R.raw.bitmap);</div></pre></td></tr></table></figure></p><p>资源文件(assets):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap=<span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    InputStream is = mContext.getAssets().open(<span class="string">"bitmap.png"</span>);</div><div class="line">    bitmap = BitmapFactory.decodeStream(is);</div><div class="line">    is.close();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>内存卡文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeFile(<span class="string">"/sdcard/bitmap.png"</span>);</div></pre></td></tr></table></figure></p><p>网络文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此处省略了获取网络输入流的代码</span></div><div class="line">Bitmap bitmap = BitmapFactory.decodeStream(is);</div><div class="line">is.close();</div></pre></td></tr></table></figure></p><p>既然已经获得到了Bitmap，那么就开始本文的重点了，将Bitmap绘制到画布上。<br>绘制Bitmap：<br>依照惯例先预览一下drawBitmap的常用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一种</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, Matrix matrix, Paint paint)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 第二种</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, <span class="keyword">float</span> left, <span class="keyword">float</span> top, Paint paint)</span></div><div class="line"></div><div class="line"><span class="comment">// 第三种</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, Rect src, Rect dst, Paint paint)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span> <span class="params">(Bitmap bitmap, Rect src, RectF dst, Paint paint)</span></div><div class="line">第一种方法中后两个参数<span class="params">(matrix, paint)</span>是在绘制的时候对图片进行一些改变，如果只是需要将图片内容绘制出来只需要如下操作就可以了：</div><div class="line">canvas.<span class="title">drawBitmap</span><span class="params">(bitmap,<span class="number">200</span>,<span class="number">500</span>,new Paint()</span>);</div><div class="line"><span class="comment">// 将画布坐标系移动到画布中央</span></div><div class="line">canvas.translate(mWidth/<span class="number">2</span>,mHeight/<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// 指定图片绘制区域(左上角的四分之一)</span></div><div class="line">Rect src = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,bitmap.getWidth()/<span class="number">2</span>,bitmap.getHeight()/<span class="number">2</span>);</div><div class="line"><span class="comment">// 指定图片在屏幕上显示的区域</span></div><div class="line">Rect dst = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">400</span>);</div><div class="line"><span class="comment">// 绘制图片</span></div><div class="line">canvas.drawBitmap(bitmap,src,dst,<span class="keyword">null</span>);</div></pre></td></tr></table></figure></p><h3 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一类</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(String text, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(String text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span> <span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint)</span></div><div class="line"></div><div class="line"><span class="comment">// 第二类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPosText</span> <span class="params">(String text, <span class="keyword">float</span>[] pos, Paint paint)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPosText</span> <span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, <span class="keyword">float</span>[] pos, Paint paint)</span></div><div class="line"></div><div class="line"><span class="comment">// 第三类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTextOnPath</span> <span class="params">(String text, Path path, <span class="keyword">float</span> hOffset, <span class="keyword">float</span> vOffset, Paint paint)</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTextOnPath</span> <span class="params">(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, Path path, <span class="keyword">float</span> hOffset, <span class="keyword">float</span> vOffset, Paint paint)</span></div></pre></td></tr></table></figure><h3 id="drawText"><a href="#drawText" class="headerlink" title="drawText()"></a>drawText()</h3><p><code>drawText(String text, float x, float y, Paint paint)</code><br>drawText() 是 Canvas 最基本的绘制文字的方法：给出文字的内容和位置， Canvas 按要求去绘制文字。<br>text 是文字内容，x 和 y 是文字的坐标。但需要注意：这个坐标并不是文字的左上角，而是一个与左下角比较接近的位置。大概在这里：<br><img src="Android-CustomView%20%20Canvas/BB64E71A-8C63-41BE-962A-17550C49E0E2.png" alt=""><br>参数Y  时基线(baseline)</p><h3 id="drawTextOnPath"><a href="#drawTextOnPath" class="headerlink" title="drawTextOnPath()"></a>drawTextOnPath()</h3><p>沿着一条 Path 来绘制文字。这是一个耍杂技的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas.drawPath(path, paint); <span class="comment">// 把 Path 也绘制出来，理解起来更方便  </span></div><div class="line">canvas.drawTextOnPath(<span class="string">"Hello HeCoder"</span>, path, <span class="number">0</span>, <span class="number">0</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="StaticLayout"><a href="#StaticLayout" class="headerlink" title="StaticLayout"></a>StaticLayout</h3><p>Canvas.drawText() 只能绘制单行的文字，而不能换行。它：</p><ul><li>不能在 View 的边缘自动折行</li><li>不能在换行符 \n 处换行<br>理解：<blockquote><p>StaticLayout 并不是一个 View 或者 ViewGroup ，而是 android.text.Layout 的子类，它是纯粹用来绘制文字的。 StaticLayout 支持换行，它既可以为文字设置宽度上限来让文字自动换行，也会在 \n 处主动换行。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">StaticLayout 的构造方法是 StaticLayout(CharSequence source, TextPaint paint, <span class="keyword">int</span> width, Layout.Alignment align, <span class="keyword">float</span> spacingmult, <span class="keyword">float</span> spacingadd, <span class="keyword">boolean</span> includepad)，其中参数里：</div><div class="line"></div><div class="line">width 是文字区域的宽度，文字到达这个宽度后就会自动换行； </div><div class="line">align 是文字的对齐方向； </div><div class="line">spacingmult 是行间距的倍数，通常情况下填 <span class="number">1</span> 就好； </div><div class="line">spacingadd 是行间距的额外增加值，通常情况下填 <span class="number">0</span> 就好； </div><div class="line">includeadd 是指是否在文字上下添加额外的空间，来避免某些过高的字符的绘制出现越界。</div></pre></td></tr></table></figure></blockquote></li></ul><h3 id="setTextSize-float-textSize"><a href="#setTextSize-float-textSize" class="headerlink" title="setTextSize(float textSize)"></a>setTextSize(float textSize)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">paint.setTextSize(<span class="number">18</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">25</span>, paint);  </div><div class="line">paint.setTextSize(<span class="number">36</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">70</span>, paint);  </div><div class="line">paint.setTextSize(<span class="number">60</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">145</span>, paint);  </div><div class="line">paint.setTextSize(<span class="number">84</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">240</span>, paint);</div></pre></td></tr></table></figure><h3 id="setTypeface-Typeface-typeface"><a href="#setTypeface-Typeface-typeface" class="headerlink" title="setTypeface(Typeface typeface)"></a>setTypeface(Typeface typeface)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> paint.setTypeface(Typeface.DEFAULT);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">150</span>, paint);  </div><div class="line">paint.setTypeface(Typeface.SERIF);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">300</span>, paint);  </div><div class="line">paint.setTypeface(Typeface.createFromAsset(getContext().getAssets(), <span class="string">"Satisfy-Regular.ttf"</span>));  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">450</span>, paint);</div></pre></td></tr></table></figure><h3 id="setFakeBoldText-boolean-fakeBoldText"><a href="#setFakeBoldText-boolean-fakeBoldText" class="headerlink" title="setFakeBoldText(boolean fakeBoldText)"></a>setFakeBoldText(boolean fakeBoldText)</h3><p>是否使用伪粗体。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">paint.setFakeBoldText(<span class="keyword">false</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">150</span>, paint);  </div><div class="line">paint.setFakeBoldText(<span class="keyword">true</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">230</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="setStrikeThruText-boolean-strikeThruText"><a href="#setStrikeThruText-boolean-strikeThruText" class="headerlink" title="setStrikeThruText(boolean strikeThruText)"></a>setStrikeThruText(boolean strikeThruText)</h3><p>是否加删除线。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setStrikeThruText(<span class="keyword">true</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">150</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="setUnderlineText-boolean-underlineText"><a href="#setUnderlineText-boolean-underlineText" class="headerlink" title="setUnderlineText(boolean underlineText)"></a>setUnderlineText(boolean underlineText)</h3><p>是否加下划线。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setUnderlineText(<span class="keyword">true</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">150</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="setTextSkewX-float-skewX"><a href="#setTextSkewX-float-skewX" class="headerlink" title="setTextSkewX(float skewX)"></a>setTextSkewX(float skewX)</h3><p>设置文字横向错切角度。其实就是文字倾斜度的啦。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setTextSkewX(-<span class="number">0.5f</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">150</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="setLetterSpacing-float-letterSpacing"><a href="#setLetterSpacing-float-letterSpacing" class="headerlink" title="setLetterSpacing(float letterSpacing)"></a>setLetterSpacing(float letterSpacing)</h3><p>设置字符间距。默认值是 0。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">paint.setLetterSpacing(<span class="number">0.2f</span>);  </div><div class="line">canvas.drawText(text, <span class="number">100</span>, <span class="number">150</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="setTextAlign-Paint-Align-align"><a href="#setTextAlign-Paint-Align-align" class="headerlink" title="setTextAlign(Paint.Align align)"></a>setTextAlign(Paint.Align align)</h3><p> 设置文字的对齐方式。一共有三个值：LEFT CETNER 和 RIGHT。默认值为 LEFT。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">paint.setTextAlign(Paint.Align.LEFT);  </div><div class="line">canvas.drawText(text, <span class="number">500</span>, <span class="number">150</span>, paint);  </div><div class="line">paint.setTextAlign(Paint.Align.CENTER);  </div><div class="line">canvas.drawText(text, <span class="number">500</span>, <span class="number">150</span> + textHeight, paint);  </div><div class="line">paint.setTextAlign(Paint.Align.RIGHT);  </div><div class="line">canvas.drawText(text, <span class="number">500</span>, <span class="number">150</span> + textHeight * <span class="number">2</span>, paint);</div></pre></td></tr></table></figure></p><h3 id="范围裁切"><a href="#范围裁切" class="headerlink" title="范围裁切"></a>范围裁切</h3><p>Canvas.translate(float dx, float dy) 平移<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">anvas.clipRect(left, top, right, bottom);  </div><div class="line">canvas.drawBitmap(bitmap, x, y, paint);</div></pre></td></tr></table></figure></p><p>Canvas.save() 和 Canvas.restore() 来及时恢复绘制范围，所以完整代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">canvas.save();  </div><div class="line">canvas.clipRect(left, top, right, bottom);  </div><div class="line">canvas.drawBitmap(bitmap, x, y, paint);  </div><div class="line">canvas.restore();</div></pre></td></tr></table></figure></p><h3 id="几何变化"><a href="#几何变化" class="headerlink" title="几何变化"></a>几何变化</h3><ol><li><p>Canvas.translate(float dx, float dy) 平移</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">canvas.save();  </div><div class="line">canvas.translate(<span class="number">200</span>, <span class="number">0</span>);  </div><div class="line">canvas.drawBitmap(bitmap, x, y, paint);  </div><div class="line">canvas.restore();</div></pre></td></tr></table></figure></li><li><p>Canvas.rotate(float degrees, float px, float py) 旋转<br>参数里的 degrees 是旋转角度，单位是度（也就是一周有 360° 的那个单位），方向是顺时针为正向；  px 和 py 是轴心的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">canvas.save();  </div><div class="line">canvas.rotate(<span class="number">45</span>, centerX, centerY);  </div><div class="line">canvas.drawBitmap(bitmap, x, y, paint);  </div><div class="line">canvas.restore();</div></pre></td></tr></table></figure></li><li><p>Canvas.scale(float sx, float sy, float px, float py) 放缩<br>参数里的 sx sy 是横向和纵向的放缩倍数； px py 是放缩的轴心。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">canvas.save();  </div><div class="line">canvas.scale(<span class="number">1.3f</span>, <span class="number">1.3f</span>, x + bitmapWidth / <span class="number">2</span>, y + bitmapHeight / <span class="number">2</span>);  </div><div class="line">canvas.drawBitmap(bitmap, x, y, paint);  </div><div class="line">canvas.restore();</div></pre></td></tr></table></figure></li><li><p>skew(float sx, float sy) 错切<br>参数里的 sx 和 sy 是 x 方向和 y 方向的错切系数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">canvas.save();  </div><div class="line">canvas.skew(<span class="number">0</span>, <span class="number">0.5f</span>);  </div><div class="line">canvas.drawBitmap(bitmap, x, y, paint);  </div><div class="line">canvas.restore();</div></pre></td></tr></table></figure></li></ol><h3 id="使用-Matrix-来做常见变换"><a href="#使用-Matrix-来做常见变换" class="headerlink" title="使用 Matrix 来做常见变换"></a>使用 Matrix 来做常见变换</h3><p>Matrix 做常见变换的方式：</p><ol><li>创建 Matrix 对象；</li><li>调用 Matrix 的 pre/postTranslate/Rotate/Scale/Skew() 方法来设置几何变换；</li><li>使用 Canvas.setMatrix(matrix) 或 Canvas.concat(matrix) 来把几何变换应用到 Canvas。<h3 id="super-onDraw-canvas"><a href="#super-onDraw-canvas" class="headerlink" title="super.onDraw(canvas);"></a>super.onDraw(canvas);</h3>这个方法是空<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/ 在 View.java 的源码中，onDraw() 是空的</div><div class="line"><span class="comment">// 所以直接继承 View 的类，它们的 super.onDraw() 什么也不会做</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>,  </span></div><div class="line">        <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Implement this to do your drawing.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> canvas the canvas on which the background will be drawn</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>### </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h3&gt;&lt;p&gt;Canvas我们可以称之为画布，能够在上面绘制各种东西，是安卓平台2D图形绘制的基础，非常强大。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android - 沉浸式状态栏</title>
    <link href="http://yoursite.com/2019/04/22/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <id>http://yoursite.com/2019/04/22/Android-沉浸式状态栏/</id>
    <published>2019-04-22T14:07:00.000Z</published>
    <updated>2020-01-01T09:58:58.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android4-4-版本实现方式"><a href="#Android4-4-版本实现方式" class="headerlink" title="Android4.4 版本实现方式"></a>Android4.4 版本实现方式</h3><p>沉浸式状态栏是4.4 版本以后才提供的（API 19）在4.4 版本上实现的两种方式</p><a id="more"></a><ol><li>在资源文件中设置沉浸式状态栏<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BaseTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">          <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"BaseTheme"</span>/&gt;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><p>然后在values-v19目录下的styles.xml文件（如果项目中没有就新建一个，在4.4以上的系统就会读取该目录下的资源文件）添加如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"BaseTheme"</span>&gt;<span class="xml"></span></div><div class="line">            <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div></pre></td></tr></table></figure></p><ol><li>在代码中设置<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;   getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line">       &#125;</div></pre></td></tr></table></figure></li></ol><blockquote><p>Toolbar设置一下fitsSystemWindows属性为true<br>fitsSystemWindows=true的作用是给View增加值为状态栏高度的padding<br>问题是将键盘弹起时ToolBar的内容被顶上去了 解决方法<br><img src="Android%20-%20%E6%B2%89%E6%B5%B8%E5%BC%8F%E7%8A%B6%E6%80%81%E6%A0%8F/FA42ACAD-8A63-472D-9DB4-35436508CC77.png" alt=""></p><h3 id="Android-5-0以上版本实现方式"><a href="#Android-5-0以上版本实现方式" class="headerlink" title="Android 5.0以上版本实现方式"></a>Android 5.0以上版本实现方式</h3><p>Android 5.0 以上提供了设置状态栏颜色的Api<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">         window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line">         window.getDecorView().setSystemUiVisibility</div><div class="line">                 (View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</div><div class="line">         window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</div><div class="line">         window.setStatusBarColor(Color.TRANSPARENT);</div><div class="line"></div><div class="line">     &#125;</div></pre></td></tr></table></figure></p></blockquote><h3 id="Android-6-0-以上设置"><a href="#Android-6-0-以上设置" class="headerlink" title="Android 6.0 以上设置"></a>Android 6.0 以上设置</h3><figure class="highlight java"><figcaption><span>window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android4-4-版本实现方式&quot;&gt;&lt;a href=&quot;#Android4-4-版本实现方式&quot; class=&quot;headerlink&quot; title=&quot;Android4.4 版本实现方式&quot;&gt;&lt;/a&gt;Android4.4 版本实现方式&lt;/h3&gt;&lt;p&gt;沉浸式状态栏是4.4 版本以后才提供的（API 19）在4.4 版本上实现的两种方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title> Android -AsyncTask</title>
    <link href="http://yoursite.com/2019/03/15/Android-AsyncTask/"/>
    <id>http://yoursite.com/2019/03/15/Android-AsyncTask/</id>
    <published>2019-03-15T15:24:17.000Z</published>
    <updated>2020-01-01T09:59:13.901Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h3><ol><li><p>Params：开始异步任务执行时传入的参数类型；</p></li><li><p>Progress：异步任务执行过程中，返回下载进度值的类型；</p></li><li><p>Result：异步任务执行完成后，返回的结果类型；  </p><blockquote><p>如果AsyncTask确定不需要传递具体参数，那么这三个泛型参数可以用Void来代替。  </p></blockquote></li></ol><a id="more"></a><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><ol><li><p>onPreExecute()<br>这个方法会在后台任务开始执行之间调用，在主线程执行。用于进行一些界面上的初始化操作，比如显示一个进度条对话框等。</p></li><li><p>doInBackground(Params…)<br>这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。<br>任务一旦完成就可以通过return语句来将任务的执行结果进行返回，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。注意，在这个方法中是不可以进行UI操作的，如果需要更新UI元素，比如说反馈当前任务的执行进度，可以调用publishProgress(Progress…)方法来完成。</p></li><li><p>onProgressUpdate(Progress…)<br>当在后台任务中调用了publishProgress(Progress…)方法后，这个方法就很快会被调用，方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，在主线程中进行，利用参数中的数值就可以对界面元素进行相应的更新。</p></li><li><p>onPostExecute(Result)<br>当doInBackground(Params…)执行完毕并通过return语句进行返回时，这个方法就很快会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，在主线程中进行，比如说提醒任务执行的结果，以及关闭掉进度条对话框等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//执行顺序</span></div><div class="line"><span class="comment">//onPreExecute() --&gt; doInBackground() --&gt; publishProgress() --&gt; onProgressUpdate() --&gt; onPostExecute()</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Integer</span>, <span class="title">Boolean</span>&gt; </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;  </div><div class="line">        progressDialog.show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </div><div class="line">                <span class="keyword">int</span> downloadPercent = doDownload();  </div><div class="line">                publishProgress(downloadPercent);  </div><div class="line">                <span class="keyword">if</span> (downloadPercent &gt;= <span class="number">100</span>) &#123;  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;  </div><div class="line">        progressDialog.setMessage(<span class="string">"当前下载进度："</span> + values[<span class="number">0</span>] + <span class="string">"%"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>&#123;  </div><div class="line">        progressDialog.dismiss();  </div><div class="line">        <span class="keyword">if</span> (result) &#123;  </div><div class="line">            Toast.makeText(context, <span class="string">"下载成功"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            Toast.makeText(context, <span class="string">"下载失败"</span>, Toast.LENGTH_SHORT).show();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li><p>异步任务的实例必须在UI线程中创建，即AsyncTask对象必须在UI线程中创建。</p></li><li><p>execute(Params… params)方法必须在UI线程中调用。</p></li><li><p>不要手动调用onPreExecute()，doInBackground(Params… params)，onProgressUpdate(Progress… values)，onPostExecute(Result result)这几个方法。</p></li><li><p>不能在doInBackground(Params… params)中更改UI组件的信息。</p></li><li><p>一个任务实例只能执行一次，如果执行第二次将会抛出异常。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AsyncTask&quot;&gt;&lt;a href=&quot;#AsyncTask&quot; class=&quot;headerlink&quot; title=&quot;AsyncTask&quot;&gt;&lt;/a&gt;AsyncTask&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Params：开始异步任务执行时传入的参数类型；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Progress：异步任务执行过程中，返回下载进度值的类型；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Result：异步任务执行完成后，返回的结果类型；  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果AsyncTask确定不需要传递具体参数，那么这三个泛型参数可以用Void来代替。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>git 常用的基本命令</title>
    <link href="http://yoursite.com/2019/02/15/git-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/02/15/git-常用的基本命令/</id>
    <published>2019-02-15T08:48:49.000Z</published>
    <updated>2020-01-01T09:39:53.263Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本控制的概念"><a href="#版本控制的概念" class="headerlink" title="版本控制的概念:"></a>版本控制的概念:</h3><p>Version Control System - VCS</p><ul><li>中央式版本控制系统 <code>Centralized VCS</code></li><li>分布式版本控制系统 <code>Distributed VCS</code></li></ul><a id="more"></a><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>status 是用来查看工作目录的当前状态的指令</p><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>提交的历史</p><h3 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h3><p>其中这个括号里的 HEAD 是引用中最特殊的一个:它是指向当前 commit 的引用。所以它是指向当前commit的引用。当前 commit 在哪里,HEAD 就在哪里,这是一个永远自动指向当前 commit 的引用,所以你永远可以用Head来操作当前的commit<br>head 时当前git中的一个独特的引用 是唯一的，</p><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p>HEAD 除了可以指向 commit，还可以指向一个 branch，当它指向某个 branch 的时候，会通过这个 branch 来间接地指向某个 commit；另外，当 HEAD 在提交时自动向前移动的时候，它会像一个拖钩一样带着它所指向的 branch 一起移动。</p><p>例如上面的那张图里，HEAD -&gt; master 中的 master 就是一个 branch 的名字，而它左边的箭头 -&gt; 表示 HEAD 正指向它（当然，也会间接地指向它所指向的 commit）。</p><ol><li>创建： git  branch 名称</li><li>切换branch  git checkout  feature1</li><li>删除branch  git branch -d feature1<blockquote><p>Head 指向的branch不能删除 如果要删除 先用checkout 把head指向其他的地方  </p><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><p>master ，其实是一个特殊的 branch：它是 Git 的默认 branch（俗称主 branch / 主分支）。<br>所谓的「默认 branch」，主要有两个特点：</p></blockquote></li><li>新创建的 repository（仓库）是没有任何 commit 的。但在它创建第一个 commit 时，会把 master 指向它，并把 HEAD 指向 master。</li><li>当有人使用 git clone 时，除了从远程仓库把 .git 这个仓库目录下载到工作目录中，还会 checkout （签出） master（checkout 的意思就是把某个 commit 作为当前 commit，把 HEAD 移动过去，并把工作目录的文件内容替换成这个 commit 所对应的内容）。<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3></li><li>push 是把当前分支上传到远程仓库 并把这个branch路径的所有commit s 也一并上传<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3></li><li>merge 指定一个commit  把它合并懂啊当前的commit来</li><li>从目标 commit 和当前 commit (即 HEAD 所指向的 commit)分叉的位置起,把目标 commit<br>的路径上的所有 commit 的内容一并应用到当前 commit,然后自动生成一个新的 commit</li><li>冲突</li></ol><ul><li>当前分支和目标分支修改了同一部分的内容 git无法确定怎么合并  解决冲突后commit</li><li>head 领先于目标commit git 什么都不做 空操作</li><li>head 落后于目标commit  fast-forward<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3>远端仓库的内容用fetch取下来<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h3>直接把工作目录下的所有改动全部放进暂缓区<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3>查看暂缓区和上一条commit的区别  git diff —staged<br>查看工作目录和上一条commit的区别 git  diff HEAD<h3 id="git-reset-—hard-head"><a href="#git-reset-—hard-head" class="headerlink" title="git reset  —hard head^"></a>git reset  —hard head^</h3>恢复到哪个commit</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;版本控制的概念&quot;&gt;&lt;a href=&quot;#版本控制的概念&quot; class=&quot;headerlink&quot; title=&quot;版本控制的概念:&quot;&gt;&lt;/a&gt;版本控制的概念:&lt;/h3&gt;&lt;p&gt;Version Control System - VCS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中央式版本控制系统 &lt;code&gt;Centralized VCS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分布式版本控制系统 &lt;code&gt;Distributed VCS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="http://yoursite.com/2018/03/08/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/08/Android-设计模式-观察者模式/</id>
    <published>2018-03-08T02:37:55.000Z</published>
    <updated>2018-03-10T16:41:00.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。<br>结构图</p><a id="more"></a><p><img src="Android%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/73B1C5D6-087A-4E94-947A-E5DD6CC067BE.png" alt=""></p><ol><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ol><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 更新方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinUser</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">// 微信用户名</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeixinUser</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(name + <span class="string">"-"</span> + message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加订阅者</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除订阅者</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知订阅者更新消息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//实现</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">//储存订阅公众号的微信用户</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserlist = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        weixinUserlist.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        weixinUserlist.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer observer : weixinUserlist) &#123;</div><div class="line">            observer.update(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubscriptionSubject mSubscriptionSubject=<span class="keyword">new</span> SubscriptionSubject();</div><div class="line">        <span class="comment">//创建微信用户</span></div><div class="line">        WeixinUser user1=<span class="keyword">new</span> WeixinUser(<span class="string">"杨影枫"</span>);</div><div class="line">        WeixinUser user2=<span class="keyword">new</span> WeixinUser(<span class="string">"月眉儿"</span>);</div><div class="line">        WeixinUser user3=<span class="keyword">new</span> WeixinUser(<span class="string">"紫轩"</span>);</div><div class="line">        <span class="comment">//订阅公众号</span></div><div class="line">        mSubscriptionSubject.attach(user1);</div><div class="line">        mSubscriptionSubject.attach(user2);</div><div class="line">        mSubscriptionSubject.attach(user3);</div><div class="line">        <span class="comment">//公众号更新发出消息给订阅的微信用户</span></div><div class="line">        mSubscriptionSubject.notify(<span class="string">"专栏更新了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。&lt;br&gt;结构图&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android -handler源码解析</title>
    <link href="http://yoursite.com/2018/01/20/Android%20-handler%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/01/20/Android -handler源码解析/</id>
    <published>2018-01-20T10:45:33.337Z</published>
    <updated>2018-03-10T16:44:29.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Looper-源码解析"><a href="#Looper-源码解析" class="headerlink" title="Looper 源码解析"></a>Looper 源码解析</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//判断sThreadLocal是否为null，否则抛出异常</span></div><div class="line"><span class="comment">//即Looper.prepare()方法不能被调用两次</span></div><div class="line"><span class="comment">//也就是说，一个线程中只能对应一个Looper实例</span></div><div class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//sThreadLocal是一个ThreadLocal对象，用于在一个线程中存储变量</span></div><div class="line"><span class="comment">//实例化Looper对象并存放在ThreadLocal</span></div><div class="line"><span class="comment">//这说明Looper是存放在Thread线程里的</span></div><div class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(<span class="keyword">true</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">//再来看下Looper的构造方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line"><span class="comment">//创建了一个MessageQueue（消息队列）</span></div><div class="line"><span class="comment">//这说明，当创建一个Looper实例时，会自动创建一个与之配对的MessageQueue（消息队列）</span></div><div class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">        mRun = <span class="keyword">true</span>;</div><div class="line">        mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="消息循环-Loop-方法"><a href="#消息循环-Loop-方法" class="headerlink" title="消息循环 Loop()方法"></a>消息循环 Loop()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//myLooper()方法作用是返回sThreadLocal存储的Looper实例，如果me为null，loop()则抛出异常</span></div><div class="line"><span class="comment">//也就是说loop方法的执行必须在prepare方法之后运行</span></div><div class="line"><span class="comment">//也就是说，消息循环必须要先在线程当中创建Looper实例</span></div><div class="line">        <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//获取looper实例中的mQueue（消息队列）</span></div><div class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line"></div><div class="line">        Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"><span class="comment">//进入消息循环</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line"><span class="comment">//next()方法用于取出消息队列里的消息</span></div><div class="line"><span class="comment">//如果取出的消息为空，则线程阻塞</span></div><div class="line">            Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">          </div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">  </div><div class="line">            Printer logging = me.mLogging;</div><div class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"><span class="comment">//消息派发：把消息派发给msg的target属性，然后用dispatchMessage方法去处理</span></div><div class="line"><span class="comment">//Msg的target其实就是handler对象，下面会继续分析</span></div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">                logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">            <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">                Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                        + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                        + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                        + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                        + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">            &#125;</div><div class="line"><span class="comment">//释放消息占据的资源</span></div><div class="line">            msg.recycle();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Handler-源码"><a href="#Handler-源码" class="headerlink" title="Handler 源码"></a>Handler 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                    klass.getCanonicalName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//通过Looper.myLooper()获取了当前线程保存的Looper实例，如果线程没有Looper实例那么会抛出异常</span></div><div class="line"><span class="comment">//这说明在一个没有创建Looper的线程中是无法创建一个Handler对象的</span></div><div class="line"><span class="comment">//所以说我们在子线程中创建一个Handler时首先需要创建Looper，并且开启消息循环才能够使用这个Handler。</span></div><div class="line">        mLooper = Looper.myLooper();</div><div class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//获取了这个Looper实例中保存的MessageQueue（消息队列）</span></div><div class="line"><span class="comment">//这样就保证了handler的实例与我们Looper实例中MessageQueue关联上了</span></div><div class="line"></div><div class="line">        mQueue = mLooper.mQueue;</div><div class="line">        mCallback = callback;</div><div class="line">        mAsynchronous = async;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><ol><li><p>send的发送方法：sendMessage()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//我们往下扒</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">            delayMillis = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line"><span class="comment">//直接获取MessageQueue</span></div><div class="line">        MessageQueue queue = mQueue;</div><div class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//调用了enqueueMessage方法</span></div><div class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//调用sendMessage方法其实最后是调用了enqueueMessage方法</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line"><span class="comment">//为msg.target赋值为this，也就是把当前的handler作为msg的target属性</span></div><div class="line"><span class="comment">//如果大家还记得Looper的loop()方法会取出每个msg然后执行msg.target.dispatchMessage(msg)去处理消息，其实就是派发给相应的Handler</span></div><div class="line">        msg.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//最终调用queue的enqueueMessage的方法，也就是说handler发出的消息，最终会保存到消息队列中去。</span></div><div class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>Post 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">showhandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    String line = <span class="string">"\n"</span>;</div><div class="line">                    StringBuffer text = <span class="keyword">new</span> StringBuffer(show.getText());</div><div class="line">                            text.append(line).append(<span class="string">"angelababy:Yes,I do"</span>);</div><div class="line">                            show.setText(text);</div><div class="line">                &#125;</div></pre></td></tr></table></figure></li><li><p>dispathMessage()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">            handleCallback(msg);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ol><h3 id="在Activity启动应用的时候"><a href="#在Activity启动应用的时候" class="headerlink" title="在Activity启动应用的时候"></a>在Activity启动应用的时候</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个进程会默认生成一个主线程</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"> ......</div><div class="line"><span class="comment">//主线程生成时自动通过prepareMainLooper方法为主线程创建一个Looper</span></div><div class="line"><span class="comment">//prepare()方法是用于在子线程中创建一个Looper对象，在子线程中是可以退出消息循环的：调用消息队列的quit方法</span></div><div class="line"><span class="comment">//Looper生成时会自动生成与之配套的消息队列</span></div><div class="line">Looper.prepareMainLooper(); </div><div class="line">ActivityThread thread = <span class="keyword">new</span> ActivityThread(); </div><div class="line">thread.attach(<span class="keyword">false</span>);</div><div class="line"> ...... </div><div class="line"><span class="comment">//loop()方法开启消息循环</span></div><div class="line"><span class="comment">//主线程的消息循环是不允许被退出的</span></div><div class="line">Looper.loop(); </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="MessageQueue-入队"><a href="#MessageQueue-入队" class="headerlink" title="MessageQueue 入队"></a>MessageQueue 入队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line"></div><div class="line">        ......</div><div class="line"></div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="MessageQueue出队"><a href="#MessageQueue出队" class="headerlink" title="MessageQueue出队"></a>MessageQueue出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125;</div><div class="line"><span class="comment">// nativePollOnce方法在native层，若是nextPollTimeoutMillis为-1，这时候消息队列处于等待状态。 　　</span></div><div class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">            Message prevMsg = <span class="keyword">null</span>;</div><div class="line">            Message msg = mMessages;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line"><span class="comment">//按照我们设置的时间取出消息</span></div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Got a message.</span></div><div class="line">                    mBlocked = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                        prevMsg.next = msg.next;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mMessages = msg.next;</div><div class="line">                    &#125;</div><div class="line">                    msg.next = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    <span class="keyword">return</span> msg;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// 如果消息队列中没有消息，将nextPollTimeoutMillis设为-1，下次循环消息队列则处于等待状态</span></div><div class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">           </div><div class="line"><span class="comment">//退出消息队列，返回null，这时候Looper中的消息循环也会终止。 </span></div><div class="line">            <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">                dispose();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>线程本地存储区（Thread Local Storage，简称为TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。TLS常用的操作方法</p><ol><li><p>ThreadLocal.set(T value)：将value存储到当前线程的TLS区域，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread(); <span class="comment">//获取当前线程</span></div><div class="line">    Values values = values(currentThread); <span class="comment">//查找当前线程的本地储存区</span></div><div class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//当线程本地存储区，尚未存储该线程相关信息时，则创建Values对象</span></div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//保存数据value到当前线程this</span></div><div class="line">    values.put(<span class="keyword">this</span>, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>ThreadLocal.get()：获取当前线程TLS区域的数据，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread(); </div><div class="line">    <span class="comment">//获取当前线程</span></div><div class="line">    Values values = values(currentThread); </div><div class="line">    <span class="comment">//查找当前线程的本地储存区</span></div><div class="line">    <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</div><div class="line">        Object[] table = values.table;</div><div class="line">        <span class="keyword">int</span> index = hash &amp; values.mask;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.reference == table[index]) &#123;</div><div class="line">            <span class="keyword">return</span> (T) table[index + <span class="number">1</span>]; </div><div class="line">            <span class="comment">//返回当前线程储存区中的数据</span></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//创建Values对象</span></div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (T) values.getAfterMiss(<span class="keyword">this</span>); </div><div class="line">    <span class="comment">//从目标线程存储区没有查询是则返回null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Looper-源码解析&quot;&gt;&lt;a href=&quot;#Looper-源码解析&quot; class=&quot;headerlink&quot; title=&quot;Looper 源码解析&quot;&gt;&lt;/a&gt;Looper 源码解析&lt;/h3&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>数据库- Room 错误tips</title>
    <link href="http://yoursite.com/2018/01/09/%E6%95%B0%E6%8D%AE%E5%BA%93-%20Room%20%E9%94%99%E8%AF%AFtips/"/>
    <id>http://yoursite.com/2018/01/09/数据库- Room 错误tips/</id>
    <published>2018-01-08T16:00:00.000Z</published>
    <updated>2018-03-10T16:49:18.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DB-room"><a href="#DB-room" class="headerlink" title="DB/room"></a>DB/room</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Error:(<span class="number">12</span>, <span class="number">17</span>) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to <span class="keyword">false</span>.</div><div class="line"></div><div class="line">Error:(<span class="number">21</span>, <span class="number">27</span>) 错误: To use RxJava2 features, you must add `rxjava2` artifact from Room as a dependency. android.arch.persistence.room:rxjava2:&lt;version&gt;</div></pre></td></tr></table></figure><a id="more"></a><p>解决方案</p><ol><li>在创建DataBase 是加上{exportSchema = false}<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Database</span>(entities = &#123;Wait.class&#125;,version = <span class="number">1</span>, exportSchema = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitDataBase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WaitDataBase sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WaitDataBase <span class="title">getDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = Room.databaseBuilder(ReadhubApplication.getInstance(), WaitDataBase.class,</div><div class="line">                    <span class="string">"Readhub"</span>).build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        sInstance = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> WaitDao  <span class="title">waitDao</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DB-room&quot;&gt;&lt;a href=&quot;#DB-room&quot; class=&quot;headerlink&quot; title=&quot;DB/room&quot;&gt;&lt;/a&gt;DB/room&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Error:(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error:(&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;) 错误: To use RxJava2 features, you must add `rxjava2` artifact from Room as a dependency. android.arch.persistence.room:rxjava2:&amp;lt;version&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="sql room" scheme="http://yoursite.com/tags/sql-room/"/>
    
  </entry>
  
  <entry>
    <title>Android- 截取view保存为Bitmap</title>
    <link href="http://yoursite.com/2017/12/24/Android-%20%E6%88%AA%E5%8F%96view%E4%BF%9D%E5%AD%98%E4%B8%BABitmap/"/>
    <id>http://yoursite.com/2017/12/24/Android- 截取view保存为Bitmap/</id>
    <published>2017-12-23T16:00:00.000Z</published>
    <updated>2018-03-10T13:39:39.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建Bitmap"><a href="#创建Bitmap" class="headerlink" title="创建Bitmap"></a>创建Bitmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Canvas sCanvas = <span class="keyword">new</span> Canvas();</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 从一个view创建Bitmap:</div><div class="line">    * 注意点：绘制之前要清掉 View 的焦点，因为焦点可能会改变一个 View 的 UI 状态</div><div class="line">    * 来源：https://github.com/tyrantgit/ExplosionField</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> view</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapFromView</span><span class="params">(View view, <span class="keyword">float</span> scale)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ImageView) &#123;</div><div class="line">           Drawable drawable = ((ImageView) view).getDrawable();</div><div class="line">           <span class="keyword">if</span> (drawable != <span class="keyword">null</span> &amp;&amp; drawable <span class="keyword">instanceof</span> BitmapDrawable) &#123;</div><div class="line">               <span class="keyword">return</span> ((BitmapDrawable) drawable).getBitmap();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       view.clearFocus();</div><div class="line">       Bitmap bitmap = createBitmapSafely((<span class="keyword">int</span>) (view.getWidth() * scale),</div><div class="line">               (<span class="keyword">int</span>) (view.getHeight() * scale), Bitmap.Config.ARGB_8888, <span class="number">1</span>);</div><div class="line">       <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">synchronized</span> (sCanvas) &#123;</div><div class="line">               Canvas canvas = sCanvas;</div><div class="line">               canvas.setBitmap(bitmap);</div><div class="line">               canvas.save();</div><div class="line">               canvas.drawColor(Color.WHITE); <span class="comment">// 防止 View 上面有些区域空白导致最终 Bitmap 上有些区域变黑</span></div><div class="line">               canvas.scale(scale, scale);</div><div class="line">               view.draw(canvas);</div><div class="line">               canvas.restore();</div><div class="line">               canvas.setBitmap(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> bitmap;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapFromView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> createBitmapFromView(view, <span class="number">1f</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h3 id="创建安全Bitmap"><a href="#创建安全Bitmap" class="headerlink" title="创建安全Bitmap"></a>创建安全Bitmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 安全的创建bitmap;如果新建 Bitmap 时产生了 OOM，可以主动进行一次 GC - System.gc()，然后再次尝试创建</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> width</div><div class="line">  * <span class="doctag">@param</span> height</div><div class="line">  * <span class="doctag">@param</span> config</div><div class="line">  * <span class="doctag">@param</span> retryCount</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapSafely</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, Bitmap.Config config, <span class="keyword">int</span> retryCount)</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         <span class="keyword">return</span> Bitmap.createBitmap(width, height, config);</div><div class="line">     &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">         <span class="keyword">if</span> (retryCount &gt; <span class="number">0</span>) &#123;</div><div class="line">             System.gc();</div><div class="line">             <span class="keyword">return</span> createBitmapSafely(width, height, config, retryCount - <span class="number">1</span>);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建Bitmap&quot;&gt;&lt;a href=&quot;#创建Bitmap&quot; class=&quot;headerlink&quot; title=&quot;创建Bitmap&quot;&gt;&lt;/a&gt;创建Bitmap&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android-okhttp的基本用法</title>
    <link href="http://yoursite.com/2017/12/03/Android-okhttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/03/Android-okhttp的基本用法/</id>
    <published>2017-12-02T17:13:53.731Z</published>
    <updated>2018-03-10T16:46:41.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方WIKI<a href="https://github.com/square/okhttp/wiki/HTTPS" target="_blank" rel="external">地址</a></p></blockquote><h3 id="常见的运用方式"><a href="#常见的运用方式" class="headerlink" title="常见的运用方式:"></a>常见的运用方式:</h3><ol><li>一般的get请求</li><li>一般的post请求</li><li>基于Http的文件上传</li><li>文件下载</li><li>加载图片</li><li>支持请求回调，直接返回对象、对象集合</li><li>支持session的保持</li></ol><a id="more"></a><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖:"></a>添加依赖:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></div></pre></td></tr></table></figure><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求:"></a>GET 请求:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建okHttpClient对象</span></div><div class="line">OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"><span class="comment">//创建一个Request</span></div><div class="line"><span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(<span class="string">"https://github.com/hongyangAndroid"</span>)</div><div class="line">                .build();</div><div class="line"><span class="comment">//以通过Request.Builder设置更多的参数比如：header、method</span></div><div class="line"><span class="comment">//new call</span></div><div class="line">Call call = mOkHttpClient.newCall(request); </div><div class="line"><span class="comment">//请求加入调度</span></div><div class="line">call.enqueue(<span class="keyword">new</span> Callback()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span></span></div><div class="line">            &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException</span></div><div class="line">            &#123;</div><div class="line">                    <span class="comment">//String htmlStr =  response.body().string();</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Request request = buildMultipartFormRequest(</div><div class="line">        url, <span class="keyword">new</span> File[]&#123;file&#125;, <span class="keyword">new</span> String[]&#123;fileKey&#125;, <span class="keyword">null</span>);</div><div class="line">FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();   </div><div class="line">builder.add(<span class="string">"username"</span>,<span class="string">"张鸿洋"</span>);</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                   .url(url)</div><div class="line">                .post(builder.build())</div><div class="line">                .build();</div><div class="line"> mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback()&#123;&#125;);</div></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">File file = new File(Environment.getExternalStorageDirectory(), "balabala.mp4");</div><div class="line"></div><div class="line">RequestBody fileBody = RequestBody.create(MediaType.parse("application/octet-stream"), file);</div><div class="line"></div><div class="line">RequestBody requestBody = new MultipartBuilder()</div><div class="line">     .type(MultipartBuilder.FORM)</div><div class="line">     .addPart(Headers.of(</div><div class="line">          "Content-Disposition", </div><div class="line">              "form-data; name=\"username\""), </div><div class="line">          RequestBody.create(null, "张鸿洋"))</div><div class="line">     .addPart(Headers.of(</div><div class="line">         "Content-Disposition", </div><div class="line">         "form-data; name=\"mFile\"; </div><div class="line">         filename=\"wjd.mp4\""), fileBody)</div><div class="line">     .build();</div><div class="line"></div><div class="line">Request request = new Request.Builder()</div><div class="line">    .url("http://192.168.1.103:8080/okHttpServer/fileUpload")</div><div class="line">    .post(requestBody)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Call call = mOkHttpClient.newCall(request);</div><div class="line">call.enqueue(new Callback()</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="Okhttp的简单封装"><a href="#Okhttp的简单封装" class="headerlink" title="Okhttp的简单封装"></a>Okhttp的简单封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        mOkHttpClient.setConnectTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 该不会开启异步线程。</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Response <span class="title">execute</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        <span class="keyword">return</span> mOkHttpClient.newCall(request).execute();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启异步线程访问网络</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@param</span> responseCallback</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Request request, Callback responseCallback)</span></span>&#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(responseCallback);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Request request)</span></span>&#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response arg0)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request arg0, IOException arg1)</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringFromServer</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</div><div class="line">        Response response = execute(request);</div><div class="line">        <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">            String responseUrl = response.body().string();</div><div class="line">            <span class="keyword">return</span> responseUrl;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET_NAME = <span class="string">"UTF-8"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里使用了HttpClinet的API。只是为了方便</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatParams</span><span class="params">(List&lt;BasicNameValuePair&gt; params)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> URLEncodedUtils.format(params, CHARSET_NAME);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为HttpGet 的 url 方便的添加多个name value 参数。</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">attachHttpGetParams</span><span class="params">(String url, List&lt;BasicNameValuePair&gt; params)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + formatParams(params);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为HttpGet 的 url 方便的添加1个name value 参数。</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">attachHttpGetParam</span><span class="params">(String url, String name, String value)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + name + <span class="string">"="</span> + value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GET-同步请求"><a href="#GET-同步请求" class="headerlink" title="GET 同步请求"></a>GET 同步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"> </div><div class="line">    Response response = client.newCall(request).execute();</div><div class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"> </div><div class="line">    Headers responseHeaders = response.headers();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">      System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GET-异步请求"><a href="#GET-异步请求" class="headerlink" title="GET 异步请求"></a>GET 异步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"> </div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, Throwable throwable)</span> </span>&#123;</div><div class="line">        throwable.printStackTrace();</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">      <span class="meta">@Override</span> </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line">        Headers responseHeaders = response.headers();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">          System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">        &#125;</div><div class="line">        System.out.println(response.body().string());</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">client.setConnectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">client.setWriteTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">client.setReadTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div></pre></td></tr></table></figure><h3 id="Okhttp的拦截器"><a href="#Okhttp的拦截器" class="headerlink" title="Okhttp的拦截器"></a>Okhttp的拦截器</h3><p>注册一个应用拦截器通过 OkHttpClient.Builder调用 addInterceptor():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">    .addInterceptor(<span class="keyword">new</span> LoggingInterceptor())</div><div class="line">    .build();</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">    .url(<span class="string">"http://www.publicobject.com/helloworld.txt"</span>)</div><div class="line">    .header(<span class="string">"User-Agent"</span>, <span class="string">"OkHttp Example"</span>)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Response response = client.newCall(request).execute();</div><div class="line">response.body().close();</div><div class="line"><span class="comment">// .addNetworkInterceptor(new LoggingInterceptor())</span></div></pre></td></tr></table></figure></p><h3 id="LoggingInterceptor"><a href="#LoggingInterceptor" class="headerlink" title="LoggingInterceptor"></a>LoggingInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request request = chain.request();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line">    logger.info(String.format(<span class="string">"Sending request %s on %s%n%s"</span>,</div><div class="line">        request.url(), chain.connection(), request.headers()));</div><div class="line"></div><div class="line">    Response response = chain.proceed(request);</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    logger.info(String.format(<span class="string">"Received response for %s in %.1fms%n%s"</span>,</div><div class="line">        response.request().url(), (t2 - t1) / <span class="number">1e6</span>d, response.headers()));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令有下几种：</p><ol><li>Public指示响应可被任何缓存区缓存。</li><li>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。</li><li>no-cache指示请求或响应消息不能缓存</li><li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li><li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</li><li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</li><li>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">final</span> CacheControl.Builder builder = <span class="keyword">new</span> CacheControl.Builder();</div><div class="line">            builder.noCache();<span class="comment">//不使用缓存，全部走网络</span></div><div class="line">            builder.noStore();<span class="comment">//不使用缓存，也不存储缓存</span></div><div class="line">            builder.onlyIfCached();<span class="comment">//只使用缓存</span></div><div class="line">            builder.noTransform();<span class="comment">//禁止转码</span></div><div class="line">            builder.maxAge(<span class="number">10</span>, TimeUnit.MILLISECONDS);<span class="comment">//指示客户机可以接收生存期不大于指定时间的响应。</span></div><div class="line">            builder.maxStale(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//指示客户机可以接收超出超时期间的响应消息</span></div><div class="line">            builder.minFresh(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</span></div><div class="line">            CacheControl cache = builder.build();<span class="comment">//cacheControl</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">OkHttpClient.Builder newBuilder = mOkHttpClient.newBuilder();</div><div class="line">         newBuilder.addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request request = chain.request();</div><div class="line">                <span class="keyword">boolean</span> connected = NetworkUtil.isConnected(context);</div><div class="line">                <span class="keyword">if</span> (!connected) &#123;</div><div class="line">                    request = request.newBuilder().cacheControl(CacheControl.FORCE_CACHE).build();</div><div class="line">                &#125;</div><div class="line">                Response response = chain.proceed(request);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></li></ol><h3 id="在Request中添加Token的拦截器"><a href="#在Request中添加Token的拦截器" class="headerlink" title="在Request中添加Token的拦截器"></a>在Request中添加Token的拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Interceptor mTokenInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request originalRequest = chain.request();</div><div class="line">        <span class="keyword">if</span> (Your.sToken == <span class="keyword">null</span> || alreadyHasAuthorizationHeader(originalRequest)) &#123;</div><div class="line">            <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">        &#125;</div><div class="line">        Request authorised = originalRequest.newBuilder()</div><div class="line">            .header(<span class="string">"Authorization"</span>, Your.sToken)</div><div class="line">            .build();</div><div class="line">        <span class="keyword">return</span> chain.proceed(authorised);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Okhttp-返回请求获取cookie"><a href="#Okhttp-返回请求获取cookie" class="headerlink" title="Okhttp  返回请求获取cookie"></a>Okhttp  返回请求获取cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivedCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceivedCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      </div><div class="line">        Response originalResponse = chain.proceed(chain.request());</div><div class="line">        <span class="comment">//这里获取请求返回的cookie</span></div><div class="line">        <span class="keyword">if</span> (!originalResponse.headers(<span class="string">"Set-Cookie"</span>).isEmpty()) &#123;</div><div class="line">            <span class="keyword">final</span> StringBuffer cookieBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">            <span class="comment">//最近在学习RxJava,这里用了RxJava的相关API大家可以忽略,用自己逻辑实现即可.大家可以用别的方法保存cookie数据</span></div><div class="line">            Observable.from(originalResponse.headers(<span class="string">"Set-Cookie"</span>))</div><div class="line">                    .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                            String[] cookieArray = s.split(<span class="string">";"</span>);</div><div class="line">                            <span class="keyword">return</span> cookieArray[<span class="number">0</span>];</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String cookie)</span> </span>&#123;</div><div class="line">                            cookieBuffer.append(cookie).append(<span class="string">";"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">"cookie"</span>, Context.MODE_PRIVATE);</div><div class="line">            SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class="line">            editor.putString(<span class="string">"cookie"</span>, cookieBuffer.toString());</div><div class="line">            editor.commit();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> originalResponse;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="Okhttp-请求中添加cookie"><a href="#Okhttp-请求中添加cookie" class="headerlink" title="Okhttp 请求中添加cookie"></a>Okhttp 请求中添加cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> Request.Builder builder = chain.request().newBuilder();</div><div class="line">        SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">"cookie"</span>, Context.MODE_PRIVATE);</div><div class="line"><span class="comment">//最近在学习RxJava,这里用了RxJava的相关API大家可以忽略,用自己逻辑实现即可  </span></div><div class="line">                Observable.just(sharedPreferences.getString(<span class="string">"cookie"</span>, <span class="string">""</span>))</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String cookie)</span> </span>&#123;</div><div class="line">                        <span class="comment">//添加cookie</span></div><div class="line">                        builder.addHeader(<span class="string">"Cookie"</span>, cookie);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        <span class="keyword">return</span> chain.proceed(builder.build());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官方WIKI&lt;a href=&quot;https://github.com/square/okhttp/wiki/HTTPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;常见的运用方式&quot;&gt;&lt;a href=&quot;#常见的运用方式&quot; class=&quot;headerlink&quot; title=&quot;常见的运用方式:&quot;&gt;&lt;/a&gt;常见的运用方式:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一般的get请求&lt;/li&gt;
&lt;li&gt;一般的post请求&lt;/li&gt;
&lt;li&gt;基于Http的文件上传&lt;/li&gt;
&lt;li&gt;文件下载&lt;/li&gt;
&lt;li&gt;加载图片&lt;/li&gt;
&lt;li&gt;支持请求回调，直接返回对象、对象集合&lt;/li&gt;
&lt;li&gt;支持session的保持&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android进程保活进程</title>
    <link href="http://yoursite.com/2017/12/02/Android%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/12/02/Android进程保活进程/</id>
    <published>2017-12-02T15:51:20.399Z</published>
    <updated>2018-03-10T16:48:19.419Z</updated>
    
    <content type="html"><![CDATA[<p>Android 进程保活招式大全 [<a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653577617&amp;idx=1&amp;sn=623256a2ff94641036a6c9eea17baab8&amp;scene=1&amp;srcid=0812awptdQtemQXqufZJea3D%23rd" target="_blank" rel="external">Android 进程保活招式大全</a>]<br>目前市面上的应用，貌似除了微信和手Q都会比较担心被用户或者系统（厂商）杀死问题。本文对 Android 进程拉活进行一个总结。</p><a id="more"></a><p>Android 进程拉活包括两个层面：<br>A. 提供进程优先级，降低进程被杀死的概率<br>本文下面就从这两个方面做一下总结。</p><ol><li>进程的优先级<br>Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要清除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是清除重要性稍低一级的进程，依此类推，以回收系统资源。<br>进程的重要性，划分5级：</li><li>前台进程(Foreground process)</li><li>可见进程(Visible process)</li><li>服务进程(Service process)</li><li>后台进程(Background process)</li><li>空进程(Empty process)</li></ol><p>1.1. 前台进程 —— Foreground process</p><p>用户当前操作所必需的进程。通常在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。<br>A. 拥有用户正在交互的 Activity（已调用 onResume()）<br>B. 拥有某个 Service，后者绑定到用户正在交互的 Activity<br>C. 拥有正在“前台”运行的 Service（服务已调用 startForeground()）<br>D. 拥有正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）<br>E. 拥有正执行其 onReceive() 方法的 BroadcastReceiver<br>1.2. 可见进程 —— Visible process</p><p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。<br>A. 拥有不在前台、但仍对用户可见的 Activity（已调用 onPause()）。<br>B. 拥有绑定到可见（或前台）Activity 的 Service<br>1.3. 服务进程 —— Service process</p><p>尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。<br>A. 正在运行 startService() 方法启动的服务，且不属于上述两个更高类别进程的进程。<br>1.4. 后台进程 —— Background process</p><p>后台进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU 列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。<br>A. 对用户不可见的 Activity 的进程（已调用 Activity的onStop() 方法）<br>1.5. 空进程 —— Empty process</p><p>保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。<br>A. 不含任何活动应用组件的进程<br>详情参见：<br><a href="http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html</a></p><ol><li>Android 进程回收策略</li></ol><p>Android 中对于内存的回收，主要依靠 Lowmemorykiller 来完成，是一种根据 OOM_ADJ 阈值级别触发相应力度的内存回收的机制。<br>关于 OOM_ADJ 的说明如下：</p><p>其中红色部分代表比较容易被杀死的 Android 进程（OOM_ADJ&gt;=4）,绿色部分表示不容易被杀死的 Android 进程，其他表示非 Android 进程（纯 Linux 进程）。在 Lowmemorykiller 回收内存时会根据进程的级别优先杀死 OOM_ADJ 比较大的进程，对于优先级相同的进程则进一步受到进程所占内存和进程存活时间的影响。<br>Android 手机中进程被杀死可能有如下情况：</p><p>综上，可以得出减少进程被杀死概率无非就是想办法提高进程优先级，减少进程在内存不足等情况下被杀死的概率。</p><ol><li>提升进程优先级的方案</li></ol><p>3.1. 利用 Activity 提升权限</p><p>3.1.1. 方案设计思想</p><p>监控手机锁屏解锁事件，在屏幕锁屏时启动1个像素的 Activity，在用户解锁时将 Activity 销毁掉。注意该 Activity 需设计成用户无感知。<br>通过该方案，可以使进程的优先级在屏幕锁屏时间由4提升为最高优先级1。<br>3.1.2. 方案适用范围</p><p>适用场景： 本方案主要解决第三方应用及系统管理工具在检测到锁屏事件后一段时间（一般为5分钟以内）内会杀死后台进程，已达到省电的目的问题。<br>适用版本： 适用于所有的 Android 版本。<br>3.1.3. 方案具体实现</p><p>首先定义 Activity，并设置 Activity 的大小为1像素：</p><p>其次，从 AndroidManifest 中通过如下属性，排除 Activity 在 RecentTask 中的显示：</p><p>最后，控制 Activity 为透明：</p><p>Activity 启动与销毁时机的控制：</p><p>3.2. 利用 Notification 提升权限</p><p>3.2.1. 方案设计思想</p><p>Android 中 Service 的优先级为4，通过 setForeground 接口可以将后台 Service 设置为前台 Service，使进程的优先级由4提升为2，从而使进程的优先级仅仅低于用户当前正在交互的进程，与可见进程优先级一致，使进程被杀死的概率大大降低。<br>3.2.2. 方案实现挑战</p><p>从 Android2.3 开始调用 setForeground 将后台 Service 设置为前台 Service 时，必须在系统的通知栏发送一条通知，也就是前台 Service 与一条可见的通知时绑定在一起的。<br>对于不需要常驻通知栏的应用来说，该方案虽好，但却是用户感知的，无法直接使用。<br>3.2.3. 方案挑战应对措施</p><p>通过实现一个内部 Service，在 LiveService 和其内部 Service 中同时发送具有相同 ID 的 Notification，然后将内部 Service 结束掉。随着内部 Service 的结束，Notification 将会消失，但系统优先级依然保持为2。<br>3.2.4. 方案适用范围</p><p>适用于目前已知所有版本。<br>3.2.5. 方案具体实现</p><ol><li>进程死后拉活的方案</li></ol><p>4.1. 利用系统广播拉活</p><p>4.1.1. 方案设计思想</p><p>在发生特定系统事件时，系统会发出响应的广播，通过在 AndroidManifest 中“静态”注册对应的广播监听器，即可在发生响应事件时拉活。<br>常用的用于拉活的广播事件包括：</p><p>4.1.2. 方案适用范围</p><p>适用于全部 Android 平台。但存在如下几个缺点：<br>1） 广播接收器被管理软件、系统软件通过“自启管理”等功能禁用的场景无法接收到广播，从而无法自启。<br>2） 系统广播事件不可控，只能保证发生事件时拉活进程，但无法保证进程挂掉后立即拉活。<br>因此，该方案主要作为备用手段。<br>4.2. 利用第三方应用广播拉活</p><p>4.2.1. 方案设计思想</p><p>该方案总的设计思想与接收系统广播类似，不同的是该方案为接收第三方 Top 应用广播。<br>通过反编译第三方 Top 应用，如：手机QQ、微信、支付宝、UC浏览器等，以及友盟、信鸽、个推等 SDK，找出它们外发的广播，在应用中进行监听，这样当这些应用发出广播时，就会将我们的应用拉活。<br>4.2.2. 方案适用范围</p><p>该方案的有效程度除与系统广播一样的因素外，主要受如下因素限制：<br>1） 反编译分析过的第三方应用的多少<br>2） 第三方应用的广播属于应用私有，当前版本中有效的广播，在后续版本随时就可能被移除或被改为不外发。<br>这些因素都影响了拉活的效果。<br>4.3. 利用系统Service机制拉活</p><p>4.3.1. 方案设计思想</p><p>将 Service 设置为 START_STICKY，利用系统机制在 Service 挂掉后自动拉活：</p><p>4.3.2. 方案适用范围</p><p>如下两种情况无法拉活：</p><ol><li>Service 第一次被异常杀死后会在5秒内重启，第二次被杀死会在10秒内重启，第三次会在20秒内重启，一旦在短时间内 Service 被杀死达到5次，则系统不再拉起。</li><li>进程被取得 Root 权限的管理工具或系统工具通过 forestop 停止掉，无法重启。<br>4.4. 利用Native进程拉活</li></ol><p>4.4.1. 方案设计思想</p><p>主要思想：利用 Linux 中的 fork 机制创建 Native 进程，在 Native 进程中监控主进程的存活，当主进程挂掉后，在 Native 进程中立即对主进程进行拉活。<br>主要原理：在 Android 中所有进程和系统组件的生命周期受 ActivityManagerService 的统一管理。而且，通过 Linux 的 fork 机制创建的进程为纯 Linux 进程，其生命周期不受 Android 的管理。<br>4.4.2. 方案实现挑战</p><p>挑战一：在 Native 进程中如何感知主进程死亡。<br>要在 Native 进程中感知主进程是否存活有两种实现方式：</p><ol><li>在 Native 进程中通过死循环或定时器，轮训判断主进程是否存活，档主进程不存活时进行拉活。该方案的很大缺点是不停的轮询执行判断逻辑，非常耗电。</li><li>在主进程中创建一个监控文件，并且在主进程中持有文件锁。在拉活进程启动后申请文件锁将会被堵塞，一旦可以成功获取到锁，说明主进程挂掉，即可进行拉活。由于 Android 中的应用都运行于虚拟机之上，Java 层的文件锁与 Linux 层的文件锁是不同的，要实现该功能需要封装 Linux 层的文件锁供上层调用。<br>封装 Linux 文件锁的代码如下：</li></ol><p>Native 层中堵塞申请文件锁的部分代码：</p><p>挑战二：在 Native 进程中如何拉活主进程。<br>通过 Native 进程拉活主进程的部分代码如下，即通过 am 命令进行拉活。通过指定“—include-stopped-packages”参数来拉活主进程处于 forestop 状态的情况。</p><p>挑战三：如何保证 Native 进程的唯一。<br>从可扩展性和进程唯一等多方面考虑，将 Native 进程设计层 C/S 结构模式，主进程与 Native 进程通过 Localsocket 进行通信。在Native进程中利用 Localsocket 保证 Native 进程的唯一性，不至于出现创建多个 Native 进程以及 Native 进程变成僵尸进程等问题。</p><p>4.4.3. 方案适用范围</p><p>该方案主要适用于 Android5.0 以下版本手机。<br>该方案不受 forcestop 影响，被强制停止的应用依然可以被拉活，在 Android5.0 以下版本拉活效果非常好。<br>对于 Android5.0 以上手机，系统虽然会将native进程内的所有进程都杀死，这里其实就是系统“依次”杀死进程时间与拉活逻辑执行时间赛跑的问题，如果可以跑的比系统逻辑快，依然可以有效拉起。记得网上有人做过实验，该结论是成立的，在某些 Android 5.0 以上机型有效。<br>4.5. 利用 JobScheduler 机制拉活</p><p>4.5.1. 方案设计思想</p><p>Android5.0 以后系统对 Native 进程等加强了管理，Native 拉活方式失效。系统在 Android5.0 以上版本提供了 JobScheduler 接口，系统会定时调用该进程以使应用进行一些逻辑操作。<br>在本项目中，我对 JobScheduler 进行了进一步封装，兼容 Android5.0 以下版本。封装后 JobScheduler 接口的使用如下：</p><p>4.5.2. 方案适用范围</p><p>该方案主要适用于 Android5.0 以上版本手机。<br>该方案在 Android5.0 以上版本中不受 forcestop 影响，被强制停止的应用依然可以被拉活，在 Android5.0 以上版本拉活效果非常好。<br>仅在小米手机可能会出现有时无法拉活的问题。<br>4.6. 利用账号同步机制拉活</p><p>4.6.1. 方案设计思想</p><p>Android 系统的账号同步机制会定期同步账号进行，该方案目的在于利用同步机制进行进程的拉活。添加账号和设置同步周期的代码如下：</p><p>该方案需要在 AndroidManifest 中定义账号授权与同步服务。</p><p>4.6.2. 方案适用范围</p><p>该方案适用于所有的 Android 版本，包括被 forestop 掉的进程也可以进行拉活。<br>最新 Android 版本（Android N）中系统好像对账户同步这里做了变动，该方法不再有效。</p><ol><li>其他有效拉活方案</li></ol><p>经研究发现还有其他一些系统拉活措施可以使用，但在使用时需要用户授权，用户感知比较强烈。<br>这些方案包括：</p><ol><li>利用系统通知管理权限进行拉活</li><li>利用辅助功能拉活，将应用加入厂商或管理软件白名单。<br>这些方案需要结合具体产品特性来搞。<br>上面所有解释这些方案都是考虑的无 Root 的情况。<br>其他还有一些技术之外的措施，比如说应用内 Push 通道的选择：</li><li>国外版应用：接入 Google 的 GCM。</li><li>国内版应用：根据终端不同，在小米手机（包括 MIUI）接入小米推送、华为手机接入华为推送；其他手机可以考虑接入腾讯信鸽或极光推送与小米推送做 A/B Test。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 进程保活招式大全 [&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;amp;mid=2653577617&amp;amp;idx=1&amp;amp;sn=623256a2ff94641036a6c9eea17baab8&amp;amp;scene=1&amp;amp;srcid=0812awptdQtemQXqufZJea3D%23rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 进程保活招式大全&lt;/a&gt;]&lt;br&gt;目前市面上的应用，貌似除了微信和手Q都会比较担心被用户或者系统（厂商）杀死问题。本文对 Android 进程拉活进行一个总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android架构/MVP</title>
    <link href="http://yoursite.com/2017/06/12/Android%20%20-MVP/"/>
    <id>http://yoursite.com/2017/06/12/Android  -MVP/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2018-03-10T13:32:29.230Z</updated>
    
    <content type="html"><![CDATA[<p>#Android架构/MVP<br>不能直接继承基类 IBasePresenter IBaseView  创建xxxContract</p><a id="more"></a><h3 id="IBaseView"><a href="#IBaseView" class="headerlink" title="IBaseView"></a>IBaseView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示加载动画</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏加载</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示网络错误</div><div class="line">     * <span class="doctag">@param</span> onRetryListener 点击监听</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showNetError</span><span class="params">(EmptyLayout.OnRetryListener onRetryListener)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定生命周期</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">LifecycleTransformer&lt;T&gt; <span class="title">bindToLife</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="IBasePresnter"><a href="#IBasePresnter" class="headerlink" title="IBasePresnter"></a>IBasePresnter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseNewPresenter</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从网路中获取数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="LoginContract"><a href="#LoginContract" class="headerlink" title="LoginContract"></a>LoginContract</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ILoginView</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ILoginPresenter</span> <span class="keyword">extends</span> <span class="title">IBaseNewPresenter</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Android架构/MVP&lt;br&gt;不能直接继承基类 IBasePresenter IBaseView  创建xxxContract&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题(2)</title>
    <link href="http://yoursite.com/2017/05/05/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(2)/"/>
    <id>http://yoursite.com/2017/05/05/工作中遇到的问题(2)/</id>
    <published>2017-05-05T12:40:15.000Z</published>
    <updated>2018-03-08T02:27:41.835Z</updated>
    
    <content type="html"><![CDATA[<p> 设置viewpagerIndicatior的下划线的宽度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setIndicator</span><span class="params">(Context context, TabLayout tabs, <span class="keyword">int</span> leftDip, <span class="keyword">int</span> rightDip)</span> </span>&#123;</div><div class="line">       Class&lt;?&gt; tabLayout = tabs.getClass();</div><div class="line">       Field tabStrip = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           tabStrip = tabLayout.getDeclaredField(<span class="string">"mTabStrip"</span>);</div><div class="line">       &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       tabStrip.setAccessible(<span class="keyword">true</span>);</div><div class="line">       LinearLayout ll_tab = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ll_tab = (LinearLayout) tabStrip.get(tabs);</div><div class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> left = (<span class="keyword">int</span>) (getDisplayMetrics(context).density * leftDip);</div><div class="line">       <span class="keyword">int</span> right = (<span class="keyword">int</span>) (getDisplayMetrics(context).density * rightDip);</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ll_tab.getChildCount(); i++) &#123;</div><div class="line">           View child = ll_tab.getChildAt(i);</div><div class="line">           child.setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">           LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, LinearLayout.LayoutParams.MATCH_PARENT, <span class="number">1</span>);</div><div class="line">           params.leftMargin = left;</div><div class="line">           params.rightMargin = right;</div><div class="line">           child.setLayoutParams(params);</div><div class="line">           child.invalidate();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><a id="more"></a><p>Android键盘挡住输入框解决办法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftKeyboardUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏软键盘(只适用于Activity，不适用于Fragment)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideSoftKeyboard</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        View view = activity.getCurrentFocus();</div><div class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">            InputMethodManager inputMethodManager = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);</div><div class="line">            inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏软键盘(可用于Activity，Fragment)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideSoftKeyboard</span><span class="params">(Context context, List&lt;View&gt; viewList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewList == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (View v : viewList) &#123;</div><div class="line">            inputMethodManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 设置viewpagerIndicatior的下划线的宽度：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setIndicator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, TabLayout tabs, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftDip, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rightDip)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Class&amp;lt;?&amp;gt; tabLayout = tabs.getClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Field tabStrip = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           tabStrip = tabLayout.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;mTabStrip&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NoSuchFieldException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       tabStrip.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       LinearLayout ll_tab = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ll_tab = (LinearLayout) tabStrip.get(tabs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (getDisplayMetrics(context).density * leftDip);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (getDisplayMetrics(context).density * rightDip);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; ll_tab.getChildCount(); i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           View child = ll_tab.getChildAt(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.setPadding(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           LinearLayout.LayoutParams params = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinearLayout.LayoutParams(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, LinearLayout.LayoutParams.MATCH_PARENT, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           params.leftMargin = left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           params.rightMargin = right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.setLayoutParams(params);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.invalidate();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术选择</title>
    <link href="http://yoursite.com/2017/05/03/%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E7%82%B9%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2017/05/03/项目技术点选择/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2017-05-03T12:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><ol><li><p>Rxjava2</p></li><li><p>butterknife</p></li><li><p>rxandroid 用于Android的Rxjava绑定库</p></li><li><p>RxBinding：配合Rxjava处理控件异步调用</p><a id="more"></a></li><li><p>RxLifecycle：防止RxJava中subscription导致内存泄漏</p></li><li><p>RxPermissions：基于RxJava开发的用于帮助在Android 6.0中处理运行时权限检测</p></li><li><p>retrofit：目前最好用的网络通讯库，应该都用过吧</p></li><li><p>glide 能够很好的和activity进行生命周期绑定，减少内存溢出的风险</p></li><li><p>recyclerview-animators：RecyclerView的动画库，内置了非常多的动画效果</p></li><li><p>CircleImageView：</p></li><li><p>PhotoView：可根据手势进行缩放的图像库，这个也很常见</p></li><li><p>NumberProgressBar：性感的数字进度条</p></li><li><p>ijkplayer</p></li><li><p>Ormlite</p></li><li><p>Okgo下载</p></li><li><p>Luban压缩</p></li><li><p>BaseRecyclerViewAdapterHelper</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术选择&quot;&gt;&lt;a href=&quot;#技术选择&quot; class=&quot;headerlink&quot; title=&quot;技术选择&quot;&gt;&lt;/a&gt;技术选择&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Rxjava2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;butterknife&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rxandroid 用于Android的Rxjava绑定库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RxBinding：配合Rxjava处理控件异步调用&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LayoutInflater</title>
    <link href="http://yoursite.com/2017/05/03/2016:7:10%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/03/2016:7:10学习笔记/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2018-03-10T13:50:20.064Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>获取LayoutInflater 的两种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LayoutInflater inflater = getLayoutInflater()；</div><div class="line">LayoutInflater inflater = (LayoutInflater)</div><div class="line">mContext.getSystemService(LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></li><li><p>设置全屏的两种方法,代码设置</p><p>这行代码必须设置在setConentView(R.layout.main) 之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,   WindowManager.LayoutParams. FLAG_FULLSCREEN);</div></pre></td></tr></table></figure></li><li><p>布局文件设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android :themen=<span class="string">"@android:style/Theme.NoTitleBar.Fullscreen"</span></div></pre></td></tr></table></figure><a id="more"></a></li><li><p>[x] <a href="http://blog.csdn.net/lmj623565791/article/details/51339751" target="_blank" rel="external">巧用ViewPager 打造不一样的广告轮播切换效果</a></p><pre><code>总结:- viewpager 要实现显示多个条目 需要设置viewpager的外层的布局文件和viewpager都要设置为false </code></pre></li></ul><pre><code>    设置相应的属性即可    设置viewpager的移动动画    android:clipChildren=&quot;false&quot;    viewPager.setPageTransformer- 实现透明   实现 AlphaPageTransformer implements ViewPager.PageTransformer    调用 viewPager.setPageTransformer(new AlphaPageTransformer());  ​  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> mMinAlpha = DEFAULT_MIN_ALPHA;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTransform</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">    &#123; </div><div class="line">        view.setAlpha(mMinAlpha);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-1,1]</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>) <span class="comment">//[0，-1]</span></div><div class="line">        &#123; </div><div class="line">            <span class="keyword">float</span> factor = mMinAlpha + (<span class="number">1</span> - mMinAlpha) * (<span class="number">1</span> + position);</div><div class="line">            view.setAlpha(factor);</div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//[1，0]</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">float</span> factor = mMinAlpha + (<span class="number">1</span> - mMinAlpha) * (<span class="number">1</span> - position);</div><div class="line">            view.setAlpha(factor);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">        view.setAlpha(mMinAlpha);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>- 实现缩小  &gt; view.setSacleX();  &gt;  &gt; view.setScaleY();  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoomOutPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.70f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line">        <span class="keyword">int</span> pageHeight = view.getHeight();</div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            view.setAlpha(MIN_ALPHA);</div><div class="line">            view.setScaleX(MIN_SCALE);</div><div class="line">            view.setScaleY(MIN_SCALE);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div><div class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</div><div class="line">                view.setScaleX(<span class="number">1</span> + <span class="number">0.3f</span> * position);</div><div class="line">                view.setScaleY(<span class="number">1</span> + <span class="number">0.3f</span> * position);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                view.setTranslationX(-horzMargin + vertMargin / <span class="number">2</span>);</div><div class="line"></div><div class="line">                view.setScaleX(<span class="number">1</span> - <span class="number">0.3f</span> * position);</div><div class="line">                view.setScaleY(<span class="number">1</span> - <span class="number">0.3f</span> * position);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line"></div><div class="line">            <span class="comment">// Fade the page relative to its size.</span></div><div class="line">            view.setAlpha(MIN_ALPHA + (scaleFactor - MIN_SCALE) / (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - MIN_ALPHA));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            view.setScaleX(MIN_SCALE);</div><div class="line">            view.setScaleY(MIN_SCALE);</div><div class="line">            view.setAlpha(MIN_ALPHA);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>  ​- 实现旋转  &gt; view.setPivotX();  &gt;  &gt; view.setPivotY();  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_MAX_ROTATE = <span class="number">15.0f</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> mMaxRotate = DEFAULT_MAX_ROTATE;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTransform</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">        <span class="comment">// This page is way off-screen to the left.  </span></div><div class="line">        view.setRotation(mMaxRotate * -<span class="number">1</span>);</div><div class="line">        view.setPivotX(view.getWidth());</div><div class="line">        view.setPivotY(view.getHeight());</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-1,1]  </span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>)<span class="comment">//[-1，0]</span></div><div class="line">        &#123;</div><div class="line">            view.setPivotX(view.getWidth() * (<span class="number">0.5f</span> + <span class="number">0.5f</span> * (-position)));</div><div class="line">            view.setPivotY(view.getHeight());</div><div class="line">            view.setRotation(mMaxRotate * position);</div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//[0,1]</span></div><div class="line">        &#123;</div><div class="line">            view.setPivotX(view.getWidth() * <span class="number">0.5f</span> * (<span class="number">1</span> - position));</div><div class="line">            view.setPivotY(view.getHeight());</div><div class="line">            view.setRotation(mMaxRotate * position);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123; <span class="comment">// (1,+Infinity]  </span></div><div class="line">        <span class="comment">// This page is way off-screen to the right.  </span></div><div class="line">        view.setRotation(mMaxRotate);</div><div class="line">        view.setPivotX(view.getWidth() * <span class="number">0</span>);</div><div class="line">        view.setPivotY(view.getHeight());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></code></pre><ul><li><p>[x] <a href="http://blog.csdn.net/lmj623565791/article/details/51503977" target="_blank" rel="external">Android 探究 LayoutInflater setFactory</a></p><pre><code>  总结：- 可以获取相关的属性  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">LayoutInflaterCompat.setFactory(LayoutInflater.from(<span class="keyword">this</span>), <span class="keyword">new</span> LayoutInflaterFactory()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span></span></div><div class="line">            &#123;</div><div class="line">                Log.e(TAG, <span class="string">"name = "</span> + name);</div><div class="line">                <span class="keyword">int</span> n = attrs.getAttributeCount();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">                &#123;</div><div class="line">                    Log.e(TAG, attrs.getAttributeName(i) + <span class="string">" , "</span> + attrs.getAttributeValue(i));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>- 可以进行相关的替换 将xml中的相关的TextView 替换为自定义的TextView<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (name.equals(<span class="string">"TextView"</span>))</div><div class="line">&#123;</div><div class="line">    MyTextView view = <span class="keyword">new</span> com.zhy.MyTextView(context,attrs);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>- 获取字体<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (typeface == <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">        typeface = Typeface.createFromAsset(getAssets(), <span class="string">"hwxk.ttf"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//设置相应的字体</span></div><div class="line"> <span class="keyword">if</span> ( view!= <span class="keyword">null</span> &amp;&amp; (view <span class="keyword">instanceof</span> TextView))</div><div class="line">      &#123;</div><div class="line">                ((TextView) view).setTypeface(typeface);</div><div class="line">      &#125;</div></pre></td></tr></table></figure></code></pre></li><li><p>看Android相关的书籍（一个小时）</p><ul><li>[ ] Android 群英会</li></ul></li><li><p>写代码</p></li><li><p>学习总结</p><p>  其他：</p><ul><li></li></ul></li><li><p>未解决的问题</p><ol><li>笔记代码应该整体对齐的方式</li><li>笔记模板的创建</li></ol><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取LayoutInflater 的两种方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LayoutInflater inflater = getLayoutInflater()；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LayoutInflater inflater = (LayoutInflater)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mContext.getSystemService(LAYOUT_INFLATER_SERVICE);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置全屏的两种方法,代码设置&lt;/p&gt;
&lt;p&gt;这行代码必须设置在setConentView(R.layout.main) 之前&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;requestWindowFeature(Window.FEATURE_NO_TITLE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,   WindowManager.LayoutParams. FLAG_FULLSCREEN);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布局文件设置&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android :themen=&lt;span class=&quot;string&quot;&gt;&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
