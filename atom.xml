<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>党学义的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-08T02:44:06.869Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>dangxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 设计模式-观察者模式</title>
    <link href="http://yoursite.com/2018/03/08/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/08/Android-设计模式-观察者模式/</id>
    <published>2018-03-08T02:37:55.000Z</published>
    <updated>2018-03-08T02:44:06.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。<br>结构图</p><a id="more"></a><p><img src="Android%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/73B1C5D6-087A-4E94-947A-E5DD6CC067BE.png" alt=""></p><ol><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ol><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 更新方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinUser</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">// 微信用户名</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeixinUser</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(name + <span class="string">"-"</span> + message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加订阅者</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除订阅者</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知订阅者更新消息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//实现</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">//储存订阅公众号的微信用户</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserlist = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        weixinUserlist.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        weixinUserlist.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer observer : weixinUserlist) &#123;</div><div class="line">            observer.update(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubscriptionSubject mSubscriptionSubject=<span class="keyword">new</span> SubscriptionSubject();</div><div class="line">        <span class="comment">//创建微信用户</span></div><div class="line">        WeixinUser user1=<span class="keyword">new</span> WeixinUser(<span class="string">"杨影枫"</span>);</div><div class="line">        WeixinUser user2=<span class="keyword">new</span> WeixinUser(<span class="string">"月眉儿"</span>);</div><div class="line">        WeixinUser user3=<span class="keyword">new</span> WeixinUser(<span class="string">"紫轩"</span>);</div><div class="line">        <span class="comment">//订阅公众号</span></div><div class="line">        mSubscriptionSubject.attach(user1);</div><div class="line">        mSubscriptionSubject.attach(user2);</div><div class="line">        mSubscriptionSubject.attach(user3);</div><div class="line">        <span class="comment">//公众号更新发出消息给订阅的微信用户</span></div><div class="line">        mSubscriptionSubject.notify(<span class="string">"专栏更新了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。&lt;br&gt;结构图&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 基础-Fragment</title>
    <link href="http://yoursite.com/2018/02/01/Android-%E5%9F%BA%E7%A1%80-Fragment/"/>
    <id>http://yoursite.com/2018/02/01/Android-基础-Fragment/</id>
    <published>2018-02-01T02:47:21.000Z</published>
    <updated>2018-03-08T02:51:40.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四大组件-Fragment"><a href="#四大组件-Fragment" class="headerlink" title="四大组件/Fragment"></a>四大组件/Fragment</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>引入整个support-v4库，则<br><code>compile &#39;com.android.support:support-v4:24.2.1&#39;</code>，<br>如果只想引入support-fragment库，则<br><code>com.android.support:support-fragment:24.2.1</code>。<br>Fragment是依赖于Activity的，不能独立存在的。</p><a id="more"></a><ul><li>一个Activity里可以有多个Fragment。</li><li>一个Fragment可以被多个Activity重用。</li><li>Fragment有自己的生命周期，并能接收输入事件。</li><li>我们能在Activity运行时动态地添加或删除Fragment。</li></ul><h3 id="Fragment-核心类"><a href="#Fragment-核心类" class="headerlink" title="Fragment 核心类"></a>Fragment 核心类</h3><ol><li>Fragment：Fragment的基类，任何创建的Fragment都需要继承该类.</li><li>FragmentManager：管理和维护Fragment。他是抽象类，具体的实现类是FragmentManagerImpl.</li><li>FragmentTransaction：对Fragment的添加、删除等操作都需要通过事务方式进行。他是抽象类，具体的实现类是BackStackRecord。</li><li>Fragment有很多可以复写的方法，其中最常用的就是onCreateView()，该方法返回Fragment的UI布局，需要注意的是inflate()的第三个参数是false，因为在Fragment内部实现中，会把该布局添加到container中，如果设为true，那么就会重复做两次添加，则会抛如下异常：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child&apos;s parent first.</div></pre></td></tr></table></figure><h3 id="ViewPager-Fragment相关"><a href="#ViewPager-Fragment相关" class="headerlink" title="ViewPager+Fragment相关"></a>ViewPager+Fragment相关</h3><ol><li>ViewPager是support v4库中提供界面滑动的类，继承自ViewGroup。PagerAdapter是ViewPager的适配器类，为ViewPager提供界面。但是一般来说，通常都会使用PagerAdapter的两个子类：FragmentPagerAdapter和FragmentStatePagerAdapter作为ViewPager的适配器，他们的特点是界面是Fragment。</li></ol><blockquote><p>在support v13和support v4中都提供了FragmentPagerAdapter和FragmentStatePagerAdapter，区别在于：support v13中使用android.app.Fragment，而support v4使用android.support.v4.app.Fragment。一般都使用support v4中的FragmentPagerAdapter和FragmentStatePagerAdapter。  </p></blockquote><ol><li>FragmentPagerAdapter和FragmentStatePagerAdapter需要重写的方法都一样，常见的重写方法如下：</li></ol><ul><li>public FragmentPagerAdapter(FragmentManager fm): 构造函数，参数为FragmentManager。如果是嵌套Fragment场景，子 PagerAdapter的参数传入getChildFragmentManager()。</li><li>Fragment getItem(int position): 返回第position位置的Fragment，必须重写。</li><li>int getCount(): 返回ViewPager的页数，必须重写。</li><li>Object instantiateItem(ViewGroup container, int position): container是ViewPager对象，返回第position位置的Fragment。</li><li>void destroyItem(ViewGroup container, int position, Object object): container是ViewPager对象，object是Fragment对象。</li><li>getItemPosition(Object object): object是Fragment对象，如果返回POSITION_UNCHANGED，则表示当前Fragment不刷新，如果返回POSITION_NONE，则表示当前Fragment需要调用destroyItem()和instantiateItem()进行销毁和重建。 默认情况下返回POSITION_UNCHANGED。</li></ul><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><ol><li>懒加载主要用于ViewPager且每页是Fragment的情况，场景为微信主界面，底部有4个tab，当滑到另一个tab时，先显示”正在加载”，过一会才会显示正常界面。</li><li>默认情况，ViewPager会缓存当前页和左右相邻的界面。实现懒加载的主要原因是：用户没进入的界面需要有一系列的网络、数据库等耗资源、耗时的操作，预先做这些数据加载是不必要的。</li><li>这里懒加载的实现思路是：用户不可见的界面，只初始化UI，但是不会做任何数据加载。等滑到该页，才会异步做数据加载并更新UI。</li><li>这里就实现类似微信那种效果，整个UI布局为：底部用PagerBottomTabStrip(<a href="https://github.com/tyzlmjj/PagerBottomTabStrip)项目实现，上面是ViewPager，使用FragmentPagerAdapter。逻辑为：当用户滑到另一个界面，首先会显示正在加载，等数据加载完毕后（这里用睡眠1秒钟代替）显示正常界面。" target="_blank" rel="external">https://github.com/tyzlmjj/PagerBottomTabStrip)项目实现，上面是ViewPager，使用FragmentPagerAdapter。逻辑为：当用户滑到另一个界面，首先会显示正在加载，等数据加载完毕后（这里用睡眠1秒钟代替）显示正常界面。</a></li><li>ViewPager默认缓存左右相邻界面，为了避免不必要的重新数据加载（重复调用onCreateView()），因为有4个tab，因此将离线缓存的半径设置为3，即setOffscreenPageLimit(3)。</li><li>懒加载主要依赖Fragment的setUserVisibleHint(boolean isVisible)方法，当Fragment变为可见时，会调用setUserVisibleHint(true)；当Fragment变为不可见时，会调用setUserVisibleHint(false)，且该方法调用时机：</li></ol><ul><li>onAttach()之前，调用setUserVisibleHint(false)。</li><li>onCreateView()之前，如果该界面为当前页，则调用setUserVisibleHint(true)，否则调用setUserVisibleHint(false)。</li><li>界面变为可见时，调用setUserVisibleHint(true)。</li><li>界面变为不可见时，调用setUserVisibleHint(false)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;    <span class="keyword">private</span> View mRootView;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsInited;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsPrepared;    </div><div class="line">  <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        mRootView = inflater.inflate(R.layout.fragment_lazy, container, <span class="keyword">false</span>);</div><div class="line">        mIsPrepared = <span class="keyword">true</span>;</div><div class="line">        lazyLoad();</div><div class="line">            <span class="keyword">return</span> mRootView;</div><div class="line">    &#125;</div><div class="line">            </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getUserVisibleHint() &amp;&amp; mIsPrepared &amp;&amp; !mIsInited) &#123; </div><div class="line">               <span class="comment">//异步初始化，在初始化后显示正常UI</span></div><div class="line">            loadData();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">               </div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">new</span> Thread() &#123;</div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//1. 加载数据</span></div><div class="line">                <span class="comment">//2. 更新UI</span></div><div class="line">                <span class="comment">//3. mIsInited = true</span></div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;   </div><div class="line">   </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123; </div><div class="line">           <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">            <span class="keyword">if</span> (isVisibleToUser) &#123;</div><div class="line">            lazyLoad();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyFragment <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> LazyFragment();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在Fragment中有两个变量控制是否需要做数据加载：</p><ol><li>mIsPrepared：表示UI是否准备好，因为数据加载后需要更新UI，如果UI还没有inflate，就不需要做数据加载，因为setUserVisibleHint()会在onCreateView()之前调用一次，如果此时调用，UI还没有inflate，因此不能加载数据。</li><li>mIsInited：表示是否已经做过数据加载，如果做过了就不需要做了。因为setUserVisibleHint(true)在界面可见时都会调用，如果滑到该界面做过数据加载后，滑走，再滑回来，还是会调用setUserVisibleHint(true)，此时由于mIsInited=true，因此不会再做一遍数据加载。</li><li>lazyLoad()：懒加载的核心类，在该方法中，只有界面可见（getUserVisibleHint()==true）、UI准备好（mIsPrepared==true）<br>过去没做过数据加载（mIsInited==false）时，才需要调loadData()做数据加载，数据加载做完后把mIsInited置为true。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四大组件-Fragment&quot;&gt;&lt;a href=&quot;#四大组件-Fragment&quot; class=&quot;headerlink&quot; title=&quot;四大组件/Fragment&quot;&gt;&lt;/a&gt;四大组件/Fragment&lt;/h2&gt;&lt;h3 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h3&gt;&lt;p&gt;引入整个support-v4库，则&lt;br&gt;&lt;code&gt;compile &amp;#39;com.android.support:support-v4:24.2.1&amp;#39;&lt;/code&gt;，&lt;br&gt;如果只想引入support-fragment库，则&lt;br&gt;&lt;code&gt;com.android.support:support-fragment:24.2.1&lt;/code&gt;。&lt;br&gt;Fragment是依赖于Activity的，不能独立存在的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android-okhttp的基本用法</title>
    <link href="http://yoursite.com/2017/12/03/Android-okhttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/03/Android-okhttp的基本用法/</id>
    <published>2017-12-02T17:13:53.731Z</published>
    <updated>2018-03-08T02:23:46.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-okhttp的基本用法"><a href="#Android-okhttp的基本用法" class="headerlink" title="Android-okhttp的基本用法"></a>Android-okhttp的基本用法</h1><blockquote><p>官方WIKI地址<a href="https://github.com/square/okhttp/wiki/HTTPS" target="_blank" rel="external">地址</a></p></blockquote><h3 id="运用"><a href="#运用" class="headerlink" title="运用:"></a>运用:</h3><ol><li>一般的get请求</li><li>一般的post请求</li><li>基于Http的文件上传</li><li>文件下载</li><li>加载图片</li><li>支持请求回调，直接返回对象、对象集合</li><li>支持session的保持</li></ol><a id="more"></a><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖:"></a>添加依赖:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></div></pre></td></tr></table></figure><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求:"></a>GET 请求:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建okHttpClient对象</span></div><div class="line">OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"><span class="comment">//创建一个Request</span></div><div class="line"><span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(<span class="string">"https://github.com/hongyangAndroid"</span>)</div><div class="line">                .build();</div><div class="line"><span class="comment">//以通过Request.Builder设置更多的参数比如：header、method</span></div><div class="line"><span class="comment">//new call</span></div><div class="line">Call call = mOkHttpClient.newCall(request); </div><div class="line"><span class="comment">//请求加入调度</span></div><div class="line">call.enqueue(<span class="keyword">new</span> Callback()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span></span></div><div class="line">            &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException</span></div><div class="line">            &#123;</div><div class="line">                    <span class="comment">//String htmlStr =  response.body().string();</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Request request = buildMultipartFormRequest(</div><div class="line">        url, <span class="keyword">new</span> File[]&#123;file&#125;, <span class="keyword">new</span> String[]&#123;fileKey&#125;, <span class="keyword">null</span>);</div><div class="line">FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();   </div><div class="line">builder.add(<span class="string">"username"</span>,<span class="string">"张鸿洋"</span>);</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                   .url(url)</div><div class="line">                .post(builder.build())</div><div class="line">                .build();</div><div class="line"> mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback()&#123;&#125;);</div></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">File file = new File(Environment.getExternalStorageDirectory(), "balabala.mp4");</div><div class="line"></div><div class="line">RequestBody fileBody = RequestBody.create(MediaType.parse("application/octet-stream"), file);</div><div class="line"></div><div class="line">RequestBody requestBody = new MultipartBuilder()</div><div class="line">     .type(MultipartBuilder.FORM)</div><div class="line">     .addPart(Headers.of(</div><div class="line">          "Content-Disposition", </div><div class="line">              "form-data; name=\"username\""), </div><div class="line">          RequestBody.create(null, "张鸿洋"))</div><div class="line">     .addPart(Headers.of(</div><div class="line">         "Content-Disposition", </div><div class="line">         "form-data; name=\"mFile\"; </div><div class="line">         filename=\"wjd.mp4\""), fileBody)</div><div class="line">     .build();</div><div class="line"></div><div class="line">Request request = new Request.Builder()</div><div class="line">    .url("http://192.168.1.103:8080/okHttpServer/fileUpload")</div><div class="line">    .post(requestBody)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Call call = mOkHttpClient.newCall(request);</div><div class="line">call.enqueue(new Callback()</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="Okhttp的简单封装"><a href="#Okhttp的简单封装" class="headerlink" title="Okhttp的简单封装"></a>Okhttp的简单封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        mOkHttpClient.setConnectTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 该不会开启异步线程。</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Response <span class="title">execute</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        <span class="keyword">return</span> mOkHttpClient.newCall(request).execute();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启异步线程访问网络</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@param</span> responseCallback</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Request request, Callback responseCallback)</span></span>&#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(responseCallback);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Request request)</span></span>&#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response arg0)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request arg0, IOException arg1)</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringFromServer</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</div><div class="line">        Response response = execute(request);</div><div class="line">        <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">            String responseUrl = response.body().string();</div><div class="line">            <span class="keyword">return</span> responseUrl;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET_NAME = <span class="string">"UTF-8"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里使用了HttpClinet的API。只是为了方便</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatParams</span><span class="params">(List&lt;BasicNameValuePair&gt; params)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> URLEncodedUtils.format(params, CHARSET_NAME);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为HttpGet 的 url 方便的添加多个name value 参数。</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">attachHttpGetParams</span><span class="params">(String url, List&lt;BasicNameValuePair&gt; params)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + formatParams(params);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为HttpGet 的 url 方便的添加1个name value 参数。</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">attachHttpGetParam</span><span class="params">(String url, String name, String value)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + name + <span class="string">"="</span> + value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GET-同步请求"><a href="#GET-同步请求" class="headerlink" title="GET 同步请求"></a>GET 同步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"> </div><div class="line">    Response response = client.newCall(request).execute();</div><div class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"> </div><div class="line">    Headers responseHeaders = response.headers();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">      System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GET-异步请求"><a href="#GET-异步请求" class="headerlink" title="GET 异步请求"></a>GET 异步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"> </div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, Throwable throwable)</span> </span>&#123;</div><div class="line">        throwable.printStackTrace();</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">      <span class="meta">@Override</span> </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line">        Headers responseHeaders = response.headers();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">          System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">        &#125;</div><div class="line">        System.out.println(response.body().string());</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">client.setConnectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">client.setWriteTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">client.setReadTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div></pre></td></tr></table></figure><h3 id="Okhttp的拦截器"><a href="#Okhttp的拦截器" class="headerlink" title="Okhttp的拦截器"></a>Okhttp的拦截器</h3><p>注册一个应用拦截器通过 OkHttpClient.Builder调用 addInterceptor():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">    .addInterceptor(<span class="keyword">new</span> LoggingInterceptor())</div><div class="line">    .build();</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">    .url(<span class="string">"http://www.publicobject.com/helloworld.txt"</span>)</div><div class="line">    .header(<span class="string">"User-Agent"</span>, <span class="string">"OkHttp Example"</span>)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Response response = client.newCall(request).execute();</div><div class="line">response.body().close();</div><div class="line"><span class="comment">// .addNetworkInterceptor(new LoggingInterceptor())</span></div></pre></td></tr></table></figure></p><h3 id="LoggingInterceptor"><a href="#LoggingInterceptor" class="headerlink" title="LoggingInterceptor"></a>LoggingInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request request = chain.request();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line">    logger.info(String.format(<span class="string">"Sending request %s on %s%n%s"</span>,</div><div class="line">        request.url(), chain.connection(), request.headers()));</div><div class="line"></div><div class="line">    Response response = chain.proceed(request);</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    logger.info(String.format(<span class="string">"Received response for %s in %.1fms%n%s"</span>,</div><div class="line">        response.request().url(), (t2 - t1) / <span class="number">1e6</span>d, response.headers()));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令有下几种：</p><ol><li>Public指示响应可被任何缓存区缓存。</li><li>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。</li><li>no-cache指示请求或响应消息不能缓存</li><li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li><li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</li><li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</li><li>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">final</span> CacheControl.Builder builder = <span class="keyword">new</span> CacheControl.Builder();</div><div class="line">            builder.noCache();<span class="comment">//不使用缓存，全部走网络</span></div><div class="line">            builder.noStore();<span class="comment">//不使用缓存，也不存储缓存</span></div><div class="line">            builder.onlyIfCached();<span class="comment">//只使用缓存</span></div><div class="line">            builder.noTransform();<span class="comment">//禁止转码</span></div><div class="line">            builder.maxAge(<span class="number">10</span>, TimeUnit.MILLISECONDS);<span class="comment">//指示客户机可以接收生存期不大于指定时间的响应。</span></div><div class="line">            builder.maxStale(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//指示客户机可以接收超出超时期间的响应消息</span></div><div class="line">            builder.minFresh(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</span></div><div class="line">            CacheControl cache = builder.build();<span class="comment">//cacheControl</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">OkHttpClient.Builder newBuilder = mOkHttpClient.newBuilder();</div><div class="line">         newBuilder.addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request request = chain.request();</div><div class="line">                <span class="keyword">boolean</span> connected = NetworkUtil.isConnected(context);</div><div class="line">                <span class="keyword">if</span> (!connected) &#123;</div><div class="line">                    request = request.newBuilder().cacheControl(CacheControl.FORCE_CACHE).build();</div><div class="line">                &#125;</div><div class="line">                Response response = chain.proceed(request);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></li></ol><h3 id="在Request中添加Token的拦截器"><a href="#在Request中添加Token的拦截器" class="headerlink" title="在Request中添加Token的拦截器"></a>在Request中添加Token的拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Interceptor mTokenInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request originalRequest = chain.request();</div><div class="line">        <span class="keyword">if</span> (Your.sToken == <span class="keyword">null</span> || alreadyHasAuthorizationHeader(originalRequest)) &#123;</div><div class="line">            <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">        &#125;</div><div class="line">        Request authorised = originalRequest.newBuilder()</div><div class="line">            .header(<span class="string">"Authorization"</span>, Your.sToken)</div><div class="line">            .build();</div><div class="line">        <span class="keyword">return</span> chain.proceed(authorised);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Okhttp-返回请求获取cookie"><a href="#Okhttp-返回请求获取cookie" class="headerlink" title="Okhttp  返回请求获取cookie"></a>Okhttp  返回请求获取cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivedCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceivedCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      </div><div class="line">        Response originalResponse = chain.proceed(chain.request());</div><div class="line">        <span class="comment">//这里获取请求返回的cookie</span></div><div class="line">        <span class="keyword">if</span> (!originalResponse.headers(<span class="string">"Set-Cookie"</span>).isEmpty()) &#123;</div><div class="line">            <span class="keyword">final</span> StringBuffer cookieBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">            <span class="comment">//最近在学习RxJava,这里用了RxJava的相关API大家可以忽略,用自己逻辑实现即可.大家可以用别的方法保存cookie数据</span></div><div class="line">            Observable.from(originalResponse.headers(<span class="string">"Set-Cookie"</span>))</div><div class="line">                    .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                            String[] cookieArray = s.split(<span class="string">";"</span>);</div><div class="line">                            <span class="keyword">return</span> cookieArray[<span class="number">0</span>];</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String cookie)</span> </span>&#123;</div><div class="line">                            cookieBuffer.append(cookie).append(<span class="string">";"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">"cookie"</span>, Context.MODE_PRIVATE);</div><div class="line">            SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class="line">            editor.putString(<span class="string">"cookie"</span>, cookieBuffer.toString());</div><div class="line">            editor.commit();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> originalResponse;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="Okhttp-请求中添加cookie"><a href="#Okhttp-请求中添加cookie" class="headerlink" title="Okhttp 请求中添加cookie"></a>Okhttp 请求中添加cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> Request.Builder builder = chain.request().newBuilder();</div><div class="line">        SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">"cookie"</span>, Context.MODE_PRIVATE);</div><div class="line"><span class="comment">//最近在学习RxJava,这里用了RxJava的相关API大家可以忽略,用自己逻辑实现即可  </span></div><div class="line">                Observable.just(sharedPreferences.getString(<span class="string">"cookie"</span>, <span class="string">""</span>))</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String cookie)</span> </span>&#123;</div><div class="line">                        <span class="comment">//添加cookie</span></div><div class="line">                        builder.addHeader(<span class="string">"Cookie"</span>, cookie);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        <span class="keyword">return</span> chain.proceed(builder.build());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-okhttp的基本用法&quot;&gt;&lt;a href=&quot;#Android-okhttp的基本用法&quot; class=&quot;headerlink&quot; title=&quot;Android-okhttp的基本用法&quot;&gt;&lt;/a&gt;Android-okhttp的基本用法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;官方WIKI地址&lt;a href=&quot;https://github.com/square/okhttp/wiki/HTTPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;运用&quot;&gt;&lt;a href=&quot;#运用&quot; class=&quot;headerlink&quot; title=&quot;运用:&quot;&gt;&lt;/a&gt;运用:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一般的get请求&lt;/li&gt;
&lt;li&gt;一般的post请求&lt;/li&gt;
&lt;li&gt;基于Http的文件上传&lt;/li&gt;
&lt;li&gt;文件下载&lt;/li&gt;
&lt;li&gt;加载图片&lt;/li&gt;
&lt;li&gt;支持请求回调，直接返回对象、对象集合&lt;/li&gt;
&lt;li&gt;支持session的保持&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="android ohhttp" scheme="http://yoursite.com/tags/android-ohhttp/"/>
    
  </entry>
  
  <entry>
    <title>Android 基础-RecyclerView</title>
    <link href="http://yoursite.com/2017/12/02/Android%20%E5%9F%BA%E7%A1%80-RecyclerView/"/>
    <id>http://yoursite.com/2017/12/02/Android 基础-RecyclerView/</id>
    <published>2017-12-02T15:50:05.547Z</published>
    <updated>2018-03-08T02:23:55.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RecyclerView基本概念"><a href="#RecyclerView基本概念" class="headerlink" title="RecyclerView基本概念:"></a>RecyclerView基本概念:</h3><p>RecyclerView是Android 5.0提出的新UI控件，位于support-v7包中，可以通过在build.gradle中添加<br><code>compile &#39;com.android.support:recyclerview-v7:24.2.1&#39;</code>导入。<br>RecyclerView的官方定义如下：<br>A flexible view for providing a limited window into a large data set.</p><a id="more"></a><p>RecyclerView 必知必会 [<a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578459&amp;idx=2&amp;sn=88e91636429e66b2c80874645478f32f&amp;chksm=84b3b6dcb3c43fcac11f5d8085b45ab4bdf2a148708b55659262a780000a6b7633eefc8404f8&amp;mpshare=1&amp;scene=1&amp;srcid=0105TDqechavWz0mSxgdssUN%23rd" target="_blank" rel="external">RecyclerView 必知必会</a>]</p><h3 id="RecyclerView的标准实现步骤如下："><a href="#RecyclerView的标准实现步骤如下：" class="headerlink" title="RecyclerView的标准实现步骤如下："></a>RecyclerView的标准实现步骤如下：</h3><ul><li>创建Adapter：创建一个继承RecyclerView.Adapter<vh>的Adapter类（VH是ViewHolder的类名），记为NormalAdapter。</vh></li><li>创建ViewHolder：在NormalAdapter中创建一个继承RecyclerView.ViewHolder的静态内部类，记为VH。ViewHolder的实现和ListView的ViewHolder实现几乎一样。</li><li>在NormalAdapter中实现：VH onCreateViewHolder(ViewGroup parent, int viewType): 映射Item Layout Id，创建VH并返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">需要注意的是在onCreateViewHolder()中，映射Layout必须为</div><div class="line">View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_1, parent, <span class="keyword">false</span>);</div><div class="line">而不能是：</div><div class="line">View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_1, <span class="keyword">null</span>);</div></pre></td></tr></table></figure><pre><code>* void onBindViewHolder(VH holder, int position): 为holder设置指定数据。* int getItemCount(): 返回Item的个数。</code></pre><p>可以看出，RecyclerView将ListView中getView()的功能拆分成了onCreateViewHolder()和onBindViewHolder()。<br>创建完Adapter，接着对RecyclerView进行设置，一般来说，需要为RecyclerView进行四大设置，也就是后文说的四大组成：</p><h3 id="Adapter-必选"><a href="#Adapter-必选" class="headerlink" title="Adapter(必选)"></a>Adapter(必选)</h3><p>为了创建一个RecyclerView的Adapter，每次我们都需要去做重复劳动，包括重写onCreateViewHolder(),getItemCount()、创建ViewHolder，并且实现过程大同小异，因此万能适配器出现了，他能通过以下方式快捷地创建一个Adapter<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">HomeAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span></div><div class="line">    &#123;</div><div class="line">     <span class="comment">//创建子项item的布局</span></div><div class="line">         <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span></span></div><div class="line">        &#123;</div><div class="line">            MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(LayoutInflater.from(</div><div class="line">                    HomeActivity.<span class="keyword">this</span>).inflate(R.layout.item_home, parent,</div><div class="line">                    <span class="keyword">false</span>));</div><div class="line">            <span class="keyword">return</span> holder;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//给控件设置数据</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span></span></div><div class="line">        &#123;</div><div class="line">            holder.tv.setText(mDatas.get(position));</div><div class="line">        &#125;</div><div class="line"> <span class="comment">//子项item的数量</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> mDatas.size();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">ViewHolder</span></span></div><div class="line">        &#123;</div><div class="line"></div><div class="line">            TextView tv;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View view)</span></span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">super</span>(view);</div><div class="line">                tv = (TextView) view.findViewById(R.id.id_num);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Layout-Manager-必选"><a href="#Layout-Manager-必选" class="headerlink" title="Layout Manager(必选)"></a>Layout Manager(必选)</h3><p>RecyclerView.LayoutManager吧，这是一个抽象类，好在系统提供了3个实现类：</p><ol><li>LinearLayoutManager 现行管理器，支持横向、纵向。</li><li>GridLayoutManager 网格布局管理器</li><li>StaggeredGridLayoutManager 瀑布就式布局管理器<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</div><div class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>));</div><div class="line"><span class="comment">//ListView形式上下滑动：</span></div><div class="line">mMain_recyclerview.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</div><div class="line"><span class="comment">//左右滑动：</span></div><div class="line">LinearLayoutManager magager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">magager.setOrientation(LinearLayoutManager.HORIZONTAL);</div><div class="line"><span class="comment">//Grid形式上下滑动：</span></div><div class="line">GridLayoutManager layoutManager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>);</div><div class="line"><span class="comment">//Grid形式左右滑动：</span></div><div class="line">GridLayoutManager layoutManager = <span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>, <span class="number">4</span>);</div><div class="line">layoutManager.setOrientation(GridLayoutManager.HORIZONTAL);</div><div class="line"><span class="comment">//瀑布流形式上下滑动：</span></div><div class="line">StaggeredGridLayoutManager layoutManager = newStaggeredGridLayoutManager(<span class="number">4</span>, StaggeredGridLayoutManager.VERTICAL);</div><div class="line"><span class="comment">//瀑布流形式左右滑动：</span></div><div class="line">StaggeredGridLayoutManager layoutManager = newStaggeredGridLayoutManager(<span class="number">4</span>, StaggeredGridLayoutManager.HORIZONTAL);</div></pre></td></tr></table></figure></li></ol><h3 id="Item-Decoration-可选，默认为空"><a href="#Item-Decoration-可选，默认为空" class="headerlink" title="Item Decoration(可选，默认为空)"></a>Item Decoration(可选，默认为空)</h3><p>mRecyclerView.addItemDecoration()<br>该方法的参数为RecyclerView.ItemDecoration，该类为抽象类，官方目前并没有提供默认的实现类<br>我们调用mRecyclerView.addItemDecoration()方法添加decoration的时候，RecyclerView在绘制的时候，去会绘制decorator，即调用该类的onDraw和onDrawOver方法，<br>onDraw方法先于drawChildren   绘制分割线。<br>onDrawOver在drawChildren之后，一般我们选择复写其中一个即可。<br>getItemOffsets 可以通过outRect.set()为每个Item设置一定的偏移量，主要用于绘制Decorator。设置分割线的宽、高。<br>首先看构造函数，构造函数中获得系统属性android:listDivider，该属性是一个Drawable对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            onDraw(c, parent);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            onDrawOver(c, parent);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</div><div class="line">                    parent);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><h3 id="Item-Animator-可选，默认为DefaultItemAnimator"><a href="#Item-Animator-可选，默认为DefaultItemAnimator" class="headerlink" title="Item Animator(可选，默认为DefaultItemAnimator)"></a>Item Animator(可选，默认为DefaultItemAnimator)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置item动画</span></div><div class="line">mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div></pre></td></tr></table></figure><h3 id="多布局"><a href="#多布局" class="headerlink" title="多布局"></a>多布局</h3><ol><li><p>实现多布局最核心的方法就是在Adapter中重写getItemViewType方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (mNewsBeanList.get(position).getThumbnail_pic_s03() == <span class="keyword">null</span>) &#123;        </div><div class="line">        <span class="keyword">return</span> IMAGE_ONLY_ONE;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;        </div><div class="line">        <span class="keyword">return</span> IMAGE_TWOORTHREE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在onCreateViewHolder方法中第二个参数对应的就是上面方法返回的值，我们根据值的不同，填充不同的布局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup viewGroup, <span class="keyword">int</span> viewType)</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (viewType == IMAGE_TWOORTHREE) &#123;</div><div class="line">        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.news_imagethree_item, viewGroup, <span class="keyword">false</span>);</div><div class="line">        ImageThreeViewHolder viewHolder = <span class="keyword">new</span> ImageThreeViewHolder(view);        </div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.news_imageonly_item, viewGroup, <span class="keyword">false</span>);</div><div class="line">        ImageOnlyOneViewHolder viewHolder = <span class="keyword">new</span> ImageOnlyOneViewHolder(view);        </div><div class="line">        <span class="keyword">return</span> viewHolder;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>不同的布局需要不同的ViewHolder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageThreeViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;    </div><div class="line">    <span class="keyword">private</span> TextView mTv_title;    </div><div class="line">    <span class="keyword">private</span> ImageView mIv_image01;    </div><div class="line">    <span class="keyword">private</span> ImageView mIv_image02;    </div><div class="line">    <span class="keyword">private</span> ImageView mIv_image03;    </div><div class="line">    <span class="keyword">private</span> TextView mTv_company;    </div><div class="line">    <span class="keyword">private</span> TextView mTv_time;    </div><div class="line">    <span class="keyword">private</span> View mItemView;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageThreeViewHolder</span><span class="params">(View itemView)</span> </span>&#123;        </div><div class="line">        <span class="keyword">super</span>(itemView);</div><div class="line">        mItemView = itemView;</div><div class="line">        mTv_title = itemView.findViewById(R.id.tv_title);</div><div class="line">        mIv_image01 = itemView.findViewById(R.id.iv_image01);</div><div class="line">        mIv_image02 = itemView.findViewById(R.id.iv_image02);</div><div class="line">        mIv_image03 = itemView.findViewById(R.id.iv_image03);</div><div class="line">        mTv_company = itemView.findViewById(R.id.tv_company);</div><div class="line">        mTv_time = itemView.findViewById(R.id.tv_time);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">     </div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageOnlyOneViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;    </div><div class="line">    <span class="keyword">private</span> View mItemView;    </div><div class="line">    <span class="keyword">private</span> TextView mTv_title;    </div><div class="line">    <span class="keyword">private</span> TextView mTv_company;    </div><div class="line">    <span class="keyword">private</span> TextView mTv_time;    </div><div class="line">    <span class="keyword">private</span> ImageView mIv_image01;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageOnlyOneViewHolder</span><span class="params">(View itemView)</span> </span>&#123;        </div><div class="line">        <span class="keyword">super</span>(itemView);</div><div class="line">        mItemView = itemView;</div><div class="line">        mTv_title = itemView.findViewById(R.id.tv_title);</div><div class="line">        mTv_company = itemView.findViewById(R.id.tv_company);</div><div class="line">        mTv_time = itemView.findViewById(R.id.tv_time);</div><div class="line">        mIv_image01 = itemView.findViewById(R.id.iv_image01);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>onBindViewHolder方法中的第一个参数对应不同的viewholder，我们通过判断，来进行每个元素的写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">ublic <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;    </div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ImageThreeViewHolder) &#123;</div><div class="line">        ((ImageThreeViewHolder) viewHolder).mTv_title.setText(mNewsBeanList.get(position).getTitle());</div><div class="line">        ((ImageThreeViewHolder) viewHolder).mTv_company.setText(mNewsBeanList.get(position).getAuthor_name());</div><div class="line">        ((ImageThreeViewHolder) viewHolder).mTv_time.setText(mNewsBeanList.get(position).getDate());</div><div class="line"></div><div class="line">        Glide.with(mContext).load(mNewsBeanList.get(position).getThumbnail_pic_s()).into(((ImageThreeViewHolder) viewHolder).mIv_image01);</div><div class="line">        Glide.with(mContext).load(mNewsBeanList.get(position).getThumbnail_pic_s02()).into(((ImageThreeViewHolder) viewHolder).mIv_image02);</div><div class="line">        Glide.with(mContext).load(mNewsBeanList.get(position).getThumbnail_pic_s03()).into(((ImageThreeViewHolder) viewHolder).mIv_image03);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ImageOnlyOneViewHolder) &#123;</div><div class="line">        ((ImageOnlyOneViewHolder) viewHolder).mTv_title.setText(mNewsBeanList.get(position).getTitle());</div><div class="line">        ((ImageOnlyOneViewHolder) viewHolder).mTv_company.setText(mNewsBeanList.get(position).getAuthor_name());</div><div class="line">        ((ImageOnlyOneViewHolder) viewHolder).mTv_time.setText(mNewsBeanList.get(position).getDate());</div><div class="line"></div><div class="line">        Glide.with(mContext).load(mNewsBeanList.get(position).getThumbnail_pic_s()).into(((ImageOnlyOneViewHolder) viewHolder).mIv_image01);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">    srRefresh.setColorSchemeResources(R.color.colorPrimary);</div><div class="line">    srRefresh.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">            refreshFruits();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshFruits</span><span class="params">()</span> </span>&#123;    </div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;            </div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;                </div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    initFruits();</div><div class="line">                    adapter.notifyDataSetChanged();</div><div class="line">                    srRefresh.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFruits</span><span class="params">()</span> </span>&#123;</div><div class="line">    fruitList.clear();    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">        Random random = <span class="keyword">new</span> Random();        </div><div class="line">        <span class="keyword">int</span> index = random.nextInt(fruits.length);</div><div class="line">        fruitList.add(fruits[index]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">recyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;            </div><div class="line">            <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);            </div><div class="line">            <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE) &#123;                </div><div class="line">                <span class="keyword">if</span> (adapter.isFadeTips() == <span class="keyword">false</span> &amp;&amp; lastVisibleItem + <span class="number">1</span> == adapter.getItemCount()) &#123;</div><div class="line">                    mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;                        </div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            updateRecyclerView(adapter.getRealLastPosition(), adapter.getRealLastPosition() + PAGE_COUNT);</div><div class="line">                        &#125;</div><div class="line">                    &#125;, <span class="number">500</span>);</div><div class="line">                &#125;                </div><div class="line">                <span class="keyword">if</span> (adapter.isFadeTips() == <span class="keyword">true</span> &amp;&amp; lastVisibleItem + <span class="number">2</span> == adapter.getItemCount()) &#123;</div><div class="line">                    mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;                        </div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            updateRecyclerView(adapter.getRealLastPosition(), adapter.getRealLastPosition() + PAGE_COUNT);</div><div class="line">                        &#125;</div><div class="line">                    &#125;, <span class="number">500</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;            </div><div class="line">            <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">            lastVisibleItem = mLayoutManager.findLastVisibleItemPosition();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RecyclerView基本概念&quot;&gt;&lt;a href=&quot;#RecyclerView基本概念&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView基本概念:&quot;&gt;&lt;/a&gt;RecyclerView基本概念:&lt;/h3&gt;&lt;p&gt;RecyclerView是Android 5.0提出的新UI控件，位于support-v7包中，可以通过在build.gradle中添加&lt;br&gt;&lt;code&gt;compile &amp;#39;com.android.support:recyclerview-v7:24.2.1&amp;#39;&lt;/code&gt;导入。&lt;br&gt;RecyclerView的官方定义如下：&lt;br&gt;A flexible view for providing a limited window into a large data set.&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>数据库- Room 错误tips</title>
    <link href="http://yoursite.com/2017/08/09/%E6%95%B0%E6%8D%AE%E5%BA%93-%20Room%20%E9%94%99%E8%AF%AFtips/"/>
    <id>http://yoursite.com/2017/08/09/数据库- Room 错误tips/</id>
    <published>2017-08-09T14:15:30.000Z</published>
    <updated>2018-03-08T02:26:43.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DB-room"><a href="#DB-room" class="headerlink" title="DB/room"></a>DB/room</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Error:(<span class="number">12</span>, <span class="number">17</span>) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to <span class="keyword">false</span>.</div><div class="line"></div><div class="line">Error:(<span class="number">21</span>, <span class="number">27</span>) 错误: To use RxJava2 features, you must add `rxjava2` artifact from Room as a dependency. android.arch.persistence.room:rxjava2:&lt;version&gt;</div></pre></td></tr></table></figure><a id="more"></a><p>解决方案</p><ol><li>在创建DataBase 是加上{exportSchema = false}<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Database</span>(entities = &#123;Wait.class&#125;,version = <span class="number">1</span>, exportSchema = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitDataBase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WaitDataBase sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WaitDataBase <span class="title">getDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = Room.databaseBuilder(ReadhubApplication.getInstance(), WaitDataBase.class,</div><div class="line">                    <span class="string">"Readhub"</span>).build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        sInstance = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> WaitDao  <span class="title">waitDao</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DB-room&quot;&gt;&lt;a href=&quot;#DB-room&quot; class=&quot;headerlink&quot; title=&quot;DB/room&quot;&gt;&lt;/a&gt;DB/room&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Error:(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error:(&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;) 错误: To use RxJava2 features, you must add `rxjava2` artifact from Room as a dependency. android.arch.persistence.room:rxjava2:&amp;lt;version&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="sql room" scheme="http://yoursite.com/tags/sql-room/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题(2)</title>
    <link href="http://yoursite.com/2017/05/05/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(2)/"/>
    <id>http://yoursite.com/2017/05/05/工作中遇到的问题(2)/</id>
    <published>2017-05-05T12:40:15.000Z</published>
    <updated>2018-03-08T02:27:41.835Z</updated>
    
    <content type="html"><![CDATA[<p> 设置viewpagerIndicatior的下划线的宽度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setIndicator</span><span class="params">(Context context, TabLayout tabs, <span class="keyword">int</span> leftDip, <span class="keyword">int</span> rightDip)</span> </span>&#123;</div><div class="line">       Class&lt;?&gt; tabLayout = tabs.getClass();</div><div class="line">       Field tabStrip = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           tabStrip = tabLayout.getDeclaredField(<span class="string">"mTabStrip"</span>);</div><div class="line">       &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       tabStrip.setAccessible(<span class="keyword">true</span>);</div><div class="line">       LinearLayout ll_tab = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ll_tab = (LinearLayout) tabStrip.get(tabs);</div><div class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> left = (<span class="keyword">int</span>) (getDisplayMetrics(context).density * leftDip);</div><div class="line">       <span class="keyword">int</span> right = (<span class="keyword">int</span>) (getDisplayMetrics(context).density * rightDip);</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ll_tab.getChildCount(); i++) &#123;</div><div class="line">           View child = ll_tab.getChildAt(i);</div><div class="line">           child.setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">           LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, LinearLayout.LayoutParams.MATCH_PARENT, <span class="number">1</span>);</div><div class="line">           params.leftMargin = left;</div><div class="line">           params.rightMargin = right;</div><div class="line">           child.setLayoutParams(params);</div><div class="line">           child.invalidate();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><a id="more"></a><p>Android键盘挡住输入框解决办法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftKeyboardUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏软键盘(只适用于Activity，不适用于Fragment)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideSoftKeyboard</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        View view = activity.getCurrentFocus();</div><div class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">            InputMethodManager inputMethodManager = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);</div><div class="line">            inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏软键盘(可用于Activity，Fragment)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideSoftKeyboard</span><span class="params">(Context context, List&lt;View&gt; viewList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewList == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (View v : viewList) &#123;</div><div class="line">            inputMethodManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 设置viewpagerIndicatior的下划线的宽度：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setIndicator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, TabLayout tabs, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftDip, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rightDip)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Class&amp;lt;?&amp;gt; tabLayout = tabs.getClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Field tabStrip = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           tabStrip = tabLayout.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;mTabStrip&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NoSuchFieldException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       tabStrip.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       LinearLayout ll_tab = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ll_tab = (LinearLayout) tabStrip.get(tabs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (getDisplayMetrics(context).density * leftDip);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (getDisplayMetrics(context).density * rightDip);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; ll_tab.getChildCount(); i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           View child = ll_tab.getChildAt(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.setPadding(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           LinearLayout.LayoutParams params = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinearLayout.LayoutParams(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, LinearLayout.LayoutParams.MATCH_PARENT, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           params.leftMargin = left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           params.rightMargin = right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.setLayoutParams(params);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.invalidate();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术选择</title>
    <link href="http://yoursite.com/2017/05/03/%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E7%82%B9%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2017/05/03/项目技术点选择/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2017-05-03T12:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><ol><li><p>Rxjava2</p></li><li><p>butterknife</p></li><li><p>rxandroid 用于Android的Rxjava绑定库</p></li><li><p>RxBinding：配合Rxjava处理控件异步调用</p><a id="more"></a></li><li><p>RxLifecycle：防止RxJava中subscription导致内存泄漏</p></li><li><p>RxPermissions：基于RxJava开发的用于帮助在Android 6.0中处理运行时权限检测</p></li><li><p>retrofit：目前最好用的网络通讯库，应该都用过吧</p></li><li><p>glide 能够很好的和activity进行生命周期绑定，减少内存溢出的风险</p></li><li><p>recyclerview-animators：RecyclerView的动画库，内置了非常多的动画效果</p></li><li><p>CircleImageView：</p></li><li><p>PhotoView：可根据手势进行缩放的图像库，这个也很常见</p></li><li><p>NumberProgressBar：性感的数字进度条</p></li><li><p>ijkplayer</p></li><li><p>Ormlite</p></li><li><p>Okgo下载</p></li><li><p>Luban压缩</p></li><li><p>BaseRecyclerViewAdapterHelper</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术选择&quot;&gt;&lt;a href=&quot;#技术选择&quot; class=&quot;headerlink&quot; title=&quot;技术选择&quot;&gt;&lt;/a&gt;技术选择&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Rxjava2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;butterknife&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rxandroid 用于Android的Rxjava绑定库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RxBinding：配合Rxjava处理控件异步调用&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016/7/10学习笔记</title>
    <link href="http://yoursite.com/2017/05/03/2016:7:10%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/03/2016:7:10学习笔记/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2017-05-04T06:20:51.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>获取LayoutInflater 的两种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LayoutInflater inflater = getLayoutInflater()；</div><div class="line">LayoutInflater inflater = (LayoutInflater)</div><div class="line">mContext.getSystemService(LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></li><li><p>设置全屏的两种方法,代码设置</p><p>这行代码必须设置在setConentView(R.layout.main) 之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,   WindowManager.LayoutParams. FLAG_FULLSCREEN);</div></pre></td></tr></table></figure></li><li><p>布局文件设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android :themen=<span class="string">"@android:style/Theme.NoTitleBar.Fullscreen"</span></div></pre></td></tr></table></figure><a id="more"></a></li><li><p>[x] <a href="http://blog.csdn.net/lmj623565791/article/details/51339751" target="_blank" rel="external">巧用ViewPager 打造不一样的广告轮播切换效果</a></p><pre><code>总结:- viewpager 要实现显示多个条目 需要设置viewpager的外层的布局文件和viewpager都要设置为false </code></pre></li></ul><pre><code>    设置相应的属性即可    设置viewpager的移动动画    android:clipChildren=&quot;false&quot;    viewPager.setPageTransformer- 实现透明   实现 AlphaPageTransformer implements ViewPager.PageTransformer    调用 viewPager.setPageTransformer(new AlphaPageTransformer());  ​  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> mMinAlpha = DEFAULT_MIN_ALPHA;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTransform</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">    &#123; </div><div class="line">        view.setAlpha(mMinAlpha);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-1,1]</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>) <span class="comment">//[0，-1]</span></div><div class="line">        &#123; </div><div class="line">            <span class="keyword">float</span> factor = mMinAlpha + (<span class="number">1</span> - mMinAlpha) * (<span class="number">1</span> + position);</div><div class="line">            view.setAlpha(factor);</div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//[1，0]</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">float</span> factor = mMinAlpha + (<span class="number">1</span> - mMinAlpha) * (<span class="number">1</span> - position);</div><div class="line">            view.setAlpha(factor);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">        view.setAlpha(mMinAlpha);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>- 实现缩小  &gt; view.setSacleX();  &gt;  &gt; view.setScaleY();  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoomOutPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.70f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line">        <span class="keyword">int</span> pageHeight = view.getHeight();</div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            view.setAlpha(MIN_ALPHA);</div><div class="line">            view.setScaleX(MIN_SCALE);</div><div class="line">            view.setScaleY(MIN_SCALE);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div><div class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</div><div class="line">                view.setScaleX(<span class="number">1</span> + <span class="number">0.3f</span> * position);</div><div class="line">                view.setScaleY(<span class="number">1</span> + <span class="number">0.3f</span> * position);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                view.setTranslationX(-horzMargin + vertMargin / <span class="number">2</span>);</div><div class="line"></div><div class="line">                view.setScaleX(<span class="number">1</span> - <span class="number">0.3f</span> * position);</div><div class="line">                view.setScaleY(<span class="number">1</span> - <span class="number">0.3f</span> * position);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line"></div><div class="line">            <span class="comment">// Fade the page relative to its size.</span></div><div class="line">            view.setAlpha(MIN_ALPHA + (scaleFactor - MIN_SCALE) / (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - MIN_ALPHA));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            view.setScaleX(MIN_SCALE);</div><div class="line">            view.setScaleY(MIN_SCALE);</div><div class="line">            view.setAlpha(MIN_ALPHA);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>  ​- 实现旋转  &gt; view.setPivotX();  &gt;  &gt; view.setPivotY();  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_MAX_ROTATE = <span class="number">15.0f</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> mMaxRotate = DEFAULT_MAX_ROTATE;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTransform</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">        <span class="comment">// This page is way off-screen to the left.  </span></div><div class="line">        view.setRotation(mMaxRotate * -<span class="number">1</span>);</div><div class="line">        view.setPivotX(view.getWidth());</div><div class="line">        view.setPivotY(view.getHeight());</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-1,1]  </span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>)<span class="comment">//[-1，0]</span></div><div class="line">        &#123;</div><div class="line">            view.setPivotX(view.getWidth() * (<span class="number">0.5f</span> + <span class="number">0.5f</span> * (-position)));</div><div class="line">            view.setPivotY(view.getHeight());</div><div class="line">            view.setRotation(mMaxRotate * position);</div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//[0,1]</span></div><div class="line">        &#123;</div><div class="line">            view.setPivotX(view.getWidth() * <span class="number">0.5f</span> * (<span class="number">1</span> - position));</div><div class="line">            view.setPivotY(view.getHeight());</div><div class="line">            view.setRotation(mMaxRotate * position);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123; <span class="comment">// (1,+Infinity]  </span></div><div class="line">        <span class="comment">// This page is way off-screen to the right.  </span></div><div class="line">        view.setRotation(mMaxRotate);</div><div class="line">        view.setPivotX(view.getWidth() * <span class="number">0</span>);</div><div class="line">        view.setPivotY(view.getHeight());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></code></pre><ul><li><p>[x] <a href="http://blog.csdn.net/lmj623565791/article/details/51503977" target="_blank" rel="external">Android 探究 LayoutInflater setFactory</a></p><pre><code>  总结：- 可以获取相关的属性  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">LayoutInflaterCompat.setFactory(LayoutInflater.from(<span class="keyword">this</span>), <span class="keyword">new</span> LayoutInflaterFactory()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span></span></div><div class="line">            &#123;</div><div class="line">                Log.e(TAG, <span class="string">"name = "</span> + name);</div><div class="line">                <span class="keyword">int</span> n = attrs.getAttributeCount();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">                &#123;</div><div class="line">                    Log.e(TAG, attrs.getAttributeName(i) + <span class="string">" , "</span> + attrs.getAttributeValue(i));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>- 可以进行相关的替换 将xml中的相关的TextView 替换为自定义的TextView<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (name.equals(<span class="string">"TextView"</span>))</div><div class="line">&#123;</div><div class="line">    MyTextView view = <span class="keyword">new</span> com.zhy.MyTextView(context,attrs);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>- 获取字体<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (typeface == <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">        typeface = Typeface.createFromAsset(getAssets(), <span class="string">"hwxk.ttf"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//设置相应的字体</span></div><div class="line"> <span class="keyword">if</span> ( view!= <span class="keyword">null</span> &amp;&amp; (view <span class="keyword">instanceof</span> TextView))</div><div class="line">      &#123;</div><div class="line">                ((TextView) view).setTypeface(typeface);</div><div class="line">      &#125;</div></pre></td></tr></table></figure></code></pre></li><li><p>看Android相关的书籍（一个小时）</p><ul><li>[ ] Android 群英会</li></ul></li><li><p>写代码</p></li><li><p>学习总结</p><p>  其他：</p><ul><li></li></ul></li><li><p>未解决的问题</p><ol><li>笔记代码应该整体对齐的方式</li><li>笔记模板的创建</li></ol><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取LayoutInflater 的两种方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LayoutInflater inflater = getLayoutInflater()；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LayoutInflater inflater = (LayoutInflater)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mContext.getSystemService(LAYOUT_INFLATER_SERVICE);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置全屏的两种方法,代码设置&lt;/p&gt;
&lt;p&gt;这行代码必须设置在setConentView(R.layout.main) 之前&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;requestWindowFeature(Window.FEATURE_NO_TITLE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,   WindowManager.LayoutParams. FLAG_FULLSCREEN);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布局文件设置&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android :themen=&lt;span class=&quot;string&quot;&gt;&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何获取Android设备唯一ID？</title>
    <link href="http://yoursite.com/2017/05/03/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80ID/"/>
    <id>http://yoursite.com/2017/05/03/如何获取Android设备唯一ID/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2017-05-04T06:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何获取Android设备唯一ID？"><a href="#如何获取Android设备唯一ID？" class="headerlink" title="如何获取Android设备唯一ID？"></a>如何获取Android设备唯一ID？</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>每一个android设备都有唯一ID吗？如果有？怎么用java最简单取得呢？</p><p>如何取得android唯一码？</p><p>好处：</p><ul><li>1.不需要特定权限.</li><li>2.在99.5% Android装置（包括root过的）上，即API =&gt; 9，保证唯一性.</li><li><p>3.重装app之后仍能取得相同唯一值. </p> <a id="more"></a>   <p>  ​<br>伪代码：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if API =&gt; 9/10: (99.5% of devices)</div><div class="line"></div><div class="line">return unique ID containing serial id (rooted devices may be different)</div><div class="line"></div><div class="line">else</div><div class="line"></div><div class="line">return unique ID of build information (may overlap data - API &lt; 9)</div></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return pseudo unique ID</div><div class="line"> * <span class="doctag">@return</span> ID</div><div class="line"> */<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUniquePsuedoID</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// If all else fails, if the user does have lower than API 9 (lower</span></div><div class="line">    <span class="comment">// than Gingerbread), has reset their device or 'Secure.ANDROID_ID'</span></div><div class="line">    <span class="comment">// returns 'null', then simply the ID returned will be solely based</span></div><div class="line">    <span class="comment">// off their Android device information. This is where the collisions</span></div><div class="line">    <span class="comment">// can happen.</span></div><div class="line">    <span class="comment">// Thanks http://www.pocketmagic.net/?p=1662!</span></div><div class="line">    <span class="comment">// Try not to use DISPLAY, HOST or ID - these items could change.</span></div><div class="line">    <span class="comment">// If there are collisions, there will be overlapping data</span></div><div class="line">    String m_szDevIDShort = <span class="string">"35"</span> + (Build.BOARD.length() % <span class="number">10</span>) + (Build.BRAND.length() % <span class="number">10</span>) + (Build.CPU_ABI.length() % <span class="number">10</span>) + (Build.DEVICE.length() % <span class="number">10</span>) + (Build.MANUFACTURER.length() % <span class="number">10</span>) + (Build.MODEL.length() % <span class="number">10</span>) + (Build.PRODUCT.length() % <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Thanks to @Roman SL!</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/a/4789483/950427</span></div><div class="line">    <span class="comment">// Only devices with API &gt;= 9 have android.os.Build.SERIAL</span></div><div class="line">    <span class="comment">// http://developer.android.com/reference/android/os/Build.html#SERIAL</span></div><div class="line">    <span class="comment">// If a user upgrades software or roots their device, there will be a duplicate entry</span></div><div class="line">    String serial = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serial = android.os.Build.class.getField(<span class="string">"SERIAL"</span>).get(<span class="keyword">null</span>).toString();</div><div class="line"></div><div class="line">        <span class="comment">// Go ahead and return the serial for api =&gt; 9</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">        <span class="comment">// String needs to be initialized</span></div><div class="line">        serial = <span class="string">"serial"</span>; <span class="comment">// some value</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Thanks @Joe!</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/a/2853253/950427</span></div><div class="line">    <span class="comment">// Finally, combine the values we have found by using the UUID class to create a unique identifier</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();&#125;</div></pre></td></tr></table></figure><p>###回答2<br>好处：</p><ul><li>1.不需要特定权限.</li><li>2.在100% Android装置（包括root过的）上，保证唯一性.</li></ul><p>坏处</p><ul><li>1.重装app之后不能取得相同唯一值.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String uniqueID = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREF_UNIQUE_ID = <span class="string">"PREF_UNIQUE_ID"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> String <span class="title">id</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (uniqueID == <span class="keyword">null</span>) &#123;</div><div class="line">        SharedPreferences sharedPrefs = context.getSharedPreferences(</div><div class="line">                PREF_UNIQUE_ID, Context.MODE_PRIVATE);</div><div class="line">        uniqueID = sharedPrefs.getString(PREF_UNIQUE_ID, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (uniqueID == <span class="keyword">null</span>) &#123;</div><div class="line">            uniqueID = UUID.randomUUID().toString();</div><div class="line">            Editor editor = sharedPrefs.edit();</div><div class="line">            editor.putString(PREF_UNIQUE_ID, uniqueID);</div><div class="line">            editor.commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> uniqueID;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>###回答3（需要有电话卡）</p><p>好处：<br>1.重装app之后仍能取得相同唯一值.</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> TelephonyManager tm = (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line"><span class="keyword">final</span> String tmDevice, tmSerial, androidId;</div><div class="line">tmDevice = <span class="string">""</span> + tm.getDeviceId();</div><div class="line">tmSerial = <span class="string">""</span> + tm.getSimSerialNumber();</div><div class="line">androidId = <span class="string">""</span> + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);</div><div class="line">UUID deviceUuid = <span class="keyword">new</span> UUID(androidId.hashCode(), ((<span class="keyword">long</span>)tmDevice.hashCode() &lt;&lt; <span class="number">32</span>) | tmSerial.hashCode());</div><div class="line">String deviceId = deviceUuid.toString();</div></pre></td></tr></table></figure><p>谨记：要取得以下权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</div></pre></td></tr></table></figure></p><p>stackoverflow链接：<br><a href="http://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id" target="_blank" rel="external">http://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何获取Android设备唯一ID？&quot;&gt;&lt;a href=&quot;#如何获取Android设备唯一ID？&quot; class=&quot;headerlink&quot; title=&quot;如何获取Android设备唯一ID？&quot;&gt;&lt;/a&gt;如何获取Android设备唯一ID？&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;每一个android设备都有唯一ID吗？如果有？怎么用java最简单取得呢？&lt;/p&gt;
&lt;p&gt;如何取得android唯一码？&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.不需要特定权限.&lt;/li&gt;
&lt;li&gt;2.在99.5% Android装置（包括root过的）上，即API =&amp;gt; 9，保证唯一性.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.重装app之后仍能取得相同唯一值. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何用一行代码初始化一个ArrayList</title>
    <link href="http://yoursite.com/2017/05/03/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAArrayList/"/>
    <id>http://yoursite.com/2017/05/03/如何用一行代码初始化一个ArrayList/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2017-05-04T06:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何用一行代码初始化一个ArrayList"><a href="#如何用一行代码初始化一个ArrayList" class="headerlink" title="如何用一行代码初始化一个ArrayList"></a>如何用一行代码初始化一个ArrayList</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>为了测试，我需要临时快速创建一个list。一开始我这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; places = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">places.add(<span class="string">"Buenos Aires"</span>);</div><div class="line">places.add(<span class="string">"Córdoba"</span>);</div><div class="line">places.add(<span class="string">"La Plata"</span>);</div><div class="line"></div><div class="line">之后我重构了下</div><div class="line"></div><div class="line">ArrayList&lt;String&gt; places = <span class="keyword">new</span> ArrayList&lt;String&gt;(</div><div class="line">Arrays.asList(<span class="string">"Buenos Aires"</span>, <span class="string">"Córdoba"</span>, <span class="string">"La Plata"</span>));</div></pre></td></tr></table></figure></p><p>是否有更加简便的方法呢？<br><a id="more"></a></p><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><h4 id="常见方式"><a href="#常见方式" class="headerlink" title="常见方式"></a>常见方式</h4><p>实际上，也许“最好”的方式，就是你写的这个方式，因为它不用再创建新的<code>List</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add(&quot;A&quot;);</div><div class="line">list.add(&quot;B&quot;);</div><div class="line">list.add(&quot;C&quot;);</div></pre></td></tr></table></figure></p><p>只是这个方式看上去要多写些代码，让人郁闷</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>当然，还有其他方式，例如,写一个匿名内部类，然后在其中做初始化（也被称为 brace initialization）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;() &#123;&#123;</div><div class="line">    add(&quot;A&quot;);</div><div class="line">    add(&quot;B&quot;);</div><div class="line">    add(&quot;C&quot;);</div><div class="line">&#125;&#125;;</div></pre></td></tr></table></figure></p><p>但是，我不喜欢这个方式。只是为了做个初始化，却要在<code>ArrayList</code>的同一行后面加这么一坨代码。</p><h4 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList"></a>Arrays.asList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; places = Arrays.asList(&quot;Buenos Aires&quot;, &quot;Córdoba&quot;, &quot;La Plata&quot;);</div></pre></td></tr></table></figure><p>####Collections.singletonList<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; places = Collections.singletonList(&quot;Buenos Aires&quot;);</div></pre></td></tr></table></figure></p><p>注意：后面的这两种方式，得到的是一个定长的<code>List</code>(如果add操作会抛异常）。如果你需要一个不定长的<code>List</code>,可以这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; places = new ArrayList&lt;&gt;(Arrays.asList(&quot;Buenos Aires&quot;, &quot;Córdoba&quot;, &quot;La Plata&quot;));</div></pre></td></tr></table></figure></p><p>stackoverflow链接：<br><a href="http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line" target="_blank" rel="external">http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何用一行代码初始化一个ArrayList&quot;&gt;&lt;a href=&quot;#如何用一行代码初始化一个ArrayList&quot; class=&quot;headerlink&quot; title=&quot;如何用一行代码初始化一个ArrayList&quot;&gt;&lt;/a&gt;如何用一行代码初始化一个ArrayList&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;为了测试，我需要临时快速创建一个list。一开始我这样做：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; places = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;places.add(&lt;span class=&quot;string&quot;&gt;&quot;Buenos Aires&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;places.add(&lt;span class=&quot;string&quot;&gt;&quot;Córdoba&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;places.add(&lt;span class=&quot;string&quot;&gt;&quot;La Plata&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;之后我重构了下&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; places = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;Buenos Aires&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Córdoba&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;La Plata&quot;&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是否有更加简便的方法呢？&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>equlas和hashCode方法时应考虑的问题</title>
    <link href="http://yoursite.com/2017/03/02/(Override%EF%BC%89equlas%E5%92%8ChashCode%E6%96%B9%E6%B3%95%E6%97%B6%E5%BA%94%E8%80%83%E8%99%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/02/(Override）equlas和hashCode方法时应考虑的问题/</id>
    <published>2017-03-02T02:00:54.000Z</published>
    <updated>2018-03-08T02:30:00.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理论上讲（编程语言、数学层面）"><a href="#理论上讲（编程语言、数学层面）" class="headerlink" title="理论上讲（编程语言、数学层面）"></a>理论上讲（编程语言、数学层面）</h3><p>equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object" target="_blank" rel="external">javadoc</a>)) 。<br>另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。<br>hashCode()（<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(" target="_blank" rel="external">javadoc</a>))也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）</p><a id="more"></a><p>总的来说，这两个方法的关系：</p><p><strong>假如a.equals(b)，那么a.hashCode() 应等于b.hashCode()</strong></p><h3 id="实践上讲"><a href="#实践上讲" class="headerlink" title="实践上讲"></a>实践上讲</h3>  <!-- more -->    ​<br><strong>如果你重写了其中一个方法，那么务必重写另外一个方法</strong><br><br>equals()和hashCode()所计算的属性集（set of fields）应当是一样的<br>如何更快地重写这两个方法呢？<br>1. 使用<a href="http://commons.apache.org/lang/" target="_blank" rel="external">Apache Commons Lang library</a>中的<a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html" target="_blank" rel="external">EqualsBuilder</a>、<a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html" target="_blank" rel="external">HashCodeBuilder</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">17</span>, <span class="number">31</span>). <span class="comment">// two randomly chosen prime numbers</span></div><div class="line">            <span class="comment">// if deriving: appendSuper(super.hashCode()).</span></div><div class="line">            append(name).</div><div class="line">            append(age).</div><div class="line">            toHashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Person))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        Person rhs = (Person) obj;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EqualsBuilder().</div><div class="line">            <span class="comment">// if deriving: appendSuper(super.equals(obj)).</span></div><div class="line">            append(name, rhs.name).</div><div class="line">            append(age, rhs.age).</div><div class="line">            isEquals();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>如果你是用eclipse，可以在代码编辑区右键，然后选择 Source &gt; Generate hashCode() and equals()</li></ol><p><strong>另外请记得</strong></p><p>当你使用一些基于Hash的 Collection 、 Map，例如HashSet, LinkedHashSet, HashMap, Hashtable, 、WeakHashMap等。在键值对被放到集合中之后，请确保其key值所对应的hashCode()是保持不变的。比较可靠的一个办法，是保持这些key是不可变的，这也能带来不少好处</p><p>stackoverflow链接：<br><a href="http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java" target="_blank" rel="external">http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理论上讲（编程语言、数学层面）&quot;&gt;&lt;a href=&quot;#理论上讲（编程语言、数学层面）&quot; class=&quot;headerlink&quot; title=&quot;理论上讲（编程语言、数学层面）&quot;&gt;&lt;/a&gt;理论上讲（编程语言、数学层面）&lt;/h3&gt;&lt;p&gt;equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javadoc&lt;/a&gt;)) 。&lt;br&gt;另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。&lt;br&gt;hashCode()（&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javadoc&lt;/a&gt;))也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题(持续更新中)</title>
    <link href="http://yoursite.com/2017/03/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(1)/"/>
    <id>http://yoursite.com/2017/03/02/工作中遇到的问题(1)/</id>
    <published>2017-03-02T02:00:54.000Z</published>
    <updated>2017-05-31T11:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作中遇到的问题-1"><a href="#工作中遇到的问题-1" class="headerlink" title="工作中遇到的问题(1)"></a>工作中遇到的问题(1)</h2><h4 id="1-无法启动application-在android-4-4-版本-上出现这个问题"><a href="#1-无法启动application-在android-4-4-版本-上出现这个问题" class="headerlink" title="1. 无法启动application 在android  4.4 版本 上出现这个问题"></a>1. 无法启动application 在android  4.4 版本 上出现这个问题</h4> <a id="more"></a> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> Process: com.jingge.microlesson, PID: 17879</div><div class="line">ava.lang.RuntimeException: Unable to instantiate application com.jingge.microlesson.MicroLessonApplication: java.lang.ClassNotFoundException: Didn't find class "com.jingge.microlesson.MicroLessonApplication" on path: DexPathList[[zip file "/data/app/com.jingge.microlesson-2.apk"],nativeLibraryDirectories=[/data/app-lib/com.jingge.microlesson-2, /vendor/lib, /system/lib, /data/datalib]]</div><div class="line"> at android.app.LoadedApk.makeApplication(LoadedApk.java:537)</div><div class="line">    at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4586)</div><div class="line">  at android.app.ActivityThread.access$1800(ActivityThread.java:139)</div><div class="line">  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1316)</div><div class="line">   at android.os.Handler.dispatchMessage(Handler.java:102)</div><div class="line">at android.os.Looper.loop(Looper.java:136)</div><div class="line">at android.app.ActivityThread.main(ActivityThread.java:5314)</div><div class="line">at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">at java.lang.reflect.Method.invoke(Method.java:515)</div><div class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:864)</div><div class="line">at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:680)</div><div class="line"> at dalvik.system.NativeStart.main(Native Method)</div><div class="line">Caused by: java.lang.ClassNotFoundException: Didn't find class "com.jingge.microlesson.MicroLessonApplication" on path: DexPathList[[zip file "/data/app/com.jingge.microlesson-2.apk"],nativeLibraryDirectories=[/data/app-lib/com.jingge.microlesson-2, /vendor/lib, /system/lib, /data/datalib]]</div><div class="line">at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)</div><div class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:497)</div><div class="line"> at java.lang.ClassLoader.loadClass(ClassLoader.java:457)</div><div class="line">at android.app.Instrumentation.newApplication(Instrumentation.java:976)</div><div class="line">at android.app.LoadedApk.makeApplication(LoadedApk.java:532)</div><div class="line">at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4586) </div><div class="line"> at android.app.ActivityThread.access$1800(ActivityThread.java:139) </div><div class="line"> at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1316) </div><div class="line"> at android.os.Handler.dispatchMessage(Handler.java:102) </div><div class="line"> at android.os.Looper.loop(Looper.java:136) </div><div class="line"> at android.app.ActivityThread.main(ActivityThread.java:5314) </div><div class="line">at java.lang.reflect.Method.invokeNative(Native Method) </div><div class="line">at java.lang.reflect.Method.invoke(Method.java:515) </div><div class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:864) </div><div class="line"> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:680) </div><div class="line">at dalvik.system.NativeStart.main(Native Method) </div><div class="line"></div><div class="line">See http://g.co/androidstudio/manifest-merger for more information about the manifest merger.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    Suggestion: add 'tools:replace="android:allowBackup"' to &lt;application&gt; element at AndroidManifest.xml:55:5-594:19 to override</div></pre></td></tr></table></figure><blockquote><p>无法启动application 在android  4.4 版本 上出现这个问题   compile SDK 的版本改为13以上 就可以 了</p></blockquote><h3 id="2-Vitamio-支持64手机播放"><a href="#2-Vitamio-支持64手机播放" class="headerlink" title="2. Vitamio 支持64手机播放"></a>2. Vitamio 支持64手机播放</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">https://github.com/yixia/VitamioBundle/issues/305</div><div class="line"></div><div class="line">Hi, I searched on the net these days and finally found the solution!</div><div class="line">If you are using Android studio, just edit the gradle.properties in the root folder and addandroid.useDeprecatedNdk=true. Then edit the build.gradle file in your app's folder, set abiFilters as below:</div><div class="line">android &#123;</div><div class="line">    ....</div><div class="line">    defaultConfig &#123;</div><div class="line">        ....</div><div class="line">        ndk &#123;</div><div class="line">            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">网络出现的问题：</div><div class="line"></div><div class="line">sorry,this video cannot be played</div><div class="line">√√√√</div><div class="line"></div><div class="line">sorry,this video cannot be played</div><div class="line"></div><div class="line">android 5.0 权限拒绝 permission deny  解决办法：</div><div class="line">&lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" /&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工作中遇到的问题-1&quot;&gt;&lt;a href=&quot;#工作中遇到的问题-1&quot; class=&quot;headerlink&quot; title=&quot;工作中遇到的问题(1)&quot;&gt;&lt;/a&gt;工作中遇到的问题(1)&lt;/h2&gt;&lt;h4 id=&quot;1-无法启动application-在android-4-4-版本-上出现这个问题&quot;&gt;&lt;a href=&quot;#1-无法启动application-在android-4-4-版本-上出现这个问题&quot; class=&quot;headerlink&quot; title=&quot;1. 无法启动application 在android  4.4 版本 上出现这个问题&quot;&gt;&lt;/a&gt;1. 无法启动application 在android  4.4 版本 上出现这个问题&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在java中声明数组</title>
    <link href="http://yoursite.com/2016/03/27/%E5%9C%A8java%E4%B8%AD%E5%A3%B0%E6%98%8E%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2016/03/27/在java中声明数组/</id>
    <published>2016-03-27T02:24:34.000Z</published>
    <updated>2018-03-08T03:48:58.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在java中声明数组"><a href="#在java中声明数组" class="headerlink" title="在java中声明数组"></a>在java中声明数组</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>你是如何在Java中声明数组的。</p><h3 id="回答："><a href="#回答：" class="headerlink" title="回答："></a>回答：</h3><p>你可以直接用数组声明，或者通过数组的字面常量（array literal ）声明</p><p>对于原始类型（primitive types）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int[] myIntArray = new int[3];</div><div class="line">int[] myIntArray = &#123;1, 2, 3&#125;;</div><div class="line">int[] myIntArray = new int[]&#123;1, 2, 3&#125;;</div></pre></td></tr></table></figure></p><p>对于其他类，比如String类，也是相同的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] myStringArray = new String[3];</div><div class="line">String[] myStringArray = &#123;&quot;a&quot;, &quot;b&quot;,&quot;c&quot;&#125;;</div><div class="line">String[] myStringArray = new String[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</div></pre></td></tr></table></figure></p><p><a href="http://stackoverflow.com/questions/1200621/declare-array-in-java" target="_blank" rel="external">stackoverflow链接：Declare array in Java?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在java中声明数组&quot;&gt;&lt;a href=&quot;#在java中声明数组&quot; class=&quot;headerlink&quot; title=&quot;在java中声明数组&quot;&gt;&lt;/a&gt;在java中声明数组&lt;/h2&gt;&lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>线程wait()和sleep()的区别</title>
    <link href="http://yoursite.com/2016/03/27/%E7%BA%BF%E7%A8%8B%E4%B8%ADwait()%E5%92%8Csleep()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/03/27/线程中wait()和sleep()的区别/</id>
    <published>2016-03-27T02:24:34.000Z</published>
    <updated>2017-05-04T06:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wait-和sleep-的区别"><a href="#wait-和sleep-的区别" class="headerlink" title="wait()和sleep()的区别"></a>wait()和sleep()的区别</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>在线程里 <code>wait()</code> 和 <code>sleep()</code> 的区别？</p><p>我的理解是执行 <code>wait()</code> 语句后，该线程仍是运行态，并且会占用CPU，但是执行 <code>sleep()</code>后，该线程则不会占用CPU，对吗？</p><p>为什么需要 <code>sleep()</code> 和 <code>wait()</code> 两条语句：他们底层是如何实现的？<br><a id="more"></a></p><h3 id="回答："><a href="#回答：" class="headerlink" title="回答："></a>回答：</h3><p>线程 在<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait%28%29" target="_blank" rel="external"><code>wait</code></a> 后，可以被另一个拥有相同 <code>synchronized</code> 对象的线程，通过调用<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notify%28%29" target="_blank" rel="external"> <code>notify</code> </a>唤醒，而 <code>sleep</code> 不行。<code>wait</code> 和 <code>notify</code> 能正常执行的条件是（否则会抛异常）：多个线程的代码，都包在<code>synchronized</code>块中，并且 <code>synchronized</code> 锁的对象需要是同一个。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Object mon = ...;</div><div class="line">synchronized (mon) &#123;</div><div class="line">    mon.wait();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面这个线程调用了 <code>wait</code>后，会进入等待状态。这时另外一个线程可以这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">synchronized (mon) &#123; mon.notify(); &#125;</div></pre></td></tr></table></figure></p><p>可以看到，<code>synchronized</code>锁对象，都是mon。因此，当第二个线程调用了 <code>notify()</code> 方法，第一个线程就会唤醒（假设有且仅有一个线程是被包在 <code>synchronized (mon)</code> 中且处于等待状态)。</p><p>如果有多个线程在等待（且<code>synchronized</code> 锁对象是同一个，如上例中的mon），则可以调用<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notifyAll%28%29" target="_blank" rel="external"> <code>notifyAll</code> </a>来唤醒。但是，只有其中一个线程能抢到锁并继续执行（因为  <code>wait</code> 的线程都是在 <code>synchronized</code> 块内，需要争夺 <code>synchronized</code> 锁）。其他的线程会被锁住，直到他们依次获得锁。</p><p>再补充几点：</p><ul><li><p><code>wait</code> 方法由 <code>Object</code> 对象调用（例如：你可以让 <code>synchronized</code> 锁对象调用 <code>wait</code> ,如上面例子的mon.wait()）,而 <code>sleep</code> 则由线程调用。</p></li><li><p><code>wait</code> 之后，可能会伪唤醒（<code>spurious wakeups</code>）（正在waiting的线程,无故就被唤醒了，如遇到interrupted, timing out等情况）。因此，你需要多设置一些检查，如果不满足实际的运行条件，则继续等待，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">synchronized &#123;</div><div class="line">    while (!condition) &#123; mon.wait(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>当线程调用 <code>sleep</code> 时，并没有释放对象锁，而 <code>wait</code> 则释放了对象锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">synchronized(LOCK) &#123;</div><div class="line">    Thread.sleep(1000); // LOCK is held</div><div class="line">&#125;</div><div class="line">synchronized(LOCK) &#123;</div><div class="line">    LOCK.wait(); // LOCK is not held</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>最后，再小结一下：</p><ul><li><code>sleep()</code>:“我已经完成了一个时间片，<strong>在n微秒</strong>前，请不要再给我一个时间片”。这时操作系统不会让这个线程做任何事情，直到sleep时间结束。</li><li><code>wait()</code>:”我已经完成了一个时间片，<strong>在其他线程调用<code>notify()</code>前</strong>，请不要再给我一个时间片）。这时操作系统不会安排这个线程继续运行，直到有人调用了<code>notify()</code></li></ul><p><strong>stackoverflow链接：</strong><br><a href="http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep" target="_blank" rel="external">http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep</a></p><h3 id="相关问题及链接："><a href="#相关问题及链接：" class="headerlink" title="相关问题及链接："></a>相关问题及链接：</h3><ol><li><a href="http://stackoverflow.com/questions/37026/java-notify-vs-notifyall-all-over-again" target="_blank" rel="external">Java: notify() vs. notifyAll() all over again</a></li><li><a href="http://ifeve.com/thread-signaling/" target="_blank" rel="external">线程通信</a></li><li><a href="http://longdick.iteye.com/blog/453615" target="_blank" rel="external">最简实例说明wait、notify、notifyAll的使用方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;wait-和sleep-的区别&quot;&gt;&lt;a href=&quot;#wait-和sleep-的区别&quot; class=&quot;headerlink&quot; title=&quot;wait()和sleep()的区别&quot;&gt;&lt;/a&gt;wait()和sleep()的区别&lt;/h2&gt;&lt;h3 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h3&gt;&lt;p&gt;在线程里 &lt;code&gt;wait()&lt;/code&gt; 和 &lt;code&gt;sleep()&lt;/code&gt; 的区别？&lt;/p&gt;
&lt;p&gt;我的理解是执行 &lt;code&gt;wait()&lt;/code&gt; 语句后，该线程仍是运行态，并且会占用CPU，但是执行 &lt;code&gt;sleep()&lt;/code&gt;后，该线程则不会占用CPU，对吗？&lt;/p&gt;
&lt;p&gt;为什么需要 &lt;code&gt;sleep()&lt;/code&gt; 和 &lt;code&gt;wait()&lt;/code&gt; 两条语句：他们底层是如何实现的？&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何产生一个随机的字母数字串作为 session 的唯一标识符</title>
    <link href="http://yoursite.com/2016/03/27/%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E7%9A%84%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E4%B8%B2%E4%BD%9C%E4%B8%BA%20session%20%E7%9A%84%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
    <id>http://yoursite.com/2016/03/27/如何产生一个随机的字母数字串作为 session 的唯一标识符/</id>
    <published>2016-03-27T02:24:34.000Z</published>
    <updated>2017-05-04T06:41:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何产生一个随机的字母数字串作为-session-的唯一标识符"><a href="#如何产生一个随机的字母数字串作为-session-的唯一标识符" class="headerlink" title="如何产生一个随机的字母数字串作为 session 的唯一标识符?"></a>如何产生一个随机的字母数字串作为 session 的唯一标识符?</h1><p>如果允许产生的随机字符串是可猜测的(随机字符串比较都短,或者使用有缺陷的随机数生成器),进而导致攻击者可能会劫持到会话的,可以使用一个相对简单随机数生成代码,如下所示:<br> <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class RandomString &#123;</div><div class="line"></div><div class="line">    private static final char[] symbols;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        StringBuilder tmp = new StringBuilder();</div><div class="line">        for (char ch = &apos;0&apos;; ch &lt;= &apos;9&apos;; ++ch)</div><div class="line">            tmp.append(ch);</div><div class="line">        for (char ch = &apos;a&apos;; ch &lt;= &apos;z&apos;; ++ch)</div><div class="line">            tmp.append(ch);</div><div class="line">        symbols = tmp.toString().toCharArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private final Random random = new Random();</div><div class="line"></div><div class="line">    private final char[] buf;</div><div class="line"></div><div class="line">    public RandomString(int length) &#123;</div><div class="line">        if (length &lt; 1)</div><div class="line">            throw new IllegalArgumentException(&quot;length &lt; 1: &quot; + length);</div><div class="line">        buf = new char[length];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String nextString() &#123;</div><div class="line">        for (int idx = 0; idx &lt; buf.length; ++idx)</div><div class="line">            buf[idx] = symbols[random.nextInt(symbols.length)];</div><div class="line">        return new String(buf);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为了安全,可以考虑使用下面这段简洁且安全的代码,不过用其作为 session 的标识符,倒显得有点大材小用了（比较耗时）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import java.security.SecureRandom;</div><div class="line"></div><div class="line">public final class SessionIdentifierGenerator &#123;</div><div class="line">  private SecureRandom random = new SecureRandom();</div><div class="line"></div><div class="line">  public String nextSessionId() &#123;</div><div class="line">    return new BigInteger(130, random).toString(32);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其工作原理就是，使用一个 130 位的安全的随机数生成器生成一个随机数，接着转化为 32 进制。我们知道，128 位安全随机数的生成已经是足够安全的，不过以 32 进制编码的每一个数字可编码 5 位，所以需要取大于 128 且是 5 的倍数，所以就选择了 130 位。相对于 随机 UUID 来说(在标准输出中，每个字符使用 3.4 bit，共 122 bit），每个字符使用 5 个随机的 bit 来编码的方式，显得更为简洁和高效。</p><p>译者注：上面两段代码，生成26位随机字符串，第一段代码每次耗时不到1ms，第二段耗时约100ms。也就是说第一段代码更快，但第二段代码更安全，但更耗时。</p><p>stackoverflow原链接：<br><a href="http://stackoverflow.com/questions/41107/how-to-generate-a-random-alpha-numeric-string" target="_blank" rel="external">http://stackoverflow.com/questions/41107/how-to-generate-a-random-alpha-numeric-string</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何产生一个随机的字母数字串作为-session-的唯一标识符&quot;&gt;&lt;a href=&quot;#如何产生一个随机的字母数字串作为-session-的唯一标识符&quot; class=&quot;headerlink&quot; title=&quot;如何产生一个随机的字母数字串作为 session 的唯一标识符?&quot;&gt;&lt;/a&gt;如何产生一个随机的字母数字串作为 session 的唯一标识符?&lt;/h1&gt;&lt;p&gt;如果允许产生的随机字符串是可猜测的(随机字符串比较都短,或者使用有缺陷的随机数生成器),进而导致攻击者可能会劫持到会话的,可以使用一个相对简单随机数生成代码,如下所示:&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>StringBuilder和StringBuffer有哪些区别</title>
    <link href="http://yoursite.com/2016/02/03/StringBuilder%E5%92%8CStringBuffer%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2016/02/03/StringBuilder和StringBuffer有哪些区别/</id>
    <published>2016-02-03T02:06:15.000Z</published>
    <updated>2018-03-08T02:12:08.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StringBuilder和StringBuffer有哪些区别呢"><a href="#StringBuilder和StringBuffer有哪些区别呢" class="headerlink" title="StringBuilder和StringBuffer有哪些区别呢"></a>StringBuilder和StringBuffer有哪些区别呢</h2><h3 id="最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。"><a href="#最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。" class="headerlink" title="最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。"></a>最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。</h3><p>因此，StringBuilder会比StringBuffer快。</p><p>如果你</p><ul><li>非常非常追求性能（其实这两个都不慢，比直接操作String，要快非常多了）</li><li>不需要考虑线程安全问题,</li><li>JRE是1.5+</li></ul><p>可以用StringBuilder,反之，请用StringBuffer。<br><a id="more"></a>s<br>性能测试例子:</p><p>如下这个例子，使用StringBuffer，耗时2241ms,而StringBuilder是753ms<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> N = <span class="number">77777777</span>;</div><div class="line">        <span class="keyword">long</span> t;</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">            t = System.currentTimeMillis();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i --&gt; <span class="number">0</span> ;) &#123;</div><div class="line">                sb.append(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(System.currentTimeMillis() - t);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#123;</div><div class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">            t = System.currentTimeMillis();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i --&gt; <span class="number">0</span> ;) &#123;</div><div class="line">                sb.append(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(System.currentTimeMillis() - t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>stackoverflow讨论原址<br><a href="http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer" target="_blank" rel="external">http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;StringBuilder和StringBuffer有哪些区别呢&quot;&gt;&lt;a href=&quot;#StringBuilder和StringBuffer有哪些区别呢&quot; class=&quot;headerlink&quot; title=&quot;StringBuilder和StringBuffer有哪些区别呢&quot;&gt;&lt;/a&gt;StringBuilder和StringBuffer有哪些区别呢&lt;/h2&gt;&lt;h3 id=&quot;最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。&quot;&gt;&lt;a href=&quot;#最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。&quot; class=&quot;headerlink&quot; title=&quot;最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。&quot;&gt;&lt;/a&gt;最主要的区别，StringBuffer的实现用了synchronized（锁），而StringBuilder没有。&lt;/h3&gt;&lt;p&gt;因此，StringBuilder会比StringBuffer快。&lt;/p&gt;
&lt;p&gt;如果你&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非常非常追求性能（其实这两个都不慢，比直接操作String，要快非常多了）&lt;/li&gt;
&lt;li&gt;不需要考虑线程安全问题,&lt;/li&gt;
&lt;li&gt;JRE是1.5+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用StringBuilder,反之，请用StringBuffer。&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
