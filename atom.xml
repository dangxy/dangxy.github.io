<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dangxy99的Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-01T08:48:49.973Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>dangxy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 常用的基本命令</title>
    <link href="http://yoursite.com/2020/01/01/git-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/01/01/git-常用的基本命令/</id>
    <published>2020-01-01T08:48:49.000Z</published>
    <updated>2020-01-01T08:48:49.973Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2020plan</title>
    <link href="http://yoursite.com/2020/01/01/2020plan/"/>
    <id>http://yoursite.com/2020/01/01/2020plan/</id>
    <published>2020-01-01T08:42:53.000Z</published>
    <updated>2020-01-01T08:42:53.567Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="http://yoursite.com/2018/03/08/Android-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/08/Android-设计模式-观察者模式/</id>
    <published>2018-03-08T02:37:55.000Z</published>
    <updated>2018-03-10T16:41:00.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。<br>结构图</p><a id="more"></a><p><img src="Android%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/73B1C5D6-087A-4E94-947A-E5DD6CC067BE.png" alt=""></p><ol><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ol><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 更新方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinUser</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">// 微信用户名</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeixinUser</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        System.out.println(name + <span class="string">"-"</span> + message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加订阅者</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除订阅者</div><div class="line">     * <span class="doctag">@param</span> observer</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知订阅者更新消息</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//实现</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">//储存订阅公众号的微信用户</span></div><div class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserlist = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        weixinUserlist.add(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        weixinUserlist.remove(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer observer : weixinUserlist) &#123;</div><div class="line">            observer.update(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SubscriptionSubject mSubscriptionSubject=<span class="keyword">new</span> SubscriptionSubject();</div><div class="line">        <span class="comment">//创建微信用户</span></div><div class="line">        WeixinUser user1=<span class="keyword">new</span> WeixinUser(<span class="string">"杨影枫"</span>);</div><div class="line">        WeixinUser user2=<span class="keyword">new</span> WeixinUser(<span class="string">"月眉儿"</span>);</div><div class="line">        WeixinUser user3=<span class="keyword">new</span> WeixinUser(<span class="string">"紫轩"</span>);</div><div class="line">        <span class="comment">//订阅公众号</span></div><div class="line">        mSubscriptionSubject.attach(user1);</div><div class="line">        mSubscriptionSubject.attach(user2);</div><div class="line">        mSubscriptionSubject.attach(user3);</div><div class="line">        <span class="comment">//公众号更新发出消息给订阅的微信用户</span></div><div class="line">        mSubscriptionSubject.notify(<span class="string">"专栏更新了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;观察者模式（又被称为发布-订阅（Publish/Subscribe）模式，属于行为型模式的一种，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。&lt;br&gt;结构图&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android -handler源码解析</title>
    <link href="http://yoursite.com/2018/01/20/Android%20-handler%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2018/01/20/Android -handler源码解析/</id>
    <published>2018-01-20T10:45:33.337Z</published>
    <updated>2018-03-10T16:44:29.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Looper-源码解析"><a href="#Looper-源码解析" class="headerlink" title="Looper 源码解析"></a>Looper 源码解析</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//判断sThreadLocal是否为null，否则抛出异常</span></div><div class="line"><span class="comment">//即Looper.prepare()方法不能被调用两次</span></div><div class="line"><span class="comment">//也就是说，一个线程中只能对应一个Looper实例</span></div><div class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//sThreadLocal是一个ThreadLocal对象，用于在一个线程中存储变量</span></div><div class="line"><span class="comment">//实例化Looper对象并存放在ThreadLocal</span></div><div class="line"><span class="comment">//这说明Looper是存放在Thread线程里的</span></div><div class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(<span class="keyword">true</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">//再来看下Looper的构造方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line"><span class="comment">//创建了一个MessageQueue（消息队列）</span></div><div class="line"><span class="comment">//这说明，当创建一个Looper实例时，会自动创建一个与之配对的MessageQueue（消息队列）</span></div><div class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">        mRun = <span class="keyword">true</span>;</div><div class="line">        mThread = Thread.currentThread();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="消息循环-Loop-方法"><a href="#消息循环-Loop-方法" class="headerlink" title="消息循环 Loop()方法"></a>消息循环 Loop()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//myLooper()方法作用是返回sThreadLocal存储的Looper实例，如果me为null，loop()则抛出异常</span></div><div class="line"><span class="comment">//也就是说loop方法的执行必须在prepare方法之后运行</span></div><div class="line"><span class="comment">//也就是说，消息循环必须要先在线程当中创建Looper实例</span></div><div class="line">        <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//获取looper实例中的mQueue（消息队列）</span></div><div class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line"></div><div class="line">        Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"><span class="comment">//进入消息循环</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line"><span class="comment">//next()方法用于取出消息队列里的消息</span></div><div class="line"><span class="comment">//如果取出的消息为空，则线程阻塞</span></div><div class="line">            Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">          </div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">  </div><div class="line">            Printer logging = me.mLogging;</div><div class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"><span class="comment">//消息派发：把消息派发给msg的target属性，然后用dispatchMessage方法去处理</span></div><div class="line"><span class="comment">//Msg的target其实就是handler对象，下面会继续分析</span></div><div class="line">            msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">                logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">            <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">                Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                        + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                        + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                        + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                        + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">            &#125;</div><div class="line"><span class="comment">//释放消息占据的资源</span></div><div class="line">            msg.recycle();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Handler-源码"><a href="#Handler-源码" class="headerlink" title="Handler 源码"></a>Handler 源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                    klass.getCanonicalName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//通过Looper.myLooper()获取了当前线程保存的Looper实例，如果线程没有Looper实例那么会抛出异常</span></div><div class="line"><span class="comment">//这说明在一个没有创建Looper的线程中是无法创建一个Handler对象的</span></div><div class="line"><span class="comment">//所以说我们在子线程中创建一个Handler时首先需要创建Looper，并且开启消息循环才能够使用这个Handler。</span></div><div class="line">        mLooper = Looper.myLooper();</div><div class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//获取了这个Looper实例中保存的MessageQueue（消息队列）</span></div><div class="line"><span class="comment">//这样就保证了handler的实例与我们Looper实例中MessageQueue关联上了</span></div><div class="line"></div><div class="line">        mQueue = mLooper.mQueue;</div><div class="line">        mCallback = callback;</div><div class="line">        mAsynchronous = async;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><ol><li><p>send的发送方法：sendMessage()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//我们往下扒</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(Message msg, <span class="keyword">long</span> delayMillis)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</div><div class="line">            delayMillis = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line"><span class="comment">//直接获取MessageQueue</span></div><div class="line">        MessageQueue queue = mQueue;</div><div class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//调用了enqueueMessage方法</span></div><div class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//调用sendMessage方法其实最后是调用了enqueueMessage方法</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line"><span class="comment">//为msg.target赋值为this，也就是把当前的handler作为msg的target属性</span></div><div class="line"><span class="comment">//如果大家还记得Looper的loop()方法会取出每个msg然后执行msg.target.dispatchMessage(msg)去处理消息，其实就是派发给相应的Handler</span></div><div class="line">        msg.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"><span class="comment">//最终调用queue的enqueueMessage的方法，也就是说handler发出的消息，最终会保存到消息队列中去。</span></div><div class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>Post 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">showhandler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    String line = <span class="string">"\n"</span>;</div><div class="line">                    StringBuffer text = <span class="keyword">new</span> StringBuffer(show.getText());</div><div class="line">                            text.append(line).append(<span class="string">"angelababy:Yes,I do"</span>);</div><div class="line">                            show.setText(text);</div><div class="line">                &#125;</div></pre></td></tr></table></figure></li><li><p>dispathMessage()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">            handleCallback(msg);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ol><h3 id="在Activity启动应用的时候"><a href="#在Activity启动应用的时候" class="headerlink" title="在Activity启动应用的时候"></a>在Activity启动应用的时候</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个进程会默认生成一个主线程</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"> ......</div><div class="line"><span class="comment">//主线程生成时自动通过prepareMainLooper方法为主线程创建一个Looper</span></div><div class="line"><span class="comment">//prepare()方法是用于在子线程中创建一个Looper对象，在子线程中是可以退出消息循环的：调用消息队列的quit方法</span></div><div class="line"><span class="comment">//Looper生成时会自动生成与之配套的消息队列</span></div><div class="line">Looper.prepareMainLooper(); </div><div class="line">ActivityThread thread = <span class="keyword">new</span> ActivityThread(); </div><div class="line">thread.attach(<span class="keyword">false</span>);</div><div class="line"> ...... </div><div class="line"><span class="comment">//loop()方法开启消息循环</span></div><div class="line"><span class="comment">//主线程的消息循环是不允许被退出的</span></div><div class="line">Looper.loop(); </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="MessageQueue-入队"><a href="#MessageQueue-入队" class="headerlink" title="MessageQueue 入队"></a>MessageQueue 入队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line"></div><div class="line">        ......</div><div class="line"></div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="MessageQueue出队"><a href="#MessageQueue出队" class="headerlink" title="MessageQueue出队"></a>MessageQueue出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125;</div><div class="line"><span class="comment">// nativePollOnce方法在native层，若是nextPollTimeoutMillis为-1，这时候消息队列处于等待状态。 　　</span></div><div class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">            Message prevMsg = <span class="keyword">null</span>;</div><div class="line">            Message msg = mMessages;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line"><span class="comment">//按照我们设置的时间取出消息</span></div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Got a message.</span></div><div class="line">                    mBlocked = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                        prevMsg.next = msg.next;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mMessages = msg.next;</div><div class="line">                    &#125;</div><div class="line">                    msg.next = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    <span class="keyword">return</span> msg;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// 如果消息队列中没有消息，将nextPollTimeoutMillis设为-1，下次循环消息队列则处于等待状态</span></div><div class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">           </div><div class="line"><span class="comment">//退出消息队列，返回null，这时候Looper中的消息循环也会终止。 </span></div><div class="line">            <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">                dispose();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        .....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>线程本地存储区（Thread Local Storage，简称为TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。TLS常用的操作方法</p><ol><li><p>ThreadLocal.set(T value)：将value存储到当前线程的TLS区域，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread(); <span class="comment">//获取当前线程</span></div><div class="line">    Values values = values(currentThread); <span class="comment">//查找当前线程的本地储存区</span></div><div class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//当线程本地存储区，尚未存储该线程相关信息时，则创建Values对象</span></div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//保存数据value到当前线程this</span></div><div class="line">    values.put(<span class="keyword">this</span>, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>ThreadLocal.get()：获取当前线程TLS区域的数据，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    Thread currentThread = Thread.currentThread(); </div><div class="line">    <span class="comment">//获取当前线程</span></div><div class="line">    Values values = values(currentThread); </div><div class="line">    <span class="comment">//查找当前线程的本地储存区</span></div><div class="line">    <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</div><div class="line">        Object[] table = values.table;</div><div class="line">        <span class="keyword">int</span> index = hash &amp; values.mask;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.reference == table[index]) &#123;</div><div class="line">            <span class="keyword">return</span> (T) table[index + <span class="number">1</span>]; </div><div class="line">            <span class="comment">//返回当前线程储存区中的数据</span></div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//创建Values对象</span></div><div class="line">        values = initializeValues(currentThread);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (T) values.getAfterMiss(<span class="keyword">this</span>); </div><div class="line">    <span class="comment">//从目标线程存储区没有查询是则返回null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Looper-源码解析&quot;&gt;&lt;a href=&quot;#Looper-源码解析&quot; class=&quot;headerlink&quot; title=&quot;Looper 源码解析&quot;&gt;&lt;/a&gt;Looper 源码解析&lt;/h3&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>数据库- Room 错误tips</title>
    <link href="http://yoursite.com/2018/01/09/%E6%95%B0%E6%8D%AE%E5%BA%93-%20Room%20%E9%94%99%E8%AF%AFtips/"/>
    <id>http://yoursite.com/2018/01/09/数据库- Room 错误tips/</id>
    <published>2018-01-08T16:00:00.000Z</published>
    <updated>2018-03-10T16:49:18.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DB-room"><a href="#DB-room" class="headerlink" title="DB/room"></a>DB/room</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Error:(<span class="number">12</span>, <span class="number">17</span>) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to <span class="keyword">false</span>.</div><div class="line"></div><div class="line">Error:(<span class="number">21</span>, <span class="number">27</span>) 错误: To use RxJava2 features, you must add `rxjava2` artifact from Room as a dependency. android.arch.persistence.room:rxjava2:&lt;version&gt;</div></pre></td></tr></table></figure><a id="more"></a><p>解决方案</p><ol><li>在创建DataBase 是加上{exportSchema = false}<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Database</span>(entities = &#123;Wait.class&#125;,version = <span class="number">1</span>, exportSchema = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitDataBase</span> <span class="keyword">extends</span> <span class="title">RoomDatabase</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WaitDataBase sInstance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WaitDataBase <span class="title">getDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            sInstance = Room.databaseBuilder(ReadhubApplication.getInstance(), WaitDataBase.class,</div><div class="line">                    <span class="string">"Readhub"</span>).build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        sInstance = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">abstract</span> WaitDao  <span class="title">waitDao</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DB-room&quot;&gt;&lt;a href=&quot;#DB-room&quot; class=&quot;headerlink&quot; title=&quot;DB/room&quot;&gt;&lt;/a&gt;DB/room&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Error:(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;) 警告: Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide `room.schemaLocation` annotation processor argument OR set exportSchema to &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error:(&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;) 错误: To use RxJava2 features, you must add `rxjava2` artifact from Room as a dependency. android.arch.persistence.room:rxjava2:&amp;lt;version&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="sql room" scheme="http://yoursite.com/tags/sql-room/"/>
    
  </entry>
  
  <entry>
    <title>Android- 截取view保存为Bitmap</title>
    <link href="http://yoursite.com/2017/12/24/Android-%20%E6%88%AA%E5%8F%96view%E4%BF%9D%E5%AD%98%E4%B8%BABitmap/"/>
    <id>http://yoursite.com/2017/12/24/Android- 截取view保存为Bitmap/</id>
    <published>2017-12-23T16:00:00.000Z</published>
    <updated>2018-03-10T13:39:39.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建Bitmap"><a href="#创建Bitmap" class="headerlink" title="创建Bitmap"></a>创建Bitmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Canvas sCanvas = <span class="keyword">new</span> Canvas();</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 从一个view创建Bitmap:</div><div class="line">    * 注意点：绘制之前要清掉 View 的焦点，因为焦点可能会改变一个 View 的 UI 状态</div><div class="line">    * 来源：https://github.com/tyrantgit/ExplosionField</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> view</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapFromView</span><span class="params">(View view, <span class="keyword">float</span> scale)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ImageView) &#123;</div><div class="line">           Drawable drawable = ((ImageView) view).getDrawable();</div><div class="line">           <span class="keyword">if</span> (drawable != <span class="keyword">null</span> &amp;&amp; drawable <span class="keyword">instanceof</span> BitmapDrawable) &#123;</div><div class="line">               <span class="keyword">return</span> ((BitmapDrawable) drawable).getBitmap();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       view.clearFocus();</div><div class="line">       Bitmap bitmap = createBitmapSafely((<span class="keyword">int</span>) (view.getWidth() * scale),</div><div class="line">               (<span class="keyword">int</span>) (view.getHeight() * scale), Bitmap.Config.ARGB_8888, <span class="number">1</span>);</div><div class="line">       <span class="keyword">if</span> (bitmap != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">synchronized</span> (sCanvas) &#123;</div><div class="line">               Canvas canvas = sCanvas;</div><div class="line">               canvas.setBitmap(bitmap);</div><div class="line">               canvas.save();</div><div class="line">               canvas.drawColor(Color.WHITE); <span class="comment">// 防止 View 上面有些区域空白导致最终 Bitmap 上有些区域变黑</span></div><div class="line">               canvas.scale(scale, scale);</div><div class="line">               view.draw(canvas);</div><div class="line">               canvas.restore();</div><div class="line">               canvas.setBitmap(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> bitmap;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapFromView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> createBitmapFromView(view, <span class="number">1f</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h3 id="创建安全Bitmap"><a href="#创建安全Bitmap" class="headerlink" title="创建安全Bitmap"></a>创建安全Bitmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 安全的创建bitmap;如果新建 Bitmap 时产生了 OOM，可以主动进行一次 GC - System.gc()，然后再次尝试创建</div><div class="line">  *</div><div class="line">  * <span class="doctag">@param</span> width</div><div class="line">  * <span class="doctag">@param</span> height</div><div class="line">  * <span class="doctag">@param</span> config</div><div class="line">  * <span class="doctag">@param</span> retryCount</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmapSafely</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, Bitmap.Config config, <span class="keyword">int</span> retryCount)</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         <span class="keyword">return</span> Bitmap.createBitmap(width, height, config);</div><div class="line">     &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">         <span class="keyword">if</span> (retryCount &gt; <span class="number">0</span>) &#123;</div><div class="line">             System.gc();</div><div class="line">             <span class="keyword">return</span> createBitmapSafely(width, height, config, retryCount - <span class="number">1</span>);</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建Bitmap&quot;&gt;&lt;a href=&quot;#创建Bitmap&quot; class=&quot;headerlink&quot; title=&quot;创建Bitmap&quot;&gt;&lt;/a&gt;创建Bitmap&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android-okhttp的基本用法</title>
    <link href="http://yoursite.com/2017/12/03/Android-okhttp%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/12/03/Android-okhttp的基本用法/</id>
    <published>2017-12-02T17:13:53.731Z</published>
    <updated>2018-03-10T16:46:41.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方WIKI<a href="https://github.com/square/okhttp/wiki/HTTPS" target="_blank" rel="external">地址</a></p></blockquote><h3 id="常见的运用方式"><a href="#常见的运用方式" class="headerlink" title="常见的运用方式:"></a>常见的运用方式:</h3><ol><li>一般的get请求</li><li>一般的post请求</li><li>基于Http的文件上传</li><li>文件下载</li><li>加载图片</li><li>支持请求回调，直接返回对象、对象集合</li><li>支持session的保持</li></ol><a id="more"></a><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖:"></a>添加依赖:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.okhttp:okhttp:2.4.0'</span></div></pre></td></tr></table></figure><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求:"></a>GET 请求:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建okHttpClient对象</span></div><div class="line">OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line"><span class="comment">//创建一个Request</span></div><div class="line"><span class="keyword">final</span> Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                .url(<span class="string">"https://github.com/hongyangAndroid"</span>)</div><div class="line">                .build();</div><div class="line"><span class="comment">//以通过Request.Builder设置更多的参数比如：header、method</span></div><div class="line"><span class="comment">//new call</span></div><div class="line">Call call = mOkHttpClient.newCall(request); </div><div class="line"><span class="comment">//请求加入调度</span></div><div class="line">call.enqueue(<span class="keyword">new</span> Callback()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, IOException e)</span></span></div><div class="line">            &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="keyword">final</span> Response response)</span> <span class="keyword">throws</span> IOException</span></div><div class="line">            &#123;</div><div class="line">                    <span class="comment">//String htmlStr =  response.body().string();</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Request request = buildMultipartFormRequest(</div><div class="line">        url, <span class="keyword">new</span> File[]&#123;file&#125;, <span class="keyword">new</span> String[]&#123;fileKey&#125;, <span class="keyword">null</span>);</div><div class="line">FormEncodingBuilder builder = <span class="keyword">new</span> FormEncodingBuilder();   </div><div class="line">builder.add(<span class="string">"username"</span>,<span class="string">"张鸿洋"</span>);</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">                   .url(url)</div><div class="line">                .post(builder.build())</div><div class="line">                .build();</div><div class="line"> mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback()&#123;&#125;);</div></pre></td></tr></table></figure><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">File file = new File(Environment.getExternalStorageDirectory(), "balabala.mp4");</div><div class="line"></div><div class="line">RequestBody fileBody = RequestBody.create(MediaType.parse("application/octet-stream"), file);</div><div class="line"></div><div class="line">RequestBody requestBody = new MultipartBuilder()</div><div class="line">     .type(MultipartBuilder.FORM)</div><div class="line">     .addPart(Headers.of(</div><div class="line">          "Content-Disposition", </div><div class="line">              "form-data; name=\"username\""), </div><div class="line">          RequestBody.create(null, "张鸿洋"))</div><div class="line">     .addPart(Headers.of(</div><div class="line">         "Content-Disposition", </div><div class="line">         "form-data; name=\"mFile\"; </div><div class="line">         filename=\"wjd.mp4\""), fileBody)</div><div class="line">     .build();</div><div class="line"></div><div class="line">Request request = new Request.Builder()</div><div class="line">    .url("http://192.168.1.103:8080/okHttpServer/fileUpload")</div><div class="line">    .post(requestBody)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Call call = mOkHttpClient.newCall(request);</div><div class="line">call.enqueue(new Callback()</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="Okhttp的简单封装"><a href="#Okhttp的简单封装" class="headerlink" title="Okhttp的简单封装"></a>Okhttp的简单封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> OkHttpClient mOkHttpClient = <span class="keyword">new</span> OkHttpClient();</div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        mOkHttpClient.setConnectTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 该不会开启异步线程。</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Response <span class="title">execute</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        <span class="keyword">return</span> mOkHttpClient.newCall(request).execute();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启异步线程访问网络</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@param</span> responseCallback</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Request request, Callback responseCallback)</span></span>&#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(responseCallback);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启异步线程访问网络, 且不在意返回结果（实现空callback）</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Request request)</span></span>&#123;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response arg0)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request arg0, IOException arg1)</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStringFromServer</span><span class="params">(String url)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</div><div class="line">        Response response = execute(request);</div><div class="line">        <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">            String responseUrl = response.body().string();</div><div class="line">            <span class="keyword">return</span> responseUrl;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET_NAME = <span class="string">"UTF-8"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里使用了HttpClinet的API。只是为了方便</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatParams</span><span class="params">(List&lt;BasicNameValuePair&gt; params)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> URLEncodedUtils.format(params, CHARSET_NAME);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为HttpGet 的 url 方便的添加多个name value 参数。</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> params</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">attachHttpGetParams</span><span class="params">(String url, List&lt;BasicNameValuePair&gt; params)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + formatParams(params);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 为HttpGet 的 url 方便的添加1个name value 参数。</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">attachHttpGetParam</span><span class="params">(String url, String name, String value)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">"?"</span> + name + <span class="string">"="</span> + value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GET-同步请求"><a href="#GET-同步请求" class="headerlink" title="GET 同步请求"></a>GET 同步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"> </div><div class="line">    Response response = client.newCall(request).execute();</div><div class="line">    <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line"> </div><div class="line">    Headers responseHeaders = response.headers();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">      System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    System.out.println(response.body().string());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="GET-异步请求"><a href="#GET-异步请求" class="headerlink" title="GET 异步请求"></a>GET 异步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"> </div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Request request, Throwable throwable)</span> </span>&#123;</div><div class="line">        throwable.printStackTrace();</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">      <span class="meta">@Override</span> </div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!response.isSuccessful()) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Unexpected code "</span> + response);</div><div class="line">        Headers responseHeaders = response.headers();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; responseHeaders.size(); i++) &#123;</div><div class="line">          System.out.println(responseHeaders.name(i) + <span class="string">": "</span> + responseHeaders.value(i));</div><div class="line">        &#125;</div><div class="line">        System.out.println(response.body().string());</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">client.setConnectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">client.setWriteTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</div><div class="line">client.setReadTimeout(<span class="number">30</span>, TimeUnit.SECONDS);</div></pre></td></tr></table></figure><h3 id="Okhttp的拦截器"><a href="#Okhttp的拦截器" class="headerlink" title="Okhttp的拦截器"></a>Okhttp的拦截器</h3><p>注册一个应用拦截器通过 OkHttpClient.Builder调用 addInterceptor():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">    .addInterceptor(<span class="keyword">new</span> LoggingInterceptor())</div><div class="line">    .build();</div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">    .url(<span class="string">"http://www.publicobject.com/helloworld.txt"</span>)</div><div class="line">    .header(<span class="string">"User-Agent"</span>, <span class="string">"OkHttp Example"</span>)</div><div class="line">    .build();</div><div class="line"></div><div class="line">Response response = client.newCall(request).execute();</div><div class="line">response.body().close();</div><div class="line"><span class="comment">// .addNetworkInterceptor(new LoggingInterceptor())</span></div></pre></td></tr></table></figure></p><h3 id="LoggingInterceptor"><a href="#LoggingInterceptor" class="headerlink" title="LoggingInterceptor"></a>LoggingInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request request = chain.request();</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line">    logger.info(String.format(<span class="string">"Sending request %s on %s%n%s"</span>,</div><div class="line">        request.url(), chain.connection(), request.headers()));</div><div class="line"></div><div class="line">    Response response = chain.proceed(request);</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    logger.info(String.format(<span class="string">"Received response for %s in %.1fms%n%s"</span>,</div><div class="line">        response.request().url(), (t2 - t1) / <span class="number">1e6</span>d, response.headers()));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令有下几种：</p><ol><li>Public指示响应可被任何缓存区缓存。</li><li>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。</li><li>no-cache指示请求或响应消息不能缓存</li><li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li><li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</li><li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</li><li>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">final</span> CacheControl.Builder builder = <span class="keyword">new</span> CacheControl.Builder();</div><div class="line">            builder.noCache();<span class="comment">//不使用缓存，全部走网络</span></div><div class="line">            builder.noStore();<span class="comment">//不使用缓存，也不存储缓存</span></div><div class="line">            builder.onlyIfCached();<span class="comment">//只使用缓存</span></div><div class="line">            builder.noTransform();<span class="comment">//禁止转码</span></div><div class="line">            builder.maxAge(<span class="number">10</span>, TimeUnit.MILLISECONDS);<span class="comment">//指示客户机可以接收生存期不大于指定时间的响应。</span></div><div class="line">            builder.maxStale(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//指示客户机可以接收超出超时期间的响应消息</span></div><div class="line">            builder.minFresh(<span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//指示客户机可以接收响应时间小于当前时间加上指定时间的响应。</span></div><div class="line">            CacheControl cache = builder.build();<span class="comment">//cacheControl</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">OkHttpClient.Builder newBuilder = mOkHttpClient.newBuilder();</div><div class="line">         newBuilder.addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request request = chain.request();</div><div class="line">                <span class="keyword">boolean</span> connected = NetworkUtil.isConnected(context);</div><div class="line">                <span class="keyword">if</span> (!connected) &#123;</div><div class="line">                    request = request.newBuilder().cacheControl(CacheControl.FORCE_CACHE).build();</div><div class="line">                &#125;</div><div class="line">                Response response = chain.proceed(request);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></li></ol><h3 id="在Request中添加Token的拦截器"><a href="#在Request中添加Token的拦截器" class="headerlink" title="在Request中添加Token的拦截器"></a>在Request中添加Token的拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Interceptor mTokenInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request originalRequest = chain.request();</div><div class="line">        <span class="keyword">if</span> (Your.sToken == <span class="keyword">null</span> || alreadyHasAuthorizationHeader(originalRequest)) &#123;</div><div class="line">            <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">        &#125;</div><div class="line">        Request authorised = originalRequest.newBuilder()</div><div class="line">            .header(<span class="string">"Authorization"</span>, Your.sToken)</div><div class="line">            .build();</div><div class="line">        <span class="keyword">return</span> chain.proceed(authorised);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="Okhttp-返回请求获取cookie"><a href="#Okhttp-返回请求获取cookie" class="headerlink" title="Okhttp  返回请求获取cookie"></a>Okhttp  返回请求获取cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceivedCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReceivedCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      </div><div class="line">        Response originalResponse = chain.proceed(chain.request());</div><div class="line">        <span class="comment">//这里获取请求返回的cookie</span></div><div class="line">        <span class="keyword">if</span> (!originalResponse.headers(<span class="string">"Set-Cookie"</span>).isEmpty()) &#123;</div><div class="line">            <span class="keyword">final</span> StringBuffer cookieBuffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">            <span class="comment">//最近在学习RxJava,这里用了RxJava的相关API大家可以忽略,用自己逻辑实现即可.大家可以用别的方法保存cookie数据</span></div><div class="line">            Observable.from(originalResponse.headers(<span class="string">"Set-Cookie"</span>))</div><div class="line">                    .map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                            String[] cookieArray = s.split(<span class="string">";"</span>);</div><div class="line">                            <span class="keyword">return</span> cookieArray[<span class="number">0</span>];</div><div class="line">                        &#125;</div><div class="line">                    &#125;)</div><div class="line">                    .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String cookie)</span> </span>&#123;</div><div class="line">                            cookieBuffer.append(cookie).append(<span class="string">";"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">"cookie"</span>, Context.MODE_PRIVATE);</div><div class="line">            SharedPreferences.Editor editor = sharedPreferences.edit();</div><div class="line">            editor.putString(<span class="string">"cookie"</span>, cookieBuffer.toString());</div><div class="line">            editor.commit();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> originalResponse;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="Okhttp-请求中添加cookie"><a href="#Okhttp-请求中添加cookie" class="headerlink" title="Okhttp 请求中添加cookie"></a>Okhttp 请求中添加cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCookiesInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddCookiesInterceptor</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">final</span> Request.Builder builder = chain.request().newBuilder();</div><div class="line">        SharedPreferences sharedPreferences = context.getSharedPreferences(<span class="string">"cookie"</span>, Context.MODE_PRIVATE);</div><div class="line"><span class="comment">//最近在学习RxJava,这里用了RxJava的相关API大家可以忽略,用自己逻辑实现即可  </span></div><div class="line">                Observable.just(sharedPreferences.getString(<span class="string">"cookie"</span>, <span class="string">""</span>))</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String cookie)</span> </span>&#123;</div><div class="line">                        <span class="comment">//添加cookie</span></div><div class="line">                        builder.addHeader(<span class="string">"Cookie"</span>, cookie);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        <span class="keyword">return</span> chain.proceed(builder.build());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官方WIKI&lt;a href=&quot;https://github.com/square/okhttp/wiki/HTTPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;常见的运用方式&quot;&gt;&lt;a href=&quot;#常见的运用方式&quot; class=&quot;headerlink&quot; title=&quot;常见的运用方式:&quot;&gt;&lt;/a&gt;常见的运用方式:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一般的get请求&lt;/li&gt;
&lt;li&gt;一般的post请求&lt;/li&gt;
&lt;li&gt;基于Http的文件上传&lt;/li&gt;
&lt;li&gt;文件下载&lt;/li&gt;
&lt;li&gt;加载图片&lt;/li&gt;
&lt;li&gt;支持请求回调，直接返回对象、对象集合&lt;/li&gt;
&lt;li&gt;支持session的保持&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android进程保活进程</title>
    <link href="http://yoursite.com/2017/12/02/Android%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/12/02/Android进程保活进程/</id>
    <published>2017-12-02T15:51:20.399Z</published>
    <updated>2018-03-10T16:48:19.419Z</updated>
    
    <content type="html"><![CDATA[<p>Android 进程保活招式大全 [<a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653577617&amp;idx=1&amp;sn=623256a2ff94641036a6c9eea17baab8&amp;scene=1&amp;srcid=0812awptdQtemQXqufZJea3D%23rd" target="_blank" rel="external">Android 进程保活招式大全</a>]<br>目前市面上的应用，貌似除了微信和手Q都会比较担心被用户或者系统（厂商）杀死问题。本文对 Android 进程拉活进行一个总结。</p><a id="more"></a><p>Android 进程拉活包括两个层面：<br>A. 提供进程优先级，降低进程被杀死的概率<br>本文下面就从这两个方面做一下总结。</p><ol><li>进程的优先级<br>Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要清除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是清除重要性稍低一级的进程，依此类推，以回收系统资源。<br>进程的重要性，划分5级：</li><li>前台进程(Foreground process)</li><li>可见进程(Visible process)</li><li>服务进程(Service process)</li><li>后台进程(Background process)</li><li>空进程(Empty process)</li></ol><p>1.1. 前台进程 —— Foreground process</p><p>用户当前操作所必需的进程。通常在任意给定时间前台进程都为数不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。<br>A. 拥有用户正在交互的 Activity（已调用 onResume()）<br>B. 拥有某个 Service，后者绑定到用户正在交互的 Activity<br>C. 拥有正在“前台”运行的 Service（服务已调用 startForeground()）<br>D. 拥有正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）<br>E. 拥有正执行其 onReceive() 方法的 BroadcastReceiver<br>1.2. 可见进程 —— Visible process</p><p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。可见进程被视为是极其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会终止这些进程。<br>A. 拥有不在前台、但仍对用户可见的 Activity（已调用 onPause()）。<br>B. 拥有绑定到可见（或前台）Activity 的 Service<br>1.3. 服务进程 —— Service process</p><p>尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。<br>A. 正在运行 startService() 方法启动的服务，且不属于上述两个更高类别进程的进程。<br>1.4. 后台进程 —— Background process</p><p>后台进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU 列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity 会恢复其所有可见状态。<br>A. 对用户不可见的 Activity 的进程（已调用 Activity的onStop() 方法）<br>1.5. 空进程 —— Empty process</p><p>保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间。 为使总体系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。<br>A. 不含任何活动应用组件的进程<br>详情参见：<br><a href="http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html</a></p><ol><li>Android 进程回收策略</li></ol><p>Android 中对于内存的回收，主要依靠 Lowmemorykiller 来完成，是一种根据 OOM_ADJ 阈值级别触发相应力度的内存回收的机制。<br>关于 OOM_ADJ 的说明如下：</p><p>其中红色部分代表比较容易被杀死的 Android 进程（OOM_ADJ&gt;=4）,绿色部分表示不容易被杀死的 Android 进程，其他表示非 Android 进程（纯 Linux 进程）。在 Lowmemorykiller 回收内存时会根据进程的级别优先杀死 OOM_ADJ 比较大的进程，对于优先级相同的进程则进一步受到进程所占内存和进程存活时间的影响。<br>Android 手机中进程被杀死可能有如下情况：</p><p>综上，可以得出减少进程被杀死概率无非就是想办法提高进程优先级，减少进程在内存不足等情况下被杀死的概率。</p><ol><li>提升进程优先级的方案</li></ol><p>3.1. 利用 Activity 提升权限</p><p>3.1.1. 方案设计思想</p><p>监控手机锁屏解锁事件，在屏幕锁屏时启动1个像素的 Activity，在用户解锁时将 Activity 销毁掉。注意该 Activity 需设计成用户无感知。<br>通过该方案，可以使进程的优先级在屏幕锁屏时间由4提升为最高优先级1。<br>3.1.2. 方案适用范围</p><p>适用场景： 本方案主要解决第三方应用及系统管理工具在检测到锁屏事件后一段时间（一般为5分钟以内）内会杀死后台进程，已达到省电的目的问题。<br>适用版本： 适用于所有的 Android 版本。<br>3.1.3. 方案具体实现</p><p>首先定义 Activity，并设置 Activity 的大小为1像素：</p><p>其次，从 AndroidManifest 中通过如下属性，排除 Activity 在 RecentTask 中的显示：</p><p>最后，控制 Activity 为透明：</p><p>Activity 启动与销毁时机的控制：</p><p>3.2. 利用 Notification 提升权限</p><p>3.2.1. 方案设计思想</p><p>Android 中 Service 的优先级为4，通过 setForeground 接口可以将后台 Service 设置为前台 Service，使进程的优先级由4提升为2，从而使进程的优先级仅仅低于用户当前正在交互的进程，与可见进程优先级一致，使进程被杀死的概率大大降低。<br>3.2.2. 方案实现挑战</p><p>从 Android2.3 开始调用 setForeground 将后台 Service 设置为前台 Service 时，必须在系统的通知栏发送一条通知，也就是前台 Service 与一条可见的通知时绑定在一起的。<br>对于不需要常驻通知栏的应用来说，该方案虽好，但却是用户感知的，无法直接使用。<br>3.2.3. 方案挑战应对措施</p><p>通过实现一个内部 Service，在 LiveService 和其内部 Service 中同时发送具有相同 ID 的 Notification，然后将内部 Service 结束掉。随着内部 Service 的结束，Notification 将会消失，但系统优先级依然保持为2。<br>3.2.4. 方案适用范围</p><p>适用于目前已知所有版本。<br>3.2.5. 方案具体实现</p><ol><li>进程死后拉活的方案</li></ol><p>4.1. 利用系统广播拉活</p><p>4.1.1. 方案设计思想</p><p>在发生特定系统事件时，系统会发出响应的广播，通过在 AndroidManifest 中“静态”注册对应的广播监听器，即可在发生响应事件时拉活。<br>常用的用于拉活的广播事件包括：</p><p>4.1.2. 方案适用范围</p><p>适用于全部 Android 平台。但存在如下几个缺点：<br>1） 广播接收器被管理软件、系统软件通过“自启管理”等功能禁用的场景无法接收到广播，从而无法自启。<br>2） 系统广播事件不可控，只能保证发生事件时拉活进程，但无法保证进程挂掉后立即拉活。<br>因此，该方案主要作为备用手段。<br>4.2. 利用第三方应用广播拉活</p><p>4.2.1. 方案设计思想</p><p>该方案总的设计思想与接收系统广播类似，不同的是该方案为接收第三方 Top 应用广播。<br>通过反编译第三方 Top 应用，如：手机QQ、微信、支付宝、UC浏览器等，以及友盟、信鸽、个推等 SDK，找出它们外发的广播，在应用中进行监听，这样当这些应用发出广播时，就会将我们的应用拉活。<br>4.2.2. 方案适用范围</p><p>该方案的有效程度除与系统广播一样的因素外，主要受如下因素限制：<br>1） 反编译分析过的第三方应用的多少<br>2） 第三方应用的广播属于应用私有，当前版本中有效的广播，在后续版本随时就可能被移除或被改为不外发。<br>这些因素都影响了拉活的效果。<br>4.3. 利用系统Service机制拉活</p><p>4.3.1. 方案设计思想</p><p>将 Service 设置为 START_STICKY，利用系统机制在 Service 挂掉后自动拉活：</p><p>4.3.2. 方案适用范围</p><p>如下两种情况无法拉活：</p><ol><li>Service 第一次被异常杀死后会在5秒内重启，第二次被杀死会在10秒内重启，第三次会在20秒内重启，一旦在短时间内 Service 被杀死达到5次，则系统不再拉起。</li><li>进程被取得 Root 权限的管理工具或系统工具通过 forestop 停止掉，无法重启。<br>4.4. 利用Native进程拉活</li></ol><p>4.4.1. 方案设计思想</p><p>主要思想：利用 Linux 中的 fork 机制创建 Native 进程，在 Native 进程中监控主进程的存活，当主进程挂掉后，在 Native 进程中立即对主进程进行拉活。<br>主要原理：在 Android 中所有进程和系统组件的生命周期受 ActivityManagerService 的统一管理。而且，通过 Linux 的 fork 机制创建的进程为纯 Linux 进程，其生命周期不受 Android 的管理。<br>4.4.2. 方案实现挑战</p><p>挑战一：在 Native 进程中如何感知主进程死亡。<br>要在 Native 进程中感知主进程是否存活有两种实现方式：</p><ol><li>在 Native 进程中通过死循环或定时器，轮训判断主进程是否存活，档主进程不存活时进行拉活。该方案的很大缺点是不停的轮询执行判断逻辑，非常耗电。</li><li>在主进程中创建一个监控文件，并且在主进程中持有文件锁。在拉活进程启动后申请文件锁将会被堵塞，一旦可以成功获取到锁，说明主进程挂掉，即可进行拉活。由于 Android 中的应用都运行于虚拟机之上，Java 层的文件锁与 Linux 层的文件锁是不同的，要实现该功能需要封装 Linux 层的文件锁供上层调用。<br>封装 Linux 文件锁的代码如下：</li></ol><p>Native 层中堵塞申请文件锁的部分代码：</p><p>挑战二：在 Native 进程中如何拉活主进程。<br>通过 Native 进程拉活主进程的部分代码如下，即通过 am 命令进行拉活。通过指定“—include-stopped-packages”参数来拉活主进程处于 forestop 状态的情况。</p><p>挑战三：如何保证 Native 进程的唯一。<br>从可扩展性和进程唯一等多方面考虑，将 Native 进程设计层 C/S 结构模式，主进程与 Native 进程通过 Localsocket 进行通信。在Native进程中利用 Localsocket 保证 Native 进程的唯一性，不至于出现创建多个 Native 进程以及 Native 进程变成僵尸进程等问题。</p><p>4.4.3. 方案适用范围</p><p>该方案主要适用于 Android5.0 以下版本手机。<br>该方案不受 forcestop 影响，被强制停止的应用依然可以被拉活，在 Android5.0 以下版本拉活效果非常好。<br>对于 Android5.0 以上手机，系统虽然会将native进程内的所有进程都杀死，这里其实就是系统“依次”杀死进程时间与拉活逻辑执行时间赛跑的问题，如果可以跑的比系统逻辑快，依然可以有效拉起。记得网上有人做过实验，该结论是成立的，在某些 Android 5.0 以上机型有效。<br>4.5. 利用 JobScheduler 机制拉活</p><p>4.5.1. 方案设计思想</p><p>Android5.0 以后系统对 Native 进程等加强了管理，Native 拉活方式失效。系统在 Android5.0 以上版本提供了 JobScheduler 接口，系统会定时调用该进程以使应用进行一些逻辑操作。<br>在本项目中，我对 JobScheduler 进行了进一步封装，兼容 Android5.0 以下版本。封装后 JobScheduler 接口的使用如下：</p><p>4.5.2. 方案适用范围</p><p>该方案主要适用于 Android5.0 以上版本手机。<br>该方案在 Android5.0 以上版本中不受 forcestop 影响，被强制停止的应用依然可以被拉活，在 Android5.0 以上版本拉活效果非常好。<br>仅在小米手机可能会出现有时无法拉活的问题。<br>4.6. 利用账号同步机制拉活</p><p>4.6.1. 方案设计思想</p><p>Android 系统的账号同步机制会定期同步账号进行，该方案目的在于利用同步机制进行进程的拉活。添加账号和设置同步周期的代码如下：</p><p>该方案需要在 AndroidManifest 中定义账号授权与同步服务。</p><p>4.6.2. 方案适用范围</p><p>该方案适用于所有的 Android 版本，包括被 forestop 掉的进程也可以进行拉活。<br>最新 Android 版本（Android N）中系统好像对账户同步这里做了变动，该方法不再有效。</p><ol><li>其他有效拉活方案</li></ol><p>经研究发现还有其他一些系统拉活措施可以使用，但在使用时需要用户授权，用户感知比较强烈。<br>这些方案包括：</p><ol><li>利用系统通知管理权限进行拉活</li><li>利用辅助功能拉活，将应用加入厂商或管理软件白名单。<br>这些方案需要结合具体产品特性来搞。<br>上面所有解释这些方案都是考虑的无 Root 的情况。<br>其他还有一些技术之外的措施，比如说应用内 Push 通道的选择：</li><li>国外版应用：接入 Google 的 GCM。</li><li>国内版应用：根据终端不同，在小米手机（包括 MIUI）接入小米推送、华为手机接入华为推送；其他手机可以考虑接入腾讯信鸽或极光推送与小米推送做 A/B Test。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 进程保活招式大全 [&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;amp;mid=2653577617&amp;amp;idx=1&amp;amp;sn=623256a2ff94641036a6c9eea17baab8&amp;amp;scene=1&amp;amp;srcid=0812awptdQtemQXqufZJea3D%23rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 进程保活招式大全&lt;/a&gt;]&lt;br&gt;目前市面上的应用，貌似除了微信和手Q都会比较担心被用户或者系统（厂商）杀死问题。本文对 Android 进程拉活进行一个总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android架构/MVP</title>
    <link href="http://yoursite.com/2017/06/12/Android%20%20-MVP/"/>
    <id>http://yoursite.com/2017/06/12/Android  -MVP/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2018-03-10T13:32:29.230Z</updated>
    
    <content type="html"><![CDATA[<p>#Android架构/MVP<br>不能直接继承基类 IBasePresenter IBaseView  创建xxxContract</p><a id="more"></a><h3 id="IBaseView"><a href="#IBaseView" class="headerlink" title="IBaseView"></a>IBaseView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示加载动画</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏加载</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 显示网络错误</div><div class="line">     * <span class="doctag">@param</span> onRetryListener 点击监听</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showNetError</span><span class="params">(EmptyLayout.OnRetryListener onRetryListener)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定生命周期</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    &lt;T&gt; <span class="function">LifecycleTransformer&lt;T&gt; <span class="title">bindToLife</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="IBasePresnter"><a href="#IBasePresnter" class="headerlink" title="IBasePresnter"></a>IBasePresnter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBaseNewPresenter</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从网路中获取数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="LoginContract"><a href="#LoginContract" class="headerlink" title="LoginContract"></a>LoginContract</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginContract</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ILoginView</span> <span class="keyword">extends</span> <span class="title">IBaseView</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ILoginPresenter</span> <span class="keyword">extends</span> <span class="title">IBaseNewPresenter</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Android架构/MVP&lt;br&gt;不能直接继承基类 IBasePresenter IBaseView  创建xxxContract&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题(2)</title>
    <link href="http://yoursite.com/2017/05/05/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(2)/"/>
    <id>http://yoursite.com/2017/05/05/工作中遇到的问题(2)/</id>
    <published>2017-05-05T12:40:15.000Z</published>
    <updated>2018-03-08T02:27:41.835Z</updated>
    
    <content type="html"><![CDATA[<p> 设置viewpagerIndicatior的下划线的宽度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setIndicator</span><span class="params">(Context context, TabLayout tabs, <span class="keyword">int</span> leftDip, <span class="keyword">int</span> rightDip)</span> </span>&#123;</div><div class="line">       Class&lt;?&gt; tabLayout = tabs.getClass();</div><div class="line">       Field tabStrip = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           tabStrip = tabLayout.getDeclaredField(<span class="string">"mTabStrip"</span>);</div><div class="line">       &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       tabStrip.setAccessible(<span class="keyword">true</span>);</div><div class="line">       LinearLayout ll_tab = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           ll_tab = (LinearLayout) tabStrip.get(tabs);</div><div class="line">       &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> left = (<span class="keyword">int</span>) (getDisplayMetrics(context).density * leftDip);</div><div class="line">       <span class="keyword">int</span> right = (<span class="keyword">int</span>) (getDisplayMetrics(context).density * rightDip);</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ll_tab.getChildCount(); i++) &#123;</div><div class="line">           View child = ll_tab.getChildAt(i);</div><div class="line">           child.setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">           LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(<span class="number">0</span>, LinearLayout.LayoutParams.MATCH_PARENT, <span class="number">1</span>);</div><div class="line">           params.leftMargin = left;</div><div class="line">           params.rightMargin = right;</div><div class="line">           child.setLayoutParams(params);</div><div class="line">           child.invalidate();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><a id="more"></a><p>Android键盘挡住输入框解决办法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftKeyboardUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏软键盘(只适用于Activity，不适用于Fragment)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideSoftKeyboard</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        View view = activity.getCurrentFocus();</div><div class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">            InputMethodManager inputMethodManager = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);</div><div class="line">            inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 隐藏软键盘(可用于Activity，Fragment)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hideSoftKeyboard</span><span class="params">(Context context, List&lt;View&gt; viewList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewList == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (View v : viewList) &#123;</div><div class="line">            inputMethodManager.hideSoftInputFromWindow(v.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 设置viewpagerIndicatior的下划线的宽度：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setIndicator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, TabLayout tabs, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; leftDip, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rightDip)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Class&amp;lt;?&amp;gt; tabLayout = tabs.getClass();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Field tabStrip = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           tabStrip = tabLayout.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;mTabStrip&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NoSuchFieldException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       tabStrip.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       LinearLayout ll_tab = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ll_tab = (LinearLayout) tabStrip.get(tabs);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (getDisplayMetrics(context).density * leftDip);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; right = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (getDisplayMetrics(context).density * rightDip);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; ll_tab.getChildCount(); i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           View child = ll_tab.getChildAt(i);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.setPadding(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           LinearLayout.LayoutParams params = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinearLayout.LayoutParams(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, LinearLayout.LayoutParams.MATCH_PARENT, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           params.leftMargin = left;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           params.rightMargin = right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.setLayoutParams(params);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           child.invalidate();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何用一行代码初始化一个ArrayList</title>
    <link href="http://yoursite.com/2017/05/03/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAArrayList/"/>
    <id>http://yoursite.com/2017/05/03/如何用一行代码初始化一个ArrayList/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2018-03-10T13:40:37.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>为了测试，我需要临时快速创建一个list。一开始我这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; places = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">places.add(<span class="string">"Buenos Aires"</span>);</div><div class="line">places.add(<span class="string">"Córdoba"</span>);</div><div class="line">places.add(<span class="string">"La Plata"</span>);</div><div class="line"></div><div class="line">之后我重构了下</div><div class="line"></div><div class="line">ArrayList&lt;String&gt; places = <span class="keyword">new</span> ArrayList&lt;String&gt;(</div><div class="line">Arrays.asList(<span class="string">"Buenos Aires"</span>, <span class="string">"Córdoba"</span>, <span class="string">"La Plata"</span>));</div></pre></td></tr></table></figure></p><p>是否有更加简便的方法呢？<br><a id="more"></a></p><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><h4 id="常见方式"><a href="#常见方式" class="headerlink" title="常见方式"></a>常见方式</h4><p>实际上，也许“最好”的方式，就是你写的这个方式，因为它不用再创建新的<code>List</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add(&quot;A&quot;);</div><div class="line">list.add(&quot;B&quot;);</div><div class="line">list.add(&quot;C&quot;);</div></pre></td></tr></table></figure></p><p>只是这个方式看上去要多写些代码，让人郁闷</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>当然，还有其他方式，例如,写一个匿名内部类，然后在其中做初始化（也被称为 brace initialization）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;() &#123;&#123;</div><div class="line">    add(&quot;A&quot;);</div><div class="line">    add(&quot;B&quot;);</div><div class="line">    add(&quot;C&quot;);</div><div class="line">&#125;&#125;;</div></pre></td></tr></table></figure></p><p>但是，我不喜欢这个方式。只是为了做个初始化，却要在<code>ArrayList</code>的同一行后面加这么一坨代码。</p><h4 id="Arrays-asList"><a href="#Arrays-asList" class="headerlink" title="Arrays.asList"></a>Arrays.asList</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; places = Arrays.asList(&quot;Buenos Aires&quot;, &quot;Córdoba&quot;, &quot;La Plata&quot;);</div></pre></td></tr></table></figure><p>####Collections.singletonList<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; places = Collections.singletonList(&quot;Buenos Aires&quot;);</div></pre></td></tr></table></figure></p><p>注意：后面的这两种方式，得到的是一个定长的<code>List</code>(如果add操作会抛异常）。如果你需要一个不定长的<code>List</code>,可以这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; places = new ArrayList&lt;&gt;(Arrays.asList(&quot;Buenos Aires&quot;, &quot;Córdoba&quot;, &quot;La Plata&quot;));</div></pre></td></tr></table></figure></p><p>stackoverflow链接：<br><a href="http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line" target="_blank" rel="external">http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;为了测试，我需要临时快速创建一个list。一开始我这样做：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; places = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;places.add(&lt;span class=&quot;string&quot;&gt;&quot;Buenos Aires&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;places.add(&lt;span class=&quot;string&quot;&gt;&quot;Córdoba&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;places.add(&lt;span class=&quot;string&quot;&gt;&quot;La Plata&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;之后我重构了下&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; places = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;String&amp;gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;Buenos Aires&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Córdoba&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;La Plata&quot;&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;是否有更加简便的方法呢？&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LayoutInflater</title>
    <link href="http://yoursite.com/2017/05/03/2016:7:10%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/03/2016:7:10学习笔记/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2018-03-10T13:50:20.064Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>获取LayoutInflater 的两种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LayoutInflater inflater = getLayoutInflater()；</div><div class="line">LayoutInflater inflater = (LayoutInflater)</div><div class="line">mContext.getSystemService(LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></li><li><p>设置全屏的两种方法,代码设置</p><p>这行代码必须设置在setConentView(R.layout.main) 之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,   WindowManager.LayoutParams. FLAG_FULLSCREEN);</div></pre></td></tr></table></figure></li><li><p>布局文件设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android :themen=<span class="string">"@android:style/Theme.NoTitleBar.Fullscreen"</span></div></pre></td></tr></table></figure><a id="more"></a></li><li><p>[x] <a href="http://blog.csdn.net/lmj623565791/article/details/51339751" target="_blank" rel="external">巧用ViewPager 打造不一样的广告轮播切换效果</a></p><pre><code>总结:- viewpager 要实现显示多个条目 需要设置viewpager的外层的布局文件和viewpager都要设置为false </code></pre></li></ul><pre><code>    设置相应的属性即可    设置viewpager的移动动画    android:clipChildren=&quot;false&quot;    viewPager.setPageTransformer- 实现透明   实现 AlphaPageTransformer implements ViewPager.PageTransformer    调用 viewPager.setPageTransformer(new AlphaPageTransformer());  ​  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> mMinAlpha = DEFAULT_MIN_ALPHA;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTransform</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">    &#123; </div><div class="line">        view.setAlpha(mMinAlpha);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-1,1]</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>) <span class="comment">//[0，-1]</span></div><div class="line">        &#123; </div><div class="line">            <span class="keyword">float</span> factor = mMinAlpha + (<span class="number">1</span> - mMinAlpha) * (<span class="number">1</span> + position);</div><div class="line">            view.setAlpha(factor);</div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//[1，0]</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">float</span> factor = mMinAlpha + (<span class="number">1</span> - mMinAlpha) * (<span class="number">1</span> - position);</div><div class="line">            view.setAlpha(factor);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">        view.setAlpha(mMinAlpha);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>- 实现缩小  &gt; view.setSacleX();  &gt;  &gt; view.setScaleY();  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoomOutPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.70f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line">        <span class="keyword">int</span> pageHeight = view.getHeight();</div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            view.setAlpha(MIN_ALPHA);</div><div class="line">            view.setScaleX(MIN_SCALE);</div><div class="line">            view.setScaleY(MIN_SCALE);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div><div class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</div><div class="line">                view.setScaleX(<span class="number">1</span> + <span class="number">0.3f</span> * position);</div><div class="line">                view.setScaleY(<span class="number">1</span> + <span class="number">0.3f</span> * position);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                view.setTranslationX(-horzMargin + vertMargin / <span class="number">2</span>);</div><div class="line"></div><div class="line">                view.setScaleX(<span class="number">1</span> - <span class="number">0.3f</span> * position);</div><div class="line">                view.setScaleY(<span class="number">1</span> - <span class="number">0.3f</span> * position);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line"></div><div class="line">            <span class="comment">// Fade the page relative to its size.</span></div><div class="line">            view.setAlpha(MIN_ALPHA + (scaleFactor - MIN_SCALE) / (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - MIN_ALPHA));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            view.setScaleX(MIN_SCALE);</div><div class="line">            view.setScaleY(MIN_SCALE);</div><div class="line">            view.setAlpha(MIN_ALPHA);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>  ​- 实现旋转  &gt; view.setPivotX();  &gt;  &gt; view.setPivotY();  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_MAX_ROTATE = <span class="number">15.0f</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">float</span> mMaxRotate = DEFAULT_MAX_ROTATE;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pageTransform</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">        <span class="comment">// This page is way off-screen to the left.  </span></div><div class="line">        view.setRotation(mMaxRotate * -<span class="number">1</span>);</div><div class="line">        view.setPivotX(view.getWidth());</div><div class="line">        view.setPivotY(view.getHeight());</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>)</div><div class="line">    &#123; <span class="comment">// [-1,1]  </span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>)<span class="comment">//[-1，0]</span></div><div class="line">        &#123;</div><div class="line">            view.setPivotX(view.getWidth() * (<span class="number">0.5f</span> + <span class="number">0.5f</span> * (-position)));</div><div class="line">            view.setPivotY(view.getHeight());</div><div class="line">            view.setRotation(mMaxRotate * position);</div><div class="line">        &#125; <span class="keyword">else</span><span class="comment">//[0,1]</span></div><div class="line">        &#123;</div><div class="line">            view.setPivotX(view.getWidth() * <span class="number">0.5f</span> * (<span class="number">1</span> - position));</div><div class="line">            view.setPivotY(view.getHeight());</div><div class="line">            view.setRotation(mMaxRotate * position);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">    &#123; <span class="comment">// (1,+Infinity]  </span></div><div class="line">        <span class="comment">// This page is way off-screen to the right.  </span></div><div class="line">        view.setRotation(mMaxRotate);</div><div class="line">        view.setPivotX(view.getWidth() * <span class="number">0</span>);</div><div class="line">        view.setPivotY(view.getHeight());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></code></pre><ul><li><p>[x] <a href="http://blog.csdn.net/lmj623565791/article/details/51503977" target="_blank" rel="external">Android 探究 LayoutInflater setFactory</a></p><pre><code>  总结：- 可以获取相关的属性  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">LayoutInflaterCompat.setFactory(LayoutInflater.from(<span class="keyword">this</span>), <span class="keyword">new</span> LayoutInflaterFactory()</div><div class="line">        &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span></span></div><div class="line">            &#123;</div><div class="line">                Log.e(TAG, <span class="string">"name = "</span> + name);</div><div class="line">                <span class="keyword">int</span> n = attrs.getAttributeCount();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">                &#123;</div><div class="line">                    Log.e(TAG, attrs.getAttributeName(i) + <span class="string">" , "</span> + attrs.getAttributeValue(i));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>- 可以进行相关的替换 将xml中的相关的TextView 替换为自定义的TextView<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (name.equals(<span class="string">"TextView"</span>))</div><div class="line">&#123;</div><div class="line">    MyTextView view = <span class="keyword">new</span> com.zhy.MyTextView(context,attrs);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>- 获取字体<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (typeface == <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">        typeface = Typeface.createFromAsset(getAssets(), <span class="string">"hwxk.ttf"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//设置相应的字体</span></div><div class="line"> <span class="keyword">if</span> ( view!= <span class="keyword">null</span> &amp;&amp; (view <span class="keyword">instanceof</span> TextView))</div><div class="line">      &#123;</div><div class="line">                ((TextView) view).setTypeface(typeface);</div><div class="line">      &#125;</div></pre></td></tr></table></figure></code></pre></li><li><p>看Android相关的书籍（一个小时）</p><ul><li>[ ] Android 群英会</li></ul></li><li><p>写代码</p></li><li><p>学习总结</p><p>  其他：</p><ul><li></li></ul></li><li><p>未解决的问题</p><ol><li>笔记代码应该整体对齐的方式</li><li>笔记模板的创建</li></ol><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;获取LayoutInflater 的两种方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LayoutInflater inflater = getLayoutInflater()；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;LayoutInflater inflater = (LayoutInflater)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mContext.getSystemService(LAYOUT_INFLATER_SERVICE);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置全屏的两种方法,代码设置&lt;/p&gt;
&lt;p&gt;这行代码必须设置在setConentView(R.layout.main) 之前&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;requestWindowFeature(Window.FEATURE_NO_TITLE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,   WindowManager.LayoutParams. FLAG_FULLSCREEN);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布局文件设置&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;android :themen=&lt;span class=&quot;string&quot;&gt;&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术选择</title>
    <link href="http://yoursite.com/2017/05/03/%E9%A1%B9%E7%9B%AE%E6%8A%80%E6%9C%AF%E7%82%B9%E9%80%89%E6%8B%A9/"/>
    <id>http://yoursite.com/2017/05/03/项目技术点选择/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2017-05-03T12:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术选择"><a href="#技术选择" class="headerlink" title="技术选择"></a>技术选择</h2><ol><li><p>Rxjava2</p></li><li><p>butterknife</p></li><li><p>rxandroid 用于Android的Rxjava绑定库</p></li><li><p>RxBinding：配合Rxjava处理控件异步调用</p><a id="more"></a></li><li><p>RxLifecycle：防止RxJava中subscription导致内存泄漏</p></li><li><p>RxPermissions：基于RxJava开发的用于帮助在Android 6.0中处理运行时权限检测</p></li><li><p>retrofit：目前最好用的网络通讯库，应该都用过吧</p></li><li><p>glide 能够很好的和activity进行生命周期绑定，减少内存溢出的风险</p></li><li><p>recyclerview-animators：RecyclerView的动画库，内置了非常多的动画效果</p></li><li><p>CircleImageView：</p></li><li><p>PhotoView：可根据手势进行缩放的图像库，这个也很常见</p></li><li><p>NumberProgressBar：性感的数字进度条</p></li><li><p>ijkplayer</p></li><li><p>Ormlite</p></li><li><p>Okgo下载</p></li><li><p>Luban压缩</p></li><li><p>BaseRecyclerViewAdapterHelper</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术选择&quot;&gt;&lt;a href=&quot;#技术选择&quot; class=&quot;headerlink&quot; title=&quot;技术选择&quot;&gt;&lt;/a&gt;技术选择&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Rxjava2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;butterknife&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rxandroid 用于Android的Rxjava绑定库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RxBinding：配合Rxjava处理控件异步调用&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何获取Android设备唯一ID？</title>
    <link href="http://yoursite.com/2017/05/03/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Android%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80ID/"/>
    <id>http://yoursite.com/2017/05/03/如何获取Android设备唯一ID/</id>
    <published>2017-05-03T12:06:15.000Z</published>
    <updated>2018-03-10T16:50:02.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何获取Android设备唯一ID？"><a href="#如何获取Android设备唯一ID？" class="headerlink" title="如何获取Android设备唯一ID？"></a>如何获取Android设备唯一ID？</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>每一个android设备都有唯一ID吗？如果有？怎么用java最简单取得呢？</p><p>如何取得android唯一码？</p><p>好处：</p><ul><li>1.不需要特定权限.</li><li>2.在99.5% Android装置（包括root过的）上，即API =&gt; 9，保证唯一性.</li><li>3.重装app之后仍能取得相同唯一值. </li></ul><a id="more"></a>   <pre><code>​</code></pre><p>伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if API =&gt; 9/10: (99.5% of devices)</div><div class="line"></div><div class="line">return unique ID containing serial id (rooted devices may be different)</div><div class="line"></div><div class="line">else</div><div class="line"></div><div class="line">return unique ID of build information (may overlap data - API &lt; 9)</div></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return pseudo unique ID</div><div class="line"> * <span class="doctag">@return</span> ID</div><div class="line"> */<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUniquePsuedoID</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// If all else fails, if the user does have lower than API 9 (lower</span></div><div class="line">    <span class="comment">// than Gingerbread), has reset their device or 'Secure.ANDROID_ID'</span></div><div class="line">    <span class="comment">// returns 'null', then simply the ID returned will be solely based</span></div><div class="line">    <span class="comment">// off their Android device information. This is where the collisions</span></div><div class="line">    <span class="comment">// can happen.</span></div><div class="line">    <span class="comment">// Thanks http://www.pocketmagic.net/?p=1662!</span></div><div class="line">    <span class="comment">// Try not to use DISPLAY, HOST or ID - these items could change.</span></div><div class="line">    <span class="comment">// If there are collisions, there will be overlapping data</span></div><div class="line">    String m_szDevIDShort = <span class="string">"35"</span> + (Build.BOARD.length() % <span class="number">10</span>) + (Build.BRAND.length() % <span class="number">10</span>) + (Build.CPU_ABI.length() % <span class="number">10</span>) + (Build.DEVICE.length() % <span class="number">10</span>) + (Build.MANUFACTURER.length() % <span class="number">10</span>) + (Build.MODEL.length() % <span class="number">10</span>) + (Build.PRODUCT.length() % <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Thanks to @Roman SL!</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/a/4789483/950427</span></div><div class="line">    <span class="comment">// Only devices with API &gt;= 9 have android.os.Build.SERIAL</span></div><div class="line">    <span class="comment">// http://developer.android.com/reference/android/os/Build.html#SERIAL</span></div><div class="line">    <span class="comment">// If a user upgrades software or roots their device, there will be a duplicate entry</span></div><div class="line">    String serial = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serial = android.os.Build.class.getField(<span class="string">"SERIAL"</span>).get(<span class="keyword">null</span>).toString();</div><div class="line"></div><div class="line">        <span class="comment">// Go ahead and return the serial for api =&gt; 9</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception exception) &#123;</div><div class="line">        <span class="comment">// String needs to be initialized</span></div><div class="line">        serial = <span class="string">"serial"</span>; <span class="comment">// some value</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Thanks @Joe!</span></div><div class="line">    <span class="comment">// http://stackoverflow.com/a/2853253/950427</span></div><div class="line">    <span class="comment">// Finally, combine the values we have found by using the UUID class to create a unique identifier</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();&#125;</div></pre></td></tr></table></figure><p>###回答2<br>好处：</p><ul><li>1.不需要特定权限.</li><li>2.在100% Android装置（包括root过的）上，保证唯一性.</li></ul><p>坏处</p><ul><li>1.重装app之后不能取得相同唯一值.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String uniqueID = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREF_UNIQUE_ID = <span class="string">"PREF_UNIQUE_ID"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> String <span class="title">id</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (uniqueID == <span class="keyword">null</span>) &#123;</div><div class="line">        SharedPreferences sharedPrefs = context.getSharedPreferences(</div><div class="line">                PREF_UNIQUE_ID, Context.MODE_PRIVATE);</div><div class="line">        uniqueID = sharedPrefs.getString(PREF_UNIQUE_ID, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (uniqueID == <span class="keyword">null</span>) &#123;</div><div class="line">            uniqueID = UUID.randomUUID().toString();</div><div class="line">            Editor editor = sharedPrefs.edit();</div><div class="line">            editor.putString(PREF_UNIQUE_ID, uniqueID);</div><div class="line">            editor.commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> uniqueID;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>###回答3（需要有电话卡）</p><p>好处：<br>1.重装app之后仍能取得相同唯一值.</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> TelephonyManager tm = (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line"><span class="keyword">final</span> String tmDevice, tmSerial, androidId;</div><div class="line">tmDevice = <span class="string">""</span> + tm.getDeviceId();</div><div class="line">tmSerial = <span class="string">""</span> + tm.getSimSerialNumber();</div><div class="line">androidId = <span class="string">""</span> + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);</div><div class="line">UUID deviceUuid = <span class="keyword">new</span> UUID(androidId.hashCode(), ((<span class="keyword">long</span>)tmDevice.hashCode() &lt;&lt; <span class="number">32</span>) | tmSerial.hashCode());</div><div class="line">String deviceId = deviceUuid.toString();</div></pre></td></tr></table></figure><p>谨记：要取得以下权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</div></pre></td></tr></table></figure></p><p>stackoverflow链接：<br><a href="http://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id" target="_blank" rel="external">http://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何获取Android设备唯一ID？&quot;&gt;&lt;a href=&quot;#如何获取Android设备唯一ID？&quot; class=&quot;headerlink&quot; title=&quot;如何获取Android设备唯一ID？&quot;&gt;&lt;/a&gt;如何获取Android设备唯一ID？&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;每一个android设备都有唯一ID吗？如果有？怎么用java最简单取得呢？&lt;/p&gt;
&lt;p&gt;如何取得android唯一码？&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.不需要特定权限.&lt;/li&gt;
&lt;li&gt;2.在99.5% Android装置（包括root过的）上，即API =&amp;gt; 9，保证唯一性.&lt;/li&gt;
&lt;li&gt;3.重装app之后仍能取得相同唯一值. &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android - CoordinatorLayout Behavior</title>
    <link href="http://yoursite.com/2017/04/15/Android%20-%20CoordinatorLayout%20Behavior/"/>
    <id>http://yoursite.com/2017/04/15/Android - CoordinatorLayout Behavior/</id>
    <published>2017-04-14T16:00:00.000Z</published>
    <updated>2018-03-10T13:41:14.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h3><p>协调者布局，它是support.design包中的控件，所以使用的时候要导入compile ‘com.android.support:design:23.3.0’包。简单来说，CoordinatorLayout是用来协调其子view并以触摸影响布局的形式产生动画效果的一个super-powered FrameLayout，其典型的子View包括：FloatingActionButton，SnackBar。注意：CoordinatorLayout是一个顶级父View。\<br><a id="more"></a></p><h3 id="AppBarLayout"><a href="#AppBarLayout" class="headerlink" title="AppBarLayout"></a>AppBarLayout</h3><p>AppBarLayout是LinearLayout的子类，必须在它的子view上设置app:layout_scrollFlags属性或者是在代码中调用setScrollFlags()设置这个属性。<br>AppBarLayout的子布局有5种滚动标识(上面代码CollapsingToolbarLayout中配置的app:layout_scrollFlags属性)：</p><ul><li>scroll：所有想滚动出屏幕的view都需要设置这个flag， 没有设置这个flag的view将被固定在屏幕顶部。 </li><li>enterAlways：这个flag让任意向下的滚动都会导致该view变为可见，启用快速“返回模式”。 </li><li>enterAlwaysCollapsed：假设你定义了一个最小高度（minHeight）同时enterAlways也定义了，那么view将在到达这个最小高度的时候开始显示，并且从这个时候开始慢慢展开，当滚动到顶部的时候展开完。 </li><li>exitUntilCollapsed：当你定义了一个minHeight，此布局将在滚动到达这个最小高度的时候折叠。 </li><li>snap：当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。<h3 id="CollapsingToolbarLayout"><a href="#CollapsingToolbarLayout" class="headerlink" title="CollapsingToolbarLayout"></a>CollapsingToolbarLayout</h3>CollapsingToolbarLayout作用是提供了一个可以折叠的Toolbar，它继承FrameLayout，给它设置layout_scrollFlags，它可以控制包含在CollapsingToolbarLayout中的控件(如：ImageView、Toolbar)在响应layout_behavior事件时作出相应的scrollFlags滚动事件(移除屏幕或固定在屏幕顶端)。CollapsingToolbarLayout可以通过app:contentScrim设置折叠时工具栏布局的颜色，通过app:statusBarScrim设置折叠时状态栏的颜色。默认contentScrim是colorPrimary的色值，statusBarScrim是colorPrimaryDark的色值。<br>CollapsingToolbarLayout的子布局有3种折叠模式（Toolbar中设置的app:layout_collapseMode）</li><li>off：默认属性，布局将正常显示，无折叠行为。 </li><li>pin：CollapsingToolbarLayout折叠后，此布局将固定在顶部。 </li><li>parallax：CollapsingToolbarLayout折叠时，此布局也会有视差折叠效果。 <blockquote><p>当CollapsingToolbarLayout的子布局设置了parallax模式时，我们还可以通过app:layout_collapseParallaxMultiplier设置视差滚动因子，值为：0~1。  </p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CoordinatorLayout&quot;&gt;&lt;a href=&quot;#CoordinatorLayout&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout&quot;&gt;&lt;/a&gt;CoordinatorLayout&lt;/h3&gt;&lt;p&gt;协调者布局，它是support.design包中的控件，所以使用的时候要导入compile ‘com.android.support:design:23.3.0’包。简单来说，CoordinatorLayout是用来协调其子view并以触摸影响布局的形式产生动画效果的一个super-powered FrameLayout，其典型的子View包括：FloatingActionButton，SnackBar。注意：CoordinatorLayout是一个顶级父View。\&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android - Behavior</title>
    <link href="http://yoursite.com/2017/04/01/Android%20-%20Behavior/"/>
    <id>http://yoursite.com/2017/04/01/Android - Behavior/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2018-03-10T13:41:43.091Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Behaivor"><a href="#Behaivor" class="headerlink" title="Behaivor"></a>Behaivor</h3><p>Behavior只有是CoordinatorLayout的直接子View才有意义。只要将Behavior绑定到CoordinatorLayout的直接子元素上，就能对触摸事件（touch events）、window insets、measurement、layout以及嵌套滚动（nested scrolling）等动作进行拦截。Design Library的大多功能都是借助Behavior的大量运用来实现的。当然，Behavior无法独立完成工作，必须与实际调用的CoordinatorLayout子视图相绑定。具体有三种方式：通过代码绑定、在XML中绑定或者通过注释实现自动绑定。上面NestedScrollView中app:layout_behavior=”@string/appbar_scrolling_view_behavior”的Behavior是系统默认的，我们也可以根据自己的需求来自定义Behavior。<br><a id="more"></a></p><h3 id="自定义Behavior"><a href="#自定义Behavior" class="headerlink" title="自定义Behavior"></a>自定义Behavior</h3><ul><li>某个view监听另一个view的状态变化，例如大小、位置、显示状态等<br>需要关系：layoutDependsOn和onDependentViewChanged方法， </li><li>某个view监听CoordinatorLayout里的滑动状态<br>需要关系：onStartNestedScroll和onNestedPreScroll方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 表示是否给应用了Behavior 的View 指定一个依赖的布局，通常，当依赖的View 布局发生变化时</div><div class="line">     * 不管被被依赖View 的顺序怎样，被依赖的View也会重新布局</div><div class="line">     * <span class="doctag">@param</span> parent</div><div class="line">     * <span class="doctag">@param</span> child 绑定behavior 的View</div><div class="line">     * <span class="doctag">@param</span> dependency   依赖的view</div><div class="line">     * <span class="doctag">@return</span> 如果child 是依赖的指定的View 返回true,否则返回false</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.layoutDependsOn(parent, child, dependency);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当被依赖的View 状态（如：位置、大小）发生变化时，这个方法被调用</div><div class="line">     * <span class="doctag">@param</span> parent</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> dependency</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onDependentViewChanged(parent, child, dependency);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  当coordinatorLayout 的子View试图开始嵌套滑动的时候被调用。当返回值为true的时候表明</div><div class="line">     *  coordinatorLayout 充当nested scroll parent 处理这次滑动，需要注意的是只有当返回值为true</div><div class="line">     *  的时候，Behavior 才能收到后面的一些nested scroll 事件回调（如：onNestedPreScroll、onNestedScroll等）</div><div class="line">     *  这个方法有个重要的参数nestedScrollAxes，表明处理的滑动的方向。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout 和Behavior 绑定的View的父CoordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child  和Behavior 绑定的View</div><div class="line">     * <span class="doctag">@param</span> directTargetChild</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@param</span> nestedScrollAxes 嵌套滑动 应用的滑动方向，看 &#123;<span class="doctag">@link</span> ViewCompat#SCROLL_AXIS_HORIZONTAL&#125;,</div><div class="line">     *                         &#123;<span class="doctag">@link</span> ViewCompat#SCROLL_AXIS_VERTICAL&#125;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 嵌套滚动发生之前被调用</div><div class="line">     * 在nested scroll child 消费掉自己的滚动距离之前，嵌套滚动每次被nested scroll child</div><div class="line">     * 更新都会调用onNestedPreScroll。注意有个重要的参数consumed，可以修改这个数组表示你消费</div><div class="line">     * 了多少距离。假设用户滑动了100px,child 做了90px 的位移，你需要把 consumed［1］的值改成90，</div><div class="line">     * 这样coordinatorLayout就能知道只处理剩下的10px的滚动。</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@param</span> dx  用户水平方向的滚动距离</div><div class="line">     * <span class="doctag">@param</span> dy  用户竖直方向的滚动距离</div><div class="line">     * <span class="doctag">@param</span> consumed</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行嵌套滚动时被调用</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@param</span> dxConsumed target 已经消费的x方向的距离</div><div class="line">     * <span class="doctag">@param</span> dyConsumed target 已经消费的y方向的距离</div><div class="line">     * <span class="doctag">@param</span> dxUnconsumed x 方向剩下的滚动距离</div><div class="line">     * <span class="doctag">@param</span> dyUnconsumed y 方向剩下的滚动距离</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  嵌套滚动结束时被调用，这是一个清除滚动状态等的好时机。</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStopNestedScroll(coordinatorLayout, child, target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * onStartNestedScroll返回true才会触发这个方法，接受滚动处理后回调，可以在这个</div><div class="line">     * 方法里做一些准备工作，如一些状态的重置等。</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> directTargetChild</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@param</span> nestedScrollAxes</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onNestedScrollAccepted(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用户松开手指并且会发生惯性动作之前调用，参数提供了速度信息，可以根据这些速度信息</div><div class="line">     * 决定最终状态，比如滚动Header，是让Header处于展开状态还是折叠状态。返回true 表</div><div class="line">     * 示消费了fling.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@param</span> velocityX x 方向的速度</div><div class="line">     * <span class="doctag">@param</span> velocityY y 方向的速度</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(CoordinatorLayout coordinatorLayout, View child, View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onNestedPreFling(coordinatorLayout, child, target, velocityX, velocityY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//可以重写这个方法对子View 进行重新布局</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLayoutChild</span><span class="params">(CoordinatorLayout parent, View child, <span class="keyword">int</span> layoutDirection)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onLayoutChild(parent, child, layoutDirection);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Behaivor&quot;&gt;&lt;a href=&quot;#Behaivor&quot; class=&quot;headerlink&quot; title=&quot;Behaivor&quot;&gt;&lt;/a&gt;Behaivor&lt;/h3&gt;&lt;p&gt;Behavior只有是CoordinatorLayout的直接子View才有意义。只要将Behavior绑定到CoordinatorLayout的直接子元素上，就能对触摸事件（touch events）、window insets、measurement、layout以及嵌套滚动（nested scrolling）等动作进行拦截。Design Library的大多功能都是借助Behavior的大量运用来实现的。当然，Behavior无法独立完成工作，必须与实际调用的CoordinatorLayout子视图相绑定。具体有三种方式：通过代码绑定、在XML中绑定或者通过注释实现自动绑定。上面NestedScrollView中app:layout_behavior=”@string/appbar_scrolling_view_behavior”的Behavior是系统默认的，我们也可以根据自己的需求来自定义Behavior。&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android-Retrofit&amp;Rxjava的结合</title>
    <link href="http://yoursite.com/2017/03/15/Android-Retrofit&amp;Rxjava%E7%9A%84%E7%BB%93%E5%90%88/"/>
    <id>http://yoursite.com/2017/03/15/Android-Retrofit&amp;Rxjava的结合/</id>
    <published>2017-03-14T16:00:00.000Z</published>
    <updated>2018-03-10T13:42:07.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.retrofit:adapter-rxjava:2.0.0-beta1'</span></div><div class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></div></pre></td></tr></table></figure><a id="more"></a><h3 id="添加AddCallAdapterFactory"><a href="#添加AddCallAdapterFactory" class="headerlink" title="添加AddCallAdapterFactory"></a>添加AddCallAdapterFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(<span class="string">"http://api.stay4it.com/"</span>)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">        .build();</div></pre></td></tr></table></figure><h3 id="返回Observable"><a href="#返回Observable" class="headerlink" title="返回Observable"></a>返回Observable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIService</span> </span>&#123;</div><div class="line">    <span class="meta">@POST</span>(<span class="string">"list"</span>)</div><div class="line">    <span class="function">Call&lt;DessertItemCollectionDao&gt; <span class="title">loadDessertList</span><span class="params">()</span></span>;</div><div class="line">    <span class="meta">@POST</span>(<span class="string">"list"</span>)</div><div class="line">    <span class="function">Observable&lt;DessertItemCollectionDao&gt; <span class="title">loadDessertListRx</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a href=&quot;#添加依赖&quot; class=&quot;headerlink&quot; title=&quot;添加依赖&quot;&gt;&lt;/a&gt;添加依赖&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit:adapter-rxjava:2.0.0-beta1&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxandroid:1.0.1&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava-过滤类操作符</title>
    <link href="http://yoursite.com/2017/03/12/Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://yoursite.com/2017/03/12/Rxjava-过滤类操作符/</id>
    <published>2017-03-11T16:00:00.000Z</published>
    <updated>2018-03-10T16:51:31.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>过滤类操作符(fileter take takeLast takeUntil distinct distinctUntilChanged skip skipLast …)  </p></blockquote><a id="more"></a><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>filter(Func1)用来过滤观测序列中我们不想要的值，只返回满足条件的值，我们看下原理图：<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/E935DB8A-BF9A-46EA-AE0B-DA1C4482DFB4.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;Community, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> community.houses.size()&gt;<span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">        System.out.println(community.name);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h3 id="Take"><a href="#Take" class="headerlink" title="Take"></a>Take</h3><p>take(int)用一个整数n作为一个参数，从原始的序列中发射前n个元素.<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/68A4DAD6-68B0-4BC2-8785-2DA93E02422E.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .take(<span class="number">10</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                System.out.println(community.name);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><h3 id="TakeLast"><a href="#TakeLast" class="headerlink" title="TakeLast"></a>TakeLast</h3><p>takeLast(int)同样用一个整数n作为参数，只不过它发射的是观测序列中后n个元素。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/DFACE1F8-A40A-44DF-860A-C38A2C508257.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .takeLast(<span class="number">3</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                System.out.println(community.name);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><h3 id="TakeUntil"><a href="#TakeUntil" class="headerlink" title="TakeUntil"></a>TakeUntil</h3><p>takeUntil(Observable)订阅并开始发射原始Observable，同时监视我们提供的第二个Observable。如果第二个Observable发射了一项数据或者发射了一个终止通知，takeUntil()返回的Observable会停止发射原始Observable并终止。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/D9805A93-32E6-44C8-A289-22DCA33E5513.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Long&gt; observableA = Observable.interval(<span class="number">300</span>, TimeUnit.MILLISECONDS);</div><div class="line">Observable&lt;Long&gt; observableB = Observable.interval(<span class="number">800</span>, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line">observableA.takeUntil(observableB)</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.exit(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                System.out.println(aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Thread.sleep(Integer.MAX_VALUE);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure></p><p> takeUntil(Func1)通过Func1中的call方法来判断是否需要终止发射数据。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/BF5145FC-1BCF-4364-98F7-F0718F1004D1.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">                .takeUntil(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> integer &gt;= <span class="number">5</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure></p><h3 id="Skip"><a href="#Skip" class="headerlink" title="Skip"></a>Skip</h3><p>skip(int)让我们可以忽略Observable发射的前n项数据<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/3F3B0A89-9561-4DB6-9C25-F97FDE565C60.png" alt=""><br>过滤掉小区列表communities中的前5个小区<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .skip(<span class="number">5</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                System.out.println(community.name);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p><h3 id="SkipLast"><a href="#SkipLast" class="headerlink" title="SkipLast"></a>SkipLast</h3><p>skipLast(int)忽略Observable发射的后n项数据。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/764EB414-F8EF-4C8F-BCF8-79FC69B10C35.png" alt=""></p><h3 id="ElementAt"><a href="#ElementAt" class="headerlink" title="ElementAt"></a>ElementAt</h3><p>elementAt(int)用来获取元素Observable发射的事件序列中的第n项数据，并当做唯一的数据发射出去。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/8887780D-901E-4CFA-AA79-F7F8B4CA2D94.png" alt=""></p><h3 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h3><p>debounce(long, TimeUnit)过滤掉了由Observable发射的速率过快的数据；如果在一个指定的时间间隔过去了仍旧没有发射一个，那么它将发射最后的那个。通常我们用来结合RxBinding(Jake Wharton大神使用RxJava封装的Android UI组件)使用，防止button重复点击。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/0EB7EA4B-0A0B-494F-A98B-C8A2E6FE662B.png" alt=""></p><p>debounce(Func1)可以根据Func1的call方法中的函数来过滤，Func1中的中的call方法返回了一个临时的Observable，如果原始的Observable在发射一个新的数据时，上一个数据根据Func1的call方法生成的临时Observable还没结束，那么上一个数据就会被过滤掉。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/07B11BF9-3A0C-4A48-AED8-1C22CD7764F1.png" alt=""></p><h3 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h3><p>distinct()的过滤规则是只允许还没有发射过的数据通过，所有重复的数据项都只会发射一次。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/F99A0060-16C9-432F-A43A-DE338D294246.png" alt=""><br>过滤掉一段数字中的重复项：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>)</div><div class="line">        .distinct()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">                System.out.print(i + <span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//程序输出：</span></div><div class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div></pre></td></tr></table></figure></p><p>distinct(Func1)参数中的Func1中的call方法会根据Observable发射的值生成一个Key，然后比较这个key来判断两个数据是不是相同；如果判定为重复则会和distinct()一样过滤掉重复的数据项。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/16E4C99D-5605-47F8-B92C-78B97FBD77FC.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">假设我们要过滤掉一堆房源中小区名重复的小区：</div><div class="line">List&lt;House&gt; houses = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="comment">//House构造函数中的第一个参数为该房源所属小区名，第二个参数为房源描述</span></div><div class="line">List&lt;House&gt; houses = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"中粮·海景壹号"</span>, <span class="string">"中粮海景壹号新出大平层！总价4500W起"</span>));</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"竹园新村"</span>, <span class="string">"满五唯一，黄金地段"</span>));</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"竹园新村"</span>, <span class="string">"一楼自带小花园"</span>));</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"中粮·海景壹号"</span>, <span class="string">"毗邻汤臣一品"</span>));</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"中粮·海景壹号"</span>, <span class="string">"顶级住宅，给您总统般尊贵体验"</span>));</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"竹园新村"</span>, <span class="string">"顶层户型，两室一厅"</span>));</div><div class="line">houses.add(<span class="keyword">new</span> House(<span class="string">"中粮·海景壹号"</span>, <span class="string">"南北通透，豪华五房"</span>));</div><div class="line">Observable.from(houses)</div><div class="line">        .distinct(<span class="keyword">new</span> Func1&lt;House, String&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.communityName;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"小区:"</span> + house.communityName + <span class="string">"; 房源描述:"</span> + house.desc);</div><div class="line">            &#125;</div><div class="line">        &#125;);            </div><div class="line"><span class="comment">//程序输出：</span></div><div class="line">小区:中粮·海景壹号; 房源描述:中粮海景壹号新出大平层！总价<span class="number">4500</span>W起</div><div class="line">小区:竹园新村; 房源描述:满五唯一，黄金地段</div></pre></td></tr></table></figure></p><h3 id="DistinctUntilChanged"><a href="#DistinctUntilChanged" class="headerlink" title="DistinctUntilChanged"></a>DistinctUntilChanged</h3><p>distinctUntilChanged()和distinct()类似，只不过它判定的是Observable发射的当前数据项和前一个数据项是否相同。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/7763A612-4EB3-4E6D-A987-8B1AD7D84219.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>)</div><div class="line">        .distinctUntilChanged()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">                System.out.print(i + <span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//程序输出：</span></div><div class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div></pre></td></tr></table></figure><p>distinctUntilChanged(Func1)和distinct(Func1)一样，根据Func1中call方法产生一个Key来判断两个相邻的数据项是否相同。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/01DCEBA1-9BFB-4027-ACC0-FA70E638109C.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Observable.from(houses)</div><div class="line">        .distinctUntilChanged(<span class="keyword">new</span> Func1&lt;House, String&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.communityName;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"小区:"</span> + house.communityName + <span class="string">"; 房源描述:"</span> + house.desc);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//程序输出：</span></div><div class="line">小区:中粮·海景壹号; 房源描述:中粮海景壹号新出大平层！总价<span class="number">4500</span>W起</div><div class="line">小区:竹园新村; 房源描述:满五唯一，黄金地段</div><div class="line">小区:中粮·海景壹号; 房源描述:毗邻汤臣一品</div><div class="line">小区:竹园新村; 房源描述:顶层户型，两室一厅</div><div class="line">小区:中粮·海景壹号; 房源描述:南北通透，豪华五房</div></pre></td></tr></table></figure></p><h3 id="First"><a href="#First" class="headerlink" title="First"></a>First</h3><p>First<br>first()顾名思义，它是的Observable只发送观测序列中的第一个数据项。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/13DC10FB-E8A8-4D76-B533-FA36B31AF5FE.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">获取房源列表houses中的第一套房源：</div><div class="line">Observable.from(houses)</div><div class="line">        .first()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"小区:"</span> + house.communityName + <span class="string">"; 房源描述:"</span> + house.desc);</div><div class="line">            &#125;                </div><div class="line">        &#125;);</div><div class="line"><span class="comment">//程序输出：</span></div><div class="line">小区:中粮·海景壹号; 房源描述:中粮海景壹号新出大平层！总价<span class="number">4500</span>W起</div></pre></td></tr></table></figure></p><p>first(Func1)只发送符合条件的第一个数据项。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/4902E500-1CD6-4B46-B176-AEF92971CD22.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//现在我们要获取房源列表houses中小区名为竹园新村的第一套房源。</span></div><div class="line"></div><div class="line">Observable.from(houses)</div><div class="line">        .first(<span class="keyword">new</span> Func1&lt;House, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"竹园新村"</span>.equals(house.communityName);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"小区:"</span> + house.communityName + <span class="string">"; 房源描述:"</span> + house.desc);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//程序输出：</span></div><div class="line">小区:竹园新村; 房源描述:满五唯一，黄金地段</div></pre></td></tr></table></figure><h3 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h3><p>last()只发射观测序列中的最后一个数据项。<br><img src="Rxjava-%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6/23505CCF-8705-4CD0-9601-BF8E3412BB66.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取房源列表中的最后一套房源：</span></div><div class="line">Observable.from(houses)</div><div class="line">        .last()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"小区:"</span> + house.communityName + <span class="string">"; 房源描述:"</span> + house.desc);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"><span class="comment">//程序输出：</span></div><div class="line">小区:中粮·海景壹号; 房源描述:南北通透，豪华五房</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;过滤类操作符(fileter take takeLast takeUntil distinct distinctUntilChanged skip skipLast …)  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="rxjava" scheme="http://yoursite.com/tags/rxjava/"/>
    
  </entry>
  
  <entry>
    <title>工作中遇到的问题(持续更新中)</title>
    <link href="http://yoursite.com/2017/03/02/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98(1)/"/>
    <id>http://yoursite.com/2017/03/02/工作中遇到的问题(1)/</id>
    <published>2017-03-02T02:00:54.000Z</published>
    <updated>2017-05-31T11:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作中遇到的问题-1"><a href="#工作中遇到的问题-1" class="headerlink" title="工作中遇到的问题(1)"></a>工作中遇到的问题(1)</h2><h4 id="1-无法启动application-在android-4-4-版本-上出现这个问题"><a href="#1-无法启动application-在android-4-4-版本-上出现这个问题" class="headerlink" title="1. 无法启动application 在android  4.4 版本 上出现这个问题"></a>1. 无法启动application 在android  4.4 版本 上出现这个问题</h4> <a id="more"></a> <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> Process: com.jingge.microlesson, PID: 17879</div><div class="line">ava.lang.RuntimeException: Unable to instantiate application com.jingge.microlesson.MicroLessonApplication: java.lang.ClassNotFoundException: Didn't find class "com.jingge.microlesson.MicroLessonApplication" on path: DexPathList[[zip file "/data/app/com.jingge.microlesson-2.apk"],nativeLibraryDirectories=[/data/app-lib/com.jingge.microlesson-2, /vendor/lib, /system/lib, /data/datalib]]</div><div class="line"> at android.app.LoadedApk.makeApplication(LoadedApk.java:537)</div><div class="line">    at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4586)</div><div class="line">  at android.app.ActivityThread.access$1800(ActivityThread.java:139)</div><div class="line">  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1316)</div><div class="line">   at android.os.Handler.dispatchMessage(Handler.java:102)</div><div class="line">at android.os.Looper.loop(Looper.java:136)</div><div class="line">at android.app.ActivityThread.main(ActivityThread.java:5314)</div><div class="line">at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">at java.lang.reflect.Method.invoke(Method.java:515)</div><div class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:864)</div><div class="line">at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:680)</div><div class="line"> at dalvik.system.NativeStart.main(Native Method)</div><div class="line">Caused by: java.lang.ClassNotFoundException: Didn't find class "com.jingge.microlesson.MicroLessonApplication" on path: DexPathList[[zip file "/data/app/com.jingge.microlesson-2.apk"],nativeLibraryDirectories=[/data/app-lib/com.jingge.microlesson-2, /vendor/lib, /system/lib, /data/datalib]]</div><div class="line">at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)</div><div class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:497)</div><div class="line"> at java.lang.ClassLoader.loadClass(ClassLoader.java:457)</div><div class="line">at android.app.Instrumentation.newApplication(Instrumentation.java:976)</div><div class="line">at android.app.LoadedApk.makeApplication(LoadedApk.java:532)</div><div class="line">at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4586) </div><div class="line"> at android.app.ActivityThread.access$1800(ActivityThread.java:139) </div><div class="line"> at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1316) </div><div class="line"> at android.os.Handler.dispatchMessage(Handler.java:102) </div><div class="line"> at android.os.Looper.loop(Looper.java:136) </div><div class="line"> at android.app.ActivityThread.main(ActivityThread.java:5314) </div><div class="line">at java.lang.reflect.Method.invokeNative(Native Method) </div><div class="line">at java.lang.reflect.Method.invoke(Method.java:515) </div><div class="line">at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:864) </div><div class="line"> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:680) </div><div class="line">at dalvik.system.NativeStart.main(Native Method) </div><div class="line"></div><div class="line">See http://g.co/androidstudio/manifest-merger for more information about the manifest merger.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    Suggestion: add 'tools:replace="android:allowBackup"' to &lt;application&gt; element at AndroidManifest.xml:55:5-594:19 to override</div></pre></td></tr></table></figure><blockquote><p>无法启动application 在android  4.4 版本 上出现这个问题   compile SDK 的版本改为13以上 就可以 了</p></blockquote><h3 id="2-Vitamio-支持64手机播放"><a href="#2-Vitamio-支持64手机播放" class="headerlink" title="2. Vitamio 支持64手机播放"></a>2. Vitamio 支持64手机播放</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">https://github.com/yixia/VitamioBundle/issues/305</div><div class="line"></div><div class="line">Hi, I searched on the net these days and finally found the solution!</div><div class="line">If you are using Android studio, just edit the gradle.properties in the root folder and addandroid.useDeprecatedNdk=true. Then edit the build.gradle file in your app's folder, set abiFilters as below:</div><div class="line">android &#123;</div><div class="line">    ....</div><div class="line">    defaultConfig &#123;</div><div class="line">        ....</div><div class="line">        ndk &#123;</div><div class="line">            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">网络出现的问题：</div><div class="line"></div><div class="line">sorry,this video cannot be played</div><div class="line">√√√√</div><div class="line"></div><div class="line">sorry,this video cannot be played</div><div class="line"></div><div class="line">android 5.0 权限拒绝 permission deny  解决办法：</div><div class="line">&lt;uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS" /&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工作中遇到的问题-1&quot;&gt;&lt;a href=&quot;#工作中遇到的问题-1&quot; class=&quot;headerlink&quot; title=&quot;工作中遇到的问题(1)&quot;&gt;&lt;/a&gt;工作中遇到的问题(1)&lt;/h2&gt;&lt;h4 id=&quot;1-无法启动application-在android-4-4-版本-上出现这个问题&quot;&gt;&lt;a href=&quot;#1-无法启动application-在android-4-4-版本-上出现这个问题&quot; class=&quot;headerlink&quot; title=&quot;1. 无法启动application 在android  4.4 版本 上出现这个问题&quot;&gt;&lt;/a&gt;1. 无法启动application 在android  4.4 版本 上出现这个问题&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>equlas和hashCode方法时应考虑的问题</title>
    <link href="http://yoursite.com/2017/03/02/(Override%EF%BC%89equlas%E5%92%8ChashCode%E6%96%B9%E6%B3%95%E6%97%B6%E5%BA%94%E8%80%83%E8%99%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/03/02/(Override）equlas和hashCode方法时应考虑的问题/</id>
    <published>2017-03-02T02:00:54.000Z</published>
    <updated>2018-03-08T02:30:00.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理论上讲（编程语言、数学层面）"><a href="#理论上讲（编程语言、数学层面）" class="headerlink" title="理论上讲（编程语言、数学层面）"></a>理论上讲（编程语言、数学层面）</h3><p>equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object" target="_blank" rel="external">javadoc</a>)) 。<br>另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。<br>hashCode()（<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(" target="_blank" rel="external">javadoc</a>))也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）</p><a id="more"></a><p>总的来说，这两个方法的关系：</p><p><strong>假如a.equals(b)，那么a.hashCode() 应等于b.hashCode()</strong></p><h3 id="实践上讲"><a href="#实践上讲" class="headerlink" title="实践上讲"></a>实践上讲</h3>  <!-- more -->    ​<br><strong>如果你重写了其中一个方法，那么务必重写另外一个方法</strong><br><br>equals()和hashCode()所计算的属性集（set of fields）应当是一样的<br>如何更快地重写这两个方法呢？<br>1. 使用<a href="http://commons.apache.org/lang/" target="_blank" rel="external">Apache Commons Lang library</a>中的<a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html" target="_blank" rel="external">EqualsBuilder</a>、<a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html" target="_blank" rel="external">HashCodeBuilder</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">17</span>, <span class="number">31</span>). <span class="comment">// two randomly chosen prime numbers</span></div><div class="line">            <span class="comment">// if deriving: appendSuper(super.hashCode()).</span></div><div class="line">            append(name).</div><div class="line">            append(age).</div><div class="line">            toHashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Person))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        Person rhs = (Person) obj;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EqualsBuilder().</div><div class="line">            <span class="comment">// if deriving: appendSuper(super.equals(obj)).</span></div><div class="line">            append(name, rhs.name).</div><div class="line">            append(age, rhs.age).</div><div class="line">            isEquals();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>如果你是用eclipse，可以在代码编辑区右键，然后选择 Source &gt; Generate hashCode() and equals()</li></ol><p><strong>另外请记得</strong></p><p>当你使用一些基于Hash的 Collection 、 Map，例如HashSet, LinkedHashSet, HashMap, Hashtable, 、WeakHashMap等。在键值对被放到集合中之后，请确保其key值所对应的hashCode()是保持不变的。比较可靠的一个办法，是保持这些key是不可变的，这也能带来不少好处</p><p>stackoverflow链接：<br><a href="http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java" target="_blank" rel="external">http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理论上讲（编程语言、数学层面）&quot;&gt;&lt;a href=&quot;#理论上讲（编程语言、数学层面）&quot; class=&quot;headerlink&quot; title=&quot;理论上讲（编程语言、数学层面）&quot;&gt;&lt;/a&gt;理论上讲（编程语言、数学层面）&lt;/h3&gt;&lt;p&gt;equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javadoc&lt;/a&gt;)) 。&lt;br&gt;另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。&lt;br&gt;hashCode()（&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode(&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javadoc&lt;/a&gt;))也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
